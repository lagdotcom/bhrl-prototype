{
  "version": 3,
  "sources": ["globalExternal:wglt", "../src/index.ts", "../src/Engine.ts", "../node_modules/nanoclone/src/index.js", "../src/tools/object.ts", "../src/Entity.ts", "../src/events.ts", "../src/prefabs/battleship.ts", "../src/types/Layer.ts", "../src/prefabs/bullet.ts", "../src/logic/glyphs.ts", "../src/prefabs/effect.ts", "../src/prefabs/fighter.ts", "../src/components/index.ts", "../src/prefabs/gun.ts", "../src/logic/angles.ts", "../src/prefabs/player.ts", "../src/prefabs/tools.ts", "../src/prefabs/ships.ts", "../src/prefabs/index.ts", "../src/tools/int.ts", "../src/tools/position.ts", "../src/EntityList.ts", "../src/MenuMode.ts", "../src/MainMode.ts", "../src/logic/entity.ts", "../src/Query.ts", "../src/logic/neighbours.ts", "../src/tools/oneOf.ts", "../src/systems/AI.ts", "../src/systems/Display.ts", "../src/logic/field.ts", "../src/GradientRun.ts", "../src/tools/lerp.ts", "../src/tools/distance.ts", "../src/systems/Explosives.ts", "../src/systems/Fields.ts", "../src/systems/HUD.ts", "../src/tools/angle.ts", "../src/logic/turret.ts", "../src/tools/pluralise.ts", "../src/systems/Homing.ts", "../src/systems/Lifetime.ts", "../src/logic/geometry.ts", "../src/systems/Motion.ts", "../src/systems/Player.ts", "../src/types/ShipPower.ts", "../src/logic/enemy.ts", "../src/pilots/enemy.ts", "../src/pilots/star.ts", "../src/tools/enumerate.ts", "../src/tools/shuffle.ts", "../src/systems/Spawns.ts", "../src/systems/Trails.ts", "../src/systems/Turrets.ts", "../src/systems/index.ts", "../src/logic/airFist.ts", "../src/HashMap.ts", "../src/logic/bfs.ts", "../src/tools/isDefined.ts"],
  "sourcesContent": ["module.exports = globalThis.wglt", "import { DEFAULT_FONT, Terminal } from \"wglt\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { HUD_HEIGHT } from \"@app/systems/HUD\";\r\n\r\nfunction loadEngine(parent: HTMLElement) {\r\n  const cols = 60;\r\n  const rows = 40;\r\n  const font = DEFAULT_FONT;\r\n\r\n  const container = document.createElement(\"div\");\r\n  parent.appendChild(container);\r\n  const onResize = () => {\r\n    const wantWidth = cols * font.charWidth;\r\n    const wantHeight = rows * font.charHeight;\r\n\r\n    const ratioWidth = Math.floor(window.innerWidth / wantWidth);\r\n    const ratioHeight = Math.floor(window.innerHeight / wantHeight);\r\n    const ratio = Math.min(ratioWidth, ratioHeight);\r\n\r\n    container.style.width = `${wantWidth * ratio}px`;\r\n    container.style.height = `${wantHeight * ratio}px`;\r\n  };\r\n  window.addEventListener(\"resize\", onResize);\r\n  onResize();\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  container.appendChild(canvas);\r\n  requestAnimationFrame(() => canvas.focus());\r\n\r\n  const term = new Terminal(canvas, cols, rows, { font });\r\n  const g = new Engine(term, cols, rows - HUD_HEIGHT);\r\n  (window as any).g = g;\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => loadEngine(document.body));\r\n", "import { BlendMode, Cell, Console, Terminal } from \"wglt\";\r\nimport Entity, { compareEntities } from \"@app/Entity\";\r\nimport {\r\n  EventCallback,\r\n  EventHandler,\r\n  EventMap,\r\n  EventName,\r\n  EventNames,\r\n} from \"@app/events\";\r\nimport instantiate, { PrefabName } from \"@app/prefabs\";\r\nimport { intPosition, isSameCell } from \"@app/tools/position\";\r\n\r\nimport EntityList from \"@app/EntityList\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport HashMap from \"@app/HashMap\";\r\nimport MenuMode from \"@app/MenuMode\";\r\nimport { Position } from \"@app/components\";\r\nimport bfs from \"@app/logic/bfs\";\r\nimport { fromEntries } from \"@app/tools/object\";\r\nimport { getEntityTree } from \"@app/logic/entity\";\r\nimport isDefined from \"@app/tools/isDefined\";\r\n\r\ntype Overlay = HashMap<Position, number>;\r\n\r\nexport default class Engine implements EventHandler {\r\n  lastEntityId: number;\r\n\r\n  map: Console;\r\n  entities: EntityList;\r\n  eventCallbacks!: Record<EventName, EventCallback<any>[]>;\r\n  overlays: Map<string, Overlay>;\r\n  player!: Entity; // be careful of this !\r\n  mode!: GameMode;\r\n\r\n  constructor(\r\n    public term: Terminal,\r\n    public mapWidth: number,\r\n    public mapHeight: number\r\n  ) {\r\n    term.update = this.update.bind(this);\r\n\r\n    this.map = new Console(mapWidth, mapHeight, () => true);\r\n    this.lastEntityId = 0;\r\n    this.entities = new EntityList(compareEntities);\r\n    this.overlays = new Map();\r\n\r\n    this.clearEventHandlers();\r\n    this.setMode(new MenuMode(this));\r\n  }\r\n\r\n  setMode(mode: GameMode) {\r\n    this.mode = mode;\r\n    this.mode.init();\r\n  }\r\n\r\n  clearEventHandlers() {\r\n    this.eventCallbacks = fromEntries(EventNames.map((n) => [n, []]));\r\n  }\r\n\r\n  fire<T extends EventName>(name: T, data: EventMap[T]): void {\r\n    for (const cb of this.eventCallbacks[name]) cb(data);\r\n  }\r\n\r\n  on<T extends EventName>(name: T, handler: EventCallback<T>): void {\r\n    this.eventCallbacks[name].push(handler);\r\n  }\r\n\r\n  spawn(name: PrefabName) {\r\n    return instantiate(this, name);\r\n  }\r\n\r\n  refresh() {\r\n    this.mode.dirty = true;\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.refresh();\r\n    this.entities.add(e);\r\n    this.fire(\"spawn\", { e });\r\n    return e;\r\n  }\r\n\r\n  kill(e: Entity, by?: Entity) {\r\n    if (e.alive) {\r\n      e.kill(by);\r\n      this.fire(\"kill\", { e, by });\r\n    }\r\n  }\r\n\r\n  move(e: Entity, pos: Position) {\r\n    const old = e.position;\r\n    e.move(pos.x, pos.y);\r\n    if (old) this.fire(\"move\", { e, old, pos });\r\n  }\r\n\r\n  blankMap() {\r\n    const { map, mapHeight, mapWidth } = this;\r\n    map.clear();\r\n\r\n    for (let y = 0; y < mapHeight; y++)\r\n      for (let x = 0; x < mapWidth; x++) {\r\n        // TODO draw something? :D\r\n        map.setBlocked(x, y, false);\r\n        map.setBlockedSight(x, y, false);\r\n      }\r\n\r\n    map.computeFov(0, 0, Infinity);\r\n  }\r\n\r\n  drawIfVisible(\r\n    x: number,\r\n    y: number,\r\n    g: string | number,\r\n    fg?: number,\r\n    bg?: number,\r\n    bm?: BlendMode\r\n  ) {\r\n    if (this.map.isVisible(x, y)) {\r\n      if (bm) this.term.drawCell(x, y, { bg } as Cell, bm);\r\n      else this.term.drawChar(x, y, g, fg, bg);\r\n    }\r\n  }\r\n\r\n  getRoot(e: Entity): Entity {\r\n    const owner = e.owner ?? e;\r\n    return owner.attachment ? this.getRoot(owner.attachment.parent) : owner;\r\n  }\r\n\r\n  getContents(\r\n    pos: Position,\r\n    ignoreSolid: number[] = []\r\n  ): { wall: boolean; solid?: Entity; other: Entity[] } {\r\n    const square = intPosition(pos);\r\n    if (!this.inBounds(square)) return { wall: true, other: [] };\r\n\r\n    const wall = this.map.isBlocked(square.x, square.y);\r\n    const entities = this.entities\r\n      .get()\r\n      .filter((e) => e.position && isSameCell(square, e.position));\r\n    const solid = entities\r\n      .filter((e) => !ignoreSolid.includes(e.id))\r\n      .find((e) => e.solid);\r\n\r\n    return { wall, solid, other: entities.filter((e) => !e.solid) };\r\n  }\r\n\r\n  tick() {\r\n    this.overlays.clear();\r\n    this.fire(\"tick\", undefined);\r\n    this.entities.clearDead();\r\n  }\r\n\r\n  update() {\r\n    this.mode.update();\r\n  }\r\n\r\n  inBounds(pos: Position) {\r\n    return (\r\n      pos.x >= 0 &&\r\n      pos.y >= 0 &&\r\n      pos.x < this.mapWidth &&\r\n      pos.y < this.mapHeight\r\n    );\r\n  }\r\n\r\n  getDistanceMap(entity: Entity) {\r\n    const key = `${entity.id}.distance`;\r\n    let map = this.overlays.get(key);\r\n    if (!map) {\r\n      map = bfs(\r\n        getEntityTree(this, entity)\r\n          .map((e) => e.position)\r\n          .filter(isDefined),\r\n        this.inBounds.bind(this)\r\n      );\r\n      this.overlays.set(key, map);\r\n    }\r\n\r\n    return map;\r\n  }\r\n\r\n  damage(hit: Entity, amount: number, inflicter: Entity) {\r\n    const e = this.getRoot(hit);\r\n    if (!e.ship) return;\r\n\r\n    e.ship.hp -= amount;\r\n    console.log(inflicter.name, \"hits\", e.name, \"for\", amount);\r\n    this.fire(\"damage\", { e, inflicter, amount });\r\n\r\n    if (e.ship.hp <= 0) this.kill(e, inflicter);\r\n  }\r\n}\r\n", "function clone (src, seen = new Map()) {\r\n  // Immutable things - null, undefined, functions, symbols, etc.\r\n  if (!src || typeof src !== 'object') return src\r\n\r\n  // Things we've seen already (circular refs)\r\n  if (seen.has(src)) return seen.get(src)\r\n\r\n  // Basic pattern for cloning something below here is:\r\n  // 1. Create copy\r\n  // 2. Add it to `seen` immediately, so we recognize it if we see it in\r\n  //    subordinate members\r\n  // 3. clone subordinate members\r\n\r\n  let copy\r\n  if (src.nodeType && 'cloneNode' in src) {\r\n    // DOM Node\r\n    copy = src.cloneNode(true)\r\n    seen.set(src, copy)\r\n  } else if (src instanceof Date) {\r\n    // Date\r\n    copy = new Date(src.getTime())\r\n    seen.set(src, copy)\r\n  } else if (src instanceof RegExp) {\r\n    // RegExp\r\n    copy = new RegExp(src)\r\n    seen.set(src, copy)\r\n  } else if (Array.isArray(src)) {\r\n    // Array\r\n    copy = new Array(src.length)\r\n    seen.set(src, copy)\r\n    for (let i = 0; i < src.length; i++) copy[i] = clone(src[i], seen)\r\n  } else if (src instanceof Map) {\r\n    // Map\r\n    copy = new Map()\r\n    seen.set(src, copy)\r\n    for (const [k, v] of src.entries()) copy.set(k, clone(v, seen))\r\n  } else if (src instanceof Set) {\r\n    // Set\r\n    copy = new Set()\r\n    seen.set(src, copy)\r\n    for (const v of src) copy.add(clone(v, seen))\r\n  } else if (src instanceof Object) {\r\n    // Object\r\n    copy = {}\r\n    seen.set(src, copy)\r\n    for (const [k, v] of Object.entries(src)) copy[k] = clone(v, seen)\r\n  } else {\r\n    // Unrecognized thing.  It's better to throw here than to return `src`, as\r\n    // we don't know whether src needs to be deep-copied here.\r\n    throw Error(`Unable to clone ${src}`)\r\n  }\r\n\r\n  return copy\r\n}\r\n\r\nexport default function (src) {\r\n  return clone(src, new Map())\r\n}\r\n", "import nanoclone from \"nanoclone\";\r\n\r\nexport const clone = nanoclone;\r\n\r\nexport const keys = Object.keys as <K extends PropertyKey, V>(\r\n  obj: Partial<Record<K, V>>\r\n) => K[];\r\n\r\nexport const fromEntries = <K extends PropertyKey, V>(\r\n  pairs: [K, V][]\r\n): Record<K, V> => {\r\n  const e: Partial<Record<K, V>> = {};\r\n  for (const [k, v] of pairs) e[k] = v;\r\n  return e as Record<K, V>;\r\n};\r\n", "import {\r\n  AI,\r\n  Appearance,\r\n  Attachment,\r\n  ComponentMap,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  Lifetime,\r\n  Motion,\r\n  Pilot,\r\n  Player,\r\n  Position,\r\n  Projectile,\r\n  Ship,\r\n  Trail,\r\n  Turret,\r\n} from \"@app/components\";\r\nimport { clone, keys } from \"@app/tools/object\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\n\r\nexport default class Entity implements Partial<ComponentMap> {\r\n  alive: boolean;\r\n  id: number;\r\n  owner?: Entity;\r\n  tags: Set<string>;\r\n\r\n  prefab?: PrefabName;\r\n  ai?: AI;\r\n  appearance?: Appearance;\r\n  attachment?: Attachment;\r\n  explodes?: Explodes;\r\n  field?: Field;\r\n  homing?: Homing;\r\n  ignoreSolid?: IgnoreSolid;\r\n  lifetime?: Lifetime;\r\n  motion?: Motion;\r\n  pilot?: Pilot;\r\n  player?: Player;\r\n  projectile?: Projectile;\r\n  position?: Position;\r\n  ship?: Ship;\r\n  solid: boolean;\r\n  trail?: Trail;\r\n  turret?: Turret;\r\n\r\n  constructor(public g: Engine, public name?: string) {\r\n    this.alive = true;\r\n    this.id = ++g.lastEntityId;\r\n    this.solid = false;\r\n    this.tags = new Set();\r\n  }\r\n\r\n  applyPrefab(name: PrefabName, prefab: Prefab): this {\r\n    this.prefab = name;\r\n\r\n    if (prefab.components) Object.assign(this, clone(prefab.components));\r\n\r\n    if (prefab.children)\r\n      for (const { name, x, y, overlay, tags } of prefab.children) {\r\n        const child = this.g.spawn(name).setAttachment({ parent: this, x, y });\r\n        if (overlay)\r\n          for (const key of keys(overlay))\r\n            Object.assign((child as any)[key], clone(overlay[key]));\r\n        if (tags) for (const tag of tags) child.tags.add(tag);\r\n      }\r\n\r\n    return this;\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return this.name;\r\n  }\r\n\r\n  kill(by?: Entity): this {\r\n    this.alive = false;\r\n    this.eachChild((e) => this.g.kill(e, by));\r\n    return this;\r\n  }\r\n\r\n  eachChild(callback: (e: Entity, at: Attachment) => void) {\r\n    for (const e of this.g.entities.get()) {\r\n      if (e.attachment?.parent === this) callback(e, e.attachment);\r\n    }\r\n  }\r\n\r\n  setOwner(e?: Entity): this {\r\n    this.owner = e;\r\n    return this;\r\n  }\r\n\r\n  setAI(c?: AI): this {\r\n    this.ai = c;\r\n    return this;\r\n  }\r\n\r\n  setAppearance(c?: Appearance): this {\r\n    this.g.refresh();\r\n    this.appearance = c;\r\n    return this;\r\n  }\r\n\r\n  setAttachment(c?: Attachment): this {\r\n    this.attachment = c;\r\n    return this;\r\n  }\r\n\r\n  setExplodes(c?: Explodes): this {\r\n    this.explodes = c;\r\n    return this;\r\n  }\r\n\r\n  setField(c?: Field): this {\r\n    this.field = c;\r\n    return this;\r\n  }\r\n\r\n  setHoming(c?: Homing): this {\r\n    this.homing = c;\r\n    return this;\r\n  }\r\n\r\n  setIgnoreSolid(c?: IgnoreSolid): this {\r\n    this.ignoreSolid = c;\r\n    return this;\r\n  }\r\n\r\n  setLifetime(c?: Lifetime): this {\r\n    this.lifetime = c;\r\n    return this;\r\n  }\r\n\r\n  setMotion(c?: Motion): this {\r\n    this.motion = c;\r\n    return this;\r\n  }\r\n\r\n  setPilot(c?: Pilot): this {\r\n    this.pilot = c;\r\n    return this;\r\n  }\r\n\r\n  setPosition(c?: Position): this {\r\n    this.g.refresh();\r\n    this.position = c;\r\n    return this;\r\n  }\r\n\r\n  setShip(c?: Ship): this {\r\n    this.ship = c;\r\n    return this;\r\n  }\r\n\r\n  setTrail(c?: Trail): this {\r\n    this.trail = c;\r\n    return this;\r\n  }\r\n\r\n  setTurret(c?: Turret): this {\r\n    this.turret = c;\r\n    return this;\r\n  }\r\n\r\n  setPlayer(c?: Player): this {\r\n    this.player = c;\r\n    return this;\r\n  }\r\n\r\n  setProjectile(c?: Projectile): this {\r\n    this.projectile = c;\r\n    return this;\r\n  }\r\n\r\n  setSolid(tag: boolean): this {\r\n    this.solid = tag;\r\n    return this;\r\n  }\r\n\r\n  move(x: number, y: number): this {\r\n    this.g.refresh();\r\n    this.position = { x, y };\r\n    this.eachChild((e, at) => e.move(x + at.x, y + at.y));\r\n    return this;\r\n  }\r\n}\r\n\r\nexport function compareEntities(a: Entity, b: Entity) {\r\n  const layerA = a.appearance?.layer ?? 0;\r\n  const layerB = b.appearance?.layer ?? 0;\r\n  if (layerA !== layerB) return layerA - layerB;\r\n\r\n  return a.id - b.id;\r\n}\r\n", "import Entity from \"@app/Entity\";\r\nimport { Position } from \"@app/components\";\r\n\r\nexport const EventNames = [\r\n  \"damage\",\r\n  \"draw\",\r\n  \"kill\",\r\n  \"move\",\r\n  \"notice\",\r\n  \"playerFire\",\r\n  \"playerMove\",\r\n  \"spawn\",\r\n  \"tick\",\r\n] as const;\r\nexport type EventName = (typeof EventNames)[number];\r\n\r\nexport type EventMap = {\r\n  damage: { e: Entity; inflicter: Entity; amount: number };\r\n  draw: undefined;\r\n  kill: { e: Entity; by?: Entity };\r\n  move: { e: Entity; old: Position; pos: Position };\r\n  notice: { e: Entity; noticed: Entity };\r\n  playerFire: { array: number };\r\n  playerMove: { move: Position };\r\n  spawn: { e: Entity };\r\n  tick: undefined;\r\n};\r\n\r\nexport type EventCallback<T extends EventName> = (data: EventMap[T]) => void;\r\n\r\nexport type EventHandler = {\r\n  fire<T extends EventName>(name: T, data: EventMap[T]): void;\r\n  on<T extends EventName>(name: T, cb: EventCallback<T>): void;\r\n};\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const Battleship: Prefab = {\r\n  components: {\r\n    ai: { idealDistance: 8, speed: 1 },\r\n    ship: { name: \"Battleship\", hp: 40, maxHp: 40 },\r\n  },\r\n  children: [\r\n    { name: \"BattleshipHull\", x: 1, y: 0 },\r\n    { name: \"BattleshipHull\", x: 2, y: 0 },\r\n    { name: \"BattleshipHull\", x: 0, y: 1 },\r\n    { name: \"BattleshipHull\", x: 1, y: 1 },\r\n    { name: \"BattleshipHull\", x: 2, y: 1 },\r\n    { name: \"MachineGun\", x: 0, y: 1 },\r\n    { name: \"HomingMissileLauncher\", x: 2, y: 1 },\r\n    { name: \"FighterLauncher\", x: 2, y: 0 },\r\n  ],\r\n};\r\n\r\nexport const BattleshipHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"/\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.WHITE,\r\n      bg: Colors.BROWN,\r\n    },\r\n  },\r\n};\r\n", "enum Layer {\r\n  Effect,\r\n  Ship,\r\n  Gun,\r\n  Bullet,\r\n  Player,\r\n}\r\nexport default Layer;\r\n", "import { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const Bullet: Prefab = {\r\n  components: {\r\n    projectile: { damage: 1 },\r\n    appearance: { glyph: \".\", layer: Layer.Bullet, fg: Colors.YELLOW },\r\n  },\r\n};\r\n\r\nexport const HomingMissile: Prefab = {\r\n  components: {\r\n    projectile: { damage: 1 },\r\n    homing: { strength: 0.15, duration: 10 },\r\n    trail: { effectPrefab: \"SmokePuff\" },\r\n    explodes: { size: 5, falloff: 1 },\r\n    appearance: { glyph: \"*\", layer: Layer.Bullet, fg: Colors.DARK_RED },\r\n  },\r\n};\r\n\r\nexport const PlayerBullet: Prefab = {\r\n  components: {\r\n    projectile: { damage: 1 },\r\n    appearance: {\r\n      glyph: Glyphs.InvertedExclamation,\r\n      layer: Layer.Bullet,\r\n      fg: Colors.YELLOW,\r\n    },\r\n  },\r\n};\r\n", "const Glyphs = {\r\n  Club: \"\\x05\",\r\n  Dot: \"\\x07\",\r\n  RingInvert: \"\\x0a\",\r\n  Female: \"\\x0c\",\r\n\r\n  Pilcrow: \"\\x14\",\r\n  Silcrow: \"\\x15\",\r\n  ResizeVertical: \"\\x17\",\r\n  RightArrow: \"\\x1a\",\r\n  LeftArrow: \"\\x1b\",\r\n  DownWedge: \"\\x1f\",\r\n\r\n  Pentagon: \"\\x7f\",\r\n\r\n  CapitalUUmlaut: \"\\x9a\",\r\n  Cent: \"\\x9b\",\r\n  Yen: \"\\x9d\",\r\n\r\n  NotFlip: \"\\xa9\",\r\n  Not: \"\\xaa\",\r\n  InvertedExclamation: \"\\xad\",\r\n\r\n  BoxVerticalSingle: \"\\xb3\",\r\n\r\n  BoxUpSingleHorizontalSingle: \"\\xc1\",\r\n  BoxDownSingleHorizontalSingle: \"\\xc2\",\r\n  BoxHorizontalSingle: \"\\xc4\",\r\n\r\n  BoxUpDoubleHorizontalSingle: \"\\xd0\",\r\n  BoxDownSingleHorizontalDouble: \"\\xd1\",\r\n  BoxVerticalDoubleHorizontalSingle: \"\\xd7\",\r\n\r\n  Pi: \"\\xe3\",\r\n  Theta: \"\\xe9\",\r\n  Omega: \"\\xea\",\r\n  SymbolED: \"\\xed\",\r\n\r\n  HorizontalDivide: \"\\xf6\",\r\n};\r\nexport default Glyphs;\r\n", "import { BlendMode, fromRgb } from \"wglt\";\r\n\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const AirFistRange: Prefab = {\r\n  components: {\r\n    lifetime: { duration: 2 },\r\n    appearance: {\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(0, 255, 255, 100),\r\n      blendMode: BlendMode.Add,\r\n    },\r\n  },\r\n};\r\n\r\nexport const SmokePuff: Prefab = {\r\n  components: {\r\n    lifetime: { duration: 2 },\r\n    appearance: {\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(100, 100, 100, 50),\r\n      blendMode: BlendMode.Add,\r\n    },\r\n  },\r\n};\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { makeTurret } from \"@app/components\";\r\n\r\nexport const FighterLauncher: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"_\", layer: Layer.Gun, fg: Colors.DARK_CYAN },\r\n    turret: makeTurret(\"Fighter Bay\", \"nearestEnemy\", {\r\n      bulletPrefab: \"Fighter\",\r\n      bulletVelocity: 0,\r\n      salvoCount: 1,\r\n      timeBetweenSalvos: 20,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const Fighter: Prefab = {\r\n  components: {\r\n    ai: { idealDistance: 6, speed: 2 },\r\n    ship: { name: \"Fighter\", hp: 2, maxHp: 2 },\r\n  },\r\n  children: [\r\n    {\r\n      name: \"FighterHull\",\r\n      x: 0,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \"<\" } },\r\n    },\r\n    { name: \"FighterHull\", x: 1, y: 0 },\r\n    {\r\n      name: \"FighterHull\",\r\n      x: 2,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \">\" } },\r\n    },\r\n    { name: \"PeaShooter\", x: 1, y: 0 },\r\n  ],\r\n};\r\n\r\nexport const FighterHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"-\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.YELLOW,\r\n      bg: Colors.DARK_BLUE,\r\n    },\r\n  },\r\n};\r\n", "import AI from \"./AI\";\r\nimport Appearance from \"./Appearance\";\r\nimport Attachment from \"./Attachment\";\r\nimport Explodes from \"./Explodes\";\r\nimport Field from \"./Field\";\r\nimport Homing from \"./Homing\";\r\nimport IgnoreSolid from \"./IgnoreSolid\";\r\nimport Lifetime from \"./Lifetime\";\r\nimport Motion from \"./Motion\";\r\nimport Pilot from \"./Pilot\";\r\nimport Player from \"./Player\";\r\nimport Position from \"./Position\";\r\nimport Projectile from \"./Projectile\";\r\nimport Ship from \"./Ship\";\r\nimport Trail from \"./Trail\";\r\nimport Turret from \"./Turret\";\r\n\r\nexport type ComponentMap = {\r\n  ai: AI;\r\n  appearance: Appearance;\r\n  attachment: Attachment;\r\n  explodes: Explodes;\r\n  field: Field;\r\n  homing: Homing;\r\n  ignoreSolid: IgnoreSolid;\r\n  lifetime: Lifetime;\r\n  motion: Motion;\r\n  pilot: Pilot;\r\n  position: Position;\r\n  player: Player;\r\n  projectile: Projectile;\r\n  ship: Ship;\r\n  trail: Trail;\r\n  turret: Turret;\r\n\r\n  solid: boolean;\r\n};\r\nexport type EntityAttribute = keyof ComponentMap;\r\n\r\nexport {\r\n  AI,\r\n  Appearance,\r\n  Attachment,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  Lifetime,\r\n  Motion,\r\n  Pilot,\r\n  Player,\r\n  Position,\r\n  Projectile,\r\n  Ship,\r\n  Trail,\r\n  Turret,\r\n};\r\n\r\nexport const makeTurret = (\r\n  name: string,\r\n  bulletAngle: Turret[\"bulletAngle\"],\r\n  {\r\n    bulletPrefab = \"Bullet\",\r\n    bulletVelocity = 1,\r\n    salvoCount = 1,\r\n    timeBetweenShots = 1,\r\n    timeBetweenSalvos = 1,\r\n  }: Partial<Turret>\r\n): Turret => ({\r\n  name,\r\n  bulletPrefab,\r\n  bulletAngle,\r\n  bulletVelocity,\r\n  salvoCount,\r\n  timeBetweenShots,\r\n  timeBetweenSalvos,\r\n  timer: 0,\r\n  salvo: salvoCount,\r\n});\r\n", "import Angles from \"@app/logic/angles\";\r\nimport { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { makeTurret } from \"@app/components\";\r\n\r\nexport const MachineGun: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.WHITE },\r\n    turret: makeTurret(\"Machine Gun\", Angles.Down, {\r\n      bulletPrefab: \"Bullet\",\r\n      bulletVelocity: 2,\r\n      salvoCount: 5,\r\n      timeBetweenShots: 0,\r\n      timeBetweenSalvos: 12,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const HomingMissileLauncher: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.YELLOW },\r\n    turret: makeTurret(\"Homing Missile\", \"nearestEnemy\", {\r\n      bulletPrefab: \"HomingMissile\",\r\n      bulletVelocity: 1,\r\n      salvoCount: 1,\r\n      timeBetweenSalvos: 8,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const PeaShooter: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.LIGHT_GRAY },\r\n    turret: makeTurret(\"Pea Shooter\", Angles.Down, {\r\n      bulletPrefab: \"Bullet\",\r\n      bulletVelocity: 2,\r\n      salvoCount: 1,\r\n      timeBetweenSalvos: 3,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const PlayerGun: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.WHITE },\r\n    turret: makeTurret(\"Pew Pew\", Angles.Up, {\r\n      bulletPrefab: \"PlayerBullet\",\r\n      bulletVelocity: 2,\r\n      salvoCount: 2,\r\n      timeBetweenShots: 0,\r\n      timeBetweenSalvos: 3,\r\n    }),\r\n  },\r\n};\r\n", "// radians baby\r\nconst Angles = {\r\n  Right: 0,\r\n  Down: Math.PI / 2,\r\n  Left: Math.PI,\r\n  Up: (Math.PI * 3) / 2,\r\n};\r\nexport default Angles;\r\n", "import { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { child } from \"@app/prefabs/tools\";\r\n\r\nexport const PlayerHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: { glyph: \"#\", layer: Layer.Player, fg: Colors.DARK_GRAY },\r\n  },\r\n};\r\n\r\nexport const PlayerShip: Prefab = {\r\n  components: {\r\n    player: { weaponArrays: [\"Primary\"] },\r\n    ship: { name: \"Alpha\", hp: 20, maxHp: 20 },\r\n  },\r\n  children: [\r\n    child(\"PlayerHull\", 0, 0, { appearance: { glyph: Glyphs.LeftArrow } }),\r\n    child(\"PlayerHull\", 1, 0, {\r\n      appearance: { glyph: Glyphs.Club, fg: Colors.LIGHT_GRAY },\r\n    }),\r\n    child(\"PlayerHull\", 2, 0, { appearance: { glyph: Glyphs.RightArrow } }),\r\n    child(\"PlayerGun\", 1, 0, undefined, [\"Primary\"]),\r\n  ],\r\n};\r\n", "import { PrefabChild } from \"@app/types/Prefab\";\r\nimport { PrefabName } from \".\";\r\n\r\nexport const child = (\r\n  name: PrefabName,\r\n  x: number,\r\n  y: number,\r\n  overlay?: PrefabChild[\"overlay\"],\r\n  tags?: PrefabChild[\"tags\"]\r\n): PrefabChild => ({ name, x, y, overlay, tags });\r\n", "import { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { child } from \"@app/prefabs/tools\";\r\n\r\nexport const Hull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: { glyph: \"#\", layer: Layer.Ship, fg: Colors.DARK_GRAY },\r\n  },\r\n};\r\n\r\nexport const ShipA: Prefab = {\r\n  components: { ship: { name: \"A\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Pilcrow } })],\r\n};\r\n\r\nexport const ShipB: Prefab = {\r\n  components: { ship: { name: \"B\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Yen } })],\r\n};\r\n\r\nexport const ShipC: Prefab = {\r\n  components: { ship: { name: \"C\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: \"W\" } })],\r\n};\r\n\r\nexport const ShipD: Prefab = {\r\n  components: { ship: { name: \"D\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Omega } })],\r\n};\r\n\r\nexport const ShipE: Prefab = {\r\n  components: { ship: { name: \"E\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.DownWedge } })],\r\n};\r\n\r\nexport const ShipF: Prefab = {\r\n  components: { ship: { name: \"F\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Pi } })],\r\n};\r\n\r\nexport const ShipG: Prefab = {\r\n  components: { ship: { name: \"G\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: \"M\" } })],\r\n};\r\n\r\nexport const ShipH: Prefab = {\r\n  components: { ship: { name: \"H\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Female } })],\r\n};\r\n\r\nexport const DroneA: Prefab = {\r\n  components: { ship: { name: \"Drone A\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Theta } })],\r\n};\r\n\r\nexport const DroneB: Prefab = {\r\n  components: { ship: { name: \"Drone B\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.SymbolED } })],\r\n};\r\n\r\nexport const DroneC: Prefab = {\r\n  components: { ship: { name: \"Drone C\", hp: 1, maxHp: 1 } },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Silcrow } })],\r\n};\r\n\r\nexport const CruiseyWing: Prefab = {\r\n  components: { ship: { name: \"Cruisey Wing\", hp: 1, maxHp: 1 } },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Not } }),\r\n    child(\"Hull\", 1, 0, { appearance: { glyph: Glyphs.HorizontalDivide } }),\r\n    child(\"Hull\", 2, 0, { appearance: { glyph: Glyphs.NotFlip } }),\r\n  ],\r\n};\r\n\r\nexport const Olm: Prefab = {\r\n  components: { ship: { name: \"Olm\", hp: 1, maxHp: 1 } },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Cent } }),\r\n    child(\"Hull\", 0, 1, { appearance: { glyph: Glyphs.ResizeVertical } }),\r\n    child(\"Hull\", 0, 2, {\r\n      appearance: { glyph: Glyphs.BoxDownSingleHorizontalDouble },\r\n    }),\r\n  ],\r\n};\r\n\r\nexport const GoutOFlame: Prefab = {\r\n  components: { ship: { name: \"Gout-'o-flame\", hp: 1, maxHp: 1 } },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Pentagon } }),\r\n    child(\"Hull\", 1, 0, {\r\n      appearance: { glyph: Glyphs.BoxVerticalDoubleHorizontalSingle },\r\n    }),\r\n    child(\"Hull\", 2, 0, { appearance: { glyph: Glyphs.Pentagon } }),\r\n    child(\"Hull\", 1, 1, {\r\n      appearance: { glyph: Glyphs.BoxUpDoubleHorizontalSingle },\r\n    }),\r\n  ],\r\n};\r\n\r\nexport const Demigod: Prefab = {\r\n  components: { ship: { name: \"Demigod\", hp: 1, maxHp: 1 } },\r\n  children: [\r\n    child(\"Hull\", 1, 0, { appearance: { glyph: Glyphs.CapitalUUmlaut } }),\r\n    child(\"Hull\", 0, 1, { appearance: { glyph: \"}\" } }),\r\n    child(\"Hull\", 1, 1, { appearance: { glyph: Glyphs.RingInvert } }),\r\n    child(\"Hull\", 2, 1, { appearance: { glyph: \"{\" } }),\r\n    child(\"Hull\", 1, 2, { appearance: { glyph: \"Y\" } }),\r\n  ],\r\n};\r\n", "import * as battleship from \"./battleship\";\r\nimport * as bullet from \"./bullet\";\r\nimport * as effect from \"./effect\";\r\nimport * as fighter from \"./fighter\";\r\nimport * as gun from \"./gun\";\r\nimport * as player from \"./player\";\r\nimport * as ships from \"./ships\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\n\r\nconst AllPrefabs = {\r\n  ...battleship,\r\n  ...bullet,\r\n  ...effect,\r\n  ...fighter,\r\n  ...gun,\r\n  ...player,\r\n  ...ships,\r\n};\r\n\r\nexport type PrefabName = keyof typeof AllPrefabs;\r\n\r\nexport default function instantiate(g: Engine, name: PrefabName) {\r\n  return g.add(new Entity(g, name).applyPrefab(name, AllPrefabs[name]));\r\n}\r\n", "export default function int(n?: number) {\r\n  return typeof n === \"undefined\" ? NaN : Math.floor(n);\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport function intPosition(pos: Position): Position {\r\n  return { x: int(pos.x), y: int(pos.y) };\r\n}\r\n\r\nexport function isSameCell(a: Position, b: Position): boolean {\r\n  const ia = intPosition(a);\r\n  const ib = intPosition(b);\r\n  return ia.x === ib.x && ia.y === ib.y;\r\n}\r\n\r\nexport function addPositions(a: Position, b: Position): Position {\r\n  return { x: a.x + b.x, y: a.y + b.y };\r\n}\r\n", "import Entity from \"@app/Entity\";\r\n\r\nexport default class EntityList {\r\n  dirty: boolean;\r\n\r\n  constructor(\r\n    private compareFn: (a: Entity, b: Entity) => number,\r\n    private entities: Entity[] = []\r\n  ) {\r\n    this.dirty = true;\r\n  }\r\n\r\n  clear() {\r\n    this.entities = [];\r\n    this.dirty = false;\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.entities.push(e);\r\n    this.dirty = true;\r\n  }\r\n\r\n  clearDead() {\r\n    this.entities = this.entities.filter((i) => i.alive);\r\n  }\r\n\r\n  sort() {\r\n    this.entities.sort(this.compareFn);\r\n    this.dirty = false;\r\n  }\r\n\r\n  get() {\r\n    if (this.dirty) this.sort();\r\n    return this.entities.slice();\r\n  }\r\n}\r\n", "import { Colors, Key } from \"wglt\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport MainMode from \"@app/MainMode\";\r\nimport { Pilot } from \"@app/components\";\r\nimport { angleMove } from \"@app/tools/angle\";\r\nimport { intPosition } from \"@app/tools/position\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\n\r\ntype Star = {\r\n  x: number;\r\n  y: number;\r\n  c: string;\r\n  fg: number;\r\n  angle: number;\r\n  vel: number;\r\n};\r\n\r\ntype StatName = \"body\" | \"mind\" | \"spirit\" | \"talent\";\r\n\r\nconst StatColours = [\r\n  0,\r\n  Colors.DARK_RED,\r\n  Colors.BROWN,\r\n  Colors.LIGHT_RED,\r\n  Colors.ORANGE,\r\n  Colors.YELLOW,\r\n  Colors.WHITE,\r\n];\r\n\r\nexport default class MenuMode implements GameMode {\r\n  dirty!: boolean;\r\n  pilot!: Pilot;\r\n  points!: number;\r\n  starfieldCounter!: number;\r\n  stars!: Star[];\r\n\r\n  constructor(\r\n    public g: Engine,\r\n    public starfieldSpeed = 5,\r\n    public starCount = 100\r\n  ) {}\r\n\r\n  init() {\r\n    this.dirty = true;\r\n    this.pilot = {\r\n      name: \"Player\",\r\n      difficulty: NaN,\r\n      body: 1,\r\n      mind: 1,\r\n      spirit: 1,\r\n      talent: 1,\r\n      class: [],\r\n    };\r\n    this.points = 6;\r\n\r\n    this.starfieldCounter = 0;\r\n    this.stars = [];\r\n    for (let i = 0; i < this.starCount; i++) this.stars.push(this.newStar());\r\n  }\r\n\r\n  draw() {\r\n    const { term } = this.g;\r\n\r\n    term.clear();\r\n\r\n    for (const star of this.stars) {\r\n      const { x, y } = intPosition(star);\r\n      term.drawChar(x, y, star.c, star.fg);\r\n    }\r\n\r\n    const cx = term.width / 2;\r\n\r\n    term.drawCenteredString(cx, 2, \"Bullet Hell Roguelike\", Colors.WHITE);\r\n\r\n    term.drawCenteredString(cx, 9, \"Create your Pilot\", Colors.WHITE);\r\n\r\n    term.drawCenteredString(cx, 10, `${this.points} points`, Colors.YELLOW);\r\n\r\n    const pad = 2;\r\n    const qtr = Math.floor((term.width - pad * 2) / 4);\r\n    const start = pad + qtr / 2;\r\n    this.drawStat(\"body\", start);\r\n    this.drawStat(\"mind\", start + qtr);\r\n    this.drawStat(\"spirit\", start + qtr * 2);\r\n    this.drawStat(\"talent\", start + qtr * 3);\r\n\r\n    if (this.points === 0)\r\n      term.drawCenteredString(cx, 20, \"Hit Enter to begin!\", Colors.WHITE);\r\n\r\n    this.dirty = false;\r\n  }\r\n\r\n  drawStat(stat: StatName, x: number) {\r\n    const { term } = this.g;\r\n\r\n    const label = `(${stat[0].toUpperCase()})${stat.slice(1)}`;\r\n    const value = this.pilot[stat];\r\n\r\n    term.drawCenteredString(x, 13, label, Colors.LIGHT_CYAN);\r\n    term.drawCenteredString(x, 14, value.toString(), StatColours[value]);\r\n  }\r\n\r\n  update() {\r\n    this.handleStarfield();\r\n    this.handleKeys();\r\n\r\n    if (this.dirty) this.draw();\r\n  }\r\n\r\n  newStar(): Star {\r\n    const { term } = this.g;\r\n\r\n    const fg = oneOf([\r\n      Colors.DARK_RED,\r\n      Colors.LIGHT_RED,\r\n      Colors.YELLOW,\r\n      Colors.LIGHT_CYAN,\r\n      Colors.WHITE,\r\n    ]);\r\n    const vel = 0.5 + Math.random();\r\n    const c = vel < 0.75 ? \".\" : vel < 1.25 ? Glyphs.Dot : \"*\";\r\n    const angle = Math.random() * Math.PI * 2;\r\n\r\n    return { x: term.width / 2, y: term.height / 2, c, fg, vel, angle };\r\n  }\r\n\r\n  handleStarfield() {\r\n    if (this.starfieldCounter < this.starfieldSpeed) {\r\n      this.starfieldCounter++;\r\n      return;\r\n    }\r\n\r\n    this.starfieldCounter = 0;\r\n    this.dirty = true;\r\n\r\n    const { width, height } = this.g.term;\r\n\r\n    for (const star of this.stars) {\r\n      const [dx, dy] = angleMove(star);\r\n      star.x += dx;\r\n      star.y += dy;\r\n\r\n      if (star.x < 0 || star.x >= width || star.y < 0 || star.y >= height)\r\n        Object.assign(star, this.newStar());\r\n    }\r\n  }\r\n\r\n  isPressed(key: Key, shift: boolean) {\r\n    const shiftDown =\r\n      this.g.term.isKeyDown(Key.VK_SHIFT_LEFT) ||\r\n      this.g.term.isKeyDown(Key.VK_SHIFT_RIGHT);\r\n    return this.g.term.isKeyPressed(key) && shift === shiftDown;\r\n  }\r\n\r\n  changeStat(stat: StatName, value: number) {\r\n    const newValue = this.pilot[stat] + value;\r\n\r\n    if (newValue < 1 || newValue > 6) return false;\r\n\r\n    this.points -= value;\r\n    this.pilot[stat] = newValue;\r\n    this.dirty = true;\r\n  }\r\n\r\n  handleKeys() {\r\n    if (this.points > 0) {\r\n      if (this.isPressed(Key.VK_B, false)) this.changeStat(\"body\", 1);\r\n      if (this.isPressed(Key.VK_M, false)) this.changeStat(\"mind\", 1);\r\n      if (this.isPressed(Key.VK_S, false)) this.changeStat(\"spirit\", 1);\r\n      if (this.isPressed(Key.VK_T, false)) this.changeStat(\"talent\", 1);\r\n    }\r\n\r\n    if (this.isPressed(Key.VK_B, true)) this.changeStat(\"body\", -1);\r\n    if (this.isPressed(Key.VK_M, true)) this.changeStat(\"mind\", -1);\r\n    if (this.isPressed(Key.VK_S, true)) this.changeStat(\"spirit\", -1);\r\n    if (this.isPressed(Key.VK_T, true)) this.changeStat(\"talent\", -1);\r\n\r\n    if (this.points === 0 && this.g.term.isKeyPressed(Key.VK_ENTER))\r\n      this.g.setMode(new MainMode(this.g, \"PlayerShip\", this.pilot));\r\n  }\r\n}\r\n", "import { Colors, Key } from \"wglt\";\r\nimport { getEntityLayout, getEntityMidpoint } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport { Pilot } from \"@app/components\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\nimport { addSystems } from \"@app/systems\";\r\nimport { fireAirFist } from \"@app/logic/airFist\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport default class MainMode implements GameMode {\r\n  dirty: boolean;\r\n  showOverlay?: string;\r\n\r\n  constructor(\r\n    public g: Engine,\r\n    public shipPrefab: PrefabName,\r\n    public pilot: Pilot\r\n  ) {\r\n    this.dirty = true;\r\n  }\r\n\r\n  init() {\r\n    const { g, shipPrefab, pilot } = this;\r\n\r\n    g.clearEventHandlers();\r\n\r\n    g.entities.clear();\r\n    g.blankMap();\r\n\r\n    g.player = g.spawn(shipPrefab).setPilot(pilot);\r\n\r\n    const { width, height } = getEntityLayout(g, g.player);\r\n    g.player.move(int(g.mapWidth / 2 - width / 2), g.mapHeight - height - 4);\r\n\r\n    addSystems(g);\r\n  }\r\n\r\n  draw() {\r\n    const { map, mapWidth, mapHeight, overlays, term } = this.g;\r\n\r\n    for (let y = 0; y < mapHeight; y++) {\r\n      for (let x = 0; x < mapWidth; x++) {\r\n        const cell = map.grid[y][x];\r\n\r\n        // TODO scrolling etc.\r\n        term.drawChar(x, y, 0, cell.fg, cell.bg);\r\n      }\r\n    }\r\n\r\n    this.g.fire(\"draw\", undefined);\r\n    this.dirty = false;\r\n\r\n    if (this.showOverlay) {\r\n      const overlay = overlays.get(this.showOverlay);\r\n      if (overlay) {\r\n        for (let y = 0; y < mapHeight; y++) {\r\n          for (let x = 0; x < mapWidth; x++) {\r\n            const value = overlay.get({ x, y }) || Infinity;\r\n            const ch = value === Infinity ? \"-\" : value < 10 ? `${value}` : \"*\";\r\n            term.drawChar(x, y, ch, Colors.LIGHT_RED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.handleKeys();\r\n    if (this.dirty) this.draw();\r\n  }\r\n\r\n  handleKeys() {\r\n    const { player, term } = this.g;\r\n\r\n    const move = term.getMovementKey();\r\n    if (move) {\r\n      this.g.fire(\"playerMove\", { move });\r\n      return;\r\n    }\r\n\r\n    if (term.isKeyPressed(Key.VK_1)) {\r\n      this.g.fire(\"playerFire\", { array: 0 });\r\n      return;\r\n    }\r\n    if (term.isKeyPressed(Key.VK_2)) {\r\n      this.g.fire(\"playerFire\", { array: 1 });\r\n      return;\r\n    }\r\n\r\n    if (term.isKeyPressed(Key.VK_F)) {\r\n      fireAirFist(this.g, getEntityMidpoint(this.g, player), 4.5);\r\n      this.g.tick();\r\n      return;\r\n    }\r\n  }\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { Position } from \"@app/components\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\ntype LayoutEntry<T = Entity> = {\r\n  absolute: Position;\r\n  offset: Position;\r\n  entity: T;\r\n};\r\n\r\nexport function getLayoutMidpoint(\r\n  layout: LayoutEntry[],\r\n  topLeft: Position\r\n): Position {\r\n  if (!topLeft || !layout.length) throw new Error(\"Could not get midpoint\");\r\n\r\n  const avg = (key: keyof Position) =>\r\n    layout.reduce((total, { offset }) => total + offset[key], 0) /\r\n    layout.length;\r\n\r\n  return { x: topLeft.x + avg(\"x\"), y: topLeft.y + avg(\"y\") };\r\n}\r\n\r\nexport function getLayoutBlockers(\r\n  g: Engine,\r\n  layout: LayoutEntry[],\r\n  topLeft: Position,\r\n  ignoreSolid: number[] = []\r\n): LayoutEntry<Entity | \"wall\">[] {\r\n  const blockers: LayoutEntry<Entity | \"wall\">[] = [];\r\n\r\n  for (const { offset } of layout) {\r\n    const pos = addPositions(topLeft, offset);\r\n    const { wall, solid } = g.getContents(pos, ignoreSolid);\r\n    if (wall) blockers.push({ absolute: pos, offset, entity: \"wall\" });\r\n    else if (solid) blockers.push({ absolute: pos, offset, entity: solid });\r\n  }\r\n\r\n  return blockers;\r\n}\r\n\r\nexport function getEntityTree(g: Engine, e: Entity) {\r\n  const root = g.getRoot(e);\r\n  return g.entities.get().filter((x) => g.getRoot(x) === root);\r\n}\r\n\r\nexport function getEntityTreeIDs(g: Engine, e: Entity) {\r\n  return getEntityTree(g, e).map((x) => x.id);\r\n}\r\n\r\nexport function getEntityLayout(g: Engine, e: Entity) {\r\n  const topLeft = g.getRoot(e).position ?? { x: 0, y: 0 };\r\n\r\n  const parts = getEntityTree(g, e);\r\n  const layout: LayoutEntry[] = [];\r\n  let width = 0;\r\n  let height = 0;\r\n\r\n  for (const part of parts) {\r\n    const { attachment, solid } = part;\r\n\r\n    if (attachment && solid) {\r\n      const { x, y } = attachment;\r\n\r\n      layout.push({\r\n        absolute: addPositions(topLeft, attachment),\r\n        offset: { x, y },\r\n        entity: part,\r\n      });\r\n\r\n      width = Math.max(x + 1, width);\r\n      height = Math.max(y + 1, height);\r\n    }\r\n  }\r\n\r\n  return { layout, topLeft, width, height };\r\n}\r\n\r\nexport function getEntityBlockers(g: Engine, e: Entity, origin?: Position) {\r\n  const ignoreSolid = getEntityTreeIDs(g, e);\r\n  const { layout, topLeft } = getEntityLayout(g, e);\r\n  if (!origin || !topLeft) return [];\r\n\r\n  return getLayoutBlockers(g, layout, origin || topLeft, ignoreSolid);\r\n}\r\n\r\nexport function getEntityMidpoint(g: Engine, e: Entity): Position {\r\n  const { layout, topLeft } = getEntityLayout(g, e);\r\n\r\n  if (!topLeft || !layout.length)\r\n    throw new Error(`Could not get midpoint of entity#${e.id}`);\r\n\r\n  return getLayoutMidpoint(layout, topLeft);\r\n}\r\n", "import { ComponentMap, EntityAttribute } from \"@app/components\";\r\n\r\nimport Entity from \"@app/Entity\";\r\nimport EntityList from \"@app/EntityList\";\r\n\r\nexport type HasComponents<T extends EntityAttribute[]> = Pick<\r\n  ComponentMap,\r\n  T[number]\r\n> &\r\n  Partial<ComponentMap>;\r\n\r\nexport type QueryCallback<T extends EntityAttribute[]> = (\r\n  components: HasComponents<T>,\r\n  e: Entity\r\n) => void;\r\n\r\nexport default class Query<T extends EntityAttribute[]> {\r\n  constructor(private list: EntityList, private filter: T) {}\r\n\r\n  matches(e: Entity) {\r\n    if (!e.alive) return false;\r\n\r\n    for (const key of this.filter) {\r\n      if (!e[key]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  forEach(cb: QueryCallback<T>) {\r\n    for (const e of this.list.get()) {\r\n      if (this.matches(e)) cb(e as HasComponents<T>, e);\r\n    }\r\n  }\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\nexport const neighbourOffsets: Position[] = [\r\n  { x: -1, y: -1 },\r\n  { x: -1, y: 0 },\r\n  { x: -1, y: 1 },\r\n  { x: 0, y: 1 },\r\n  { x: 1, y: 1 },\r\n  { x: 1, y: 0 },\r\n  { x: 1, y: -1 },\r\n  { x: 0, y: -1 },\r\n];\r\n\r\nexport default function neighbours(pos: Position): Position[] {\r\n  return neighbourOffsets.map((o) => addPositions(pos, o));\r\n}\r\n", "export default function oneOf<T>(items: readonly T[]): T {\r\n  if (!items.length) throw new Error(\"oneOf passed empty array\");\r\n\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n", "import { addPositions, intPosition } from \"@app/tools/position\";\r\nimport { getEntityLayout, getEntityTreeIDs } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { Position } from \"@app/components\";\r\nimport Query from \"@app/Query\";\r\nimport { neighbourOffsets } from \"@app/logic/neighbours\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\n\r\nexport default function addAI(g: Engine) {\r\n  const query = new Query(g.entities, [\"ai\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ ai, position: rawPosition }, e) => {\r\n      // TODO something better than this?\r\n      if (!ai.attacking) {\r\n        ai.attacking = g.player;\r\n        g.fire(\"notice\", { e, noticed: g.player });\r\n      }\r\n\r\n      const ignoreSolid = getEntityTreeIDs(g, e);\r\n      const { layout } = getEntityLayout(g, e);\r\n      const position = intPosition(rawPosition);\r\n\r\n      const search = g.getDistanceMap(ai.attacking);\r\n\r\n      const isPassable = (pos: Position) => {\r\n        const { solid, wall } = g.getContents(pos, ignoreSolid);\r\n        return !solid && !wall;\r\n      };\r\n\r\n      const getPosScore = (pos: Position) =>\r\n        isPassable(pos)\r\n          ? Math.abs(search.getOrDefault(pos, Infinity) - ai.idealDistance)\r\n          : Infinity;\r\n\r\n      const getScore = (pos: Position) =>\r\n        layout.reduce(\r\n          (a, { offset }) => a + getPosScore(addPositions(pos, offset)),\r\n          0\r\n        ) / layout.length;\r\n\r\n      let bestScore = getScore(position);\r\n\r\n      let possibilities: Position[] = [];\r\n      for (const offset of neighbourOffsets) {\r\n        const possibility = addPositions(position, offset);\r\n        if (!search.has(possibility)) continue;\r\n\r\n        const score = getScore(possibility);\r\n        if (score < bestScore) {\r\n          bestScore = score;\r\n          possibilities = [possibility];\r\n        } else if (score === bestScore) possibilities.push(possibility);\r\n      }\r\n\r\n      if (possibilities.length) {\r\n        const destination = oneOf(possibilities);\r\n        e.move(destination.x, destination.y);\r\n        return;\r\n      }\r\n    })\r\n  );\r\n\r\n  g.on(\"damage\", ({ e, inflicter }) => {\r\n    if (e === inflicter) return;\r\n\r\n    if (e.ai) {\r\n      if (!e.ai.attacking) {\r\n        const root = g.getRoot(inflicter);\r\n        if (root.alive) e.ai.attacking = root;\r\n      }\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport default function addDisplay(g: Engine) {\r\n  const query = new Query(g.entities, [\"appearance\", \"position\"]);\r\n  g.on(\"draw\", () =>\r\n    query.forEach(({ appearance, position }) =>\r\n      g.drawIfVisible(\r\n        int(position.x),\r\n        int(position.y),\r\n        appearance.glyph,\r\n        appearance.fg,\r\n        appearance.bg,\r\n        appearance.blendMode\r\n      )\r\n    )\r\n  );\r\n}\r\n", "import { Appearance, Field, Position } from \"@app/components\";\r\n\r\nimport { BlendMode } from \"wglt\";\r\nimport FieldType from \"@app/types/FieldType\";\r\nimport GradientRun from \"@app/GradientRun\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport distance from \"@app/tools/distance\";\r\n\r\nexport type FieldCell = { x: number; y: number; intensity: number };\r\n\r\nconst fieldGradients: Record<FieldType, GradientRun> = {\r\n  fire: new GradientRun([\r\n    [0, [0, 0, 0, 0]],\r\n    [2, [255, 0, 0, 150]],\r\n    [4, [255, 255, 0, 150]],\r\n    [6, [255, 255, 255, 150]],\r\n    [10, [255, 255, 255, 255]],\r\n  ]),\r\n};\r\n\r\nexport function getFieldAppearance(field: Field): Appearance | undefined {\r\n  if (field.intensity <= 0) return undefined;\r\n\r\n  return {\r\n    glyph: \" \",\r\n    layer: Layer.Effect,\r\n    bg: fieldGradients[field.type].get(field.intensity),\r\n    blendMode: BlendMode.Add,\r\n  };\r\n}\r\n\r\n// TODO shape around walls lol\r\nexport function generateField(centre: Position, size: number) {\r\n  const parts: FieldCell[] = [];\r\n\r\n  const minX = Math.floor(centre.x - size);\r\n  const maxX = Math.ceil(centre.x + size);\r\n  const minY = Math.floor(centre.y - size);\r\n  const maxY = Math.ceil(centre.y + size);\r\n\r\n  for (let y = minY; y <= maxY; y++) {\r\n    for (let x = minX; x <= maxX; x++) {\r\n      const dist = distance(centre, { x, y });\r\n      if (dist >= size) continue;\r\n\r\n      parts.push({ x, y, intensity: size - dist });\r\n    }\r\n  }\r\n\r\n  return parts;\r\n}\r\n", "import RGBA from \"@app/types/RGBA\";\r\nimport { fromRgb } from \"wglt\";\r\nimport lerp from \"@app/tools/lerp\";\r\n\r\ntype GradientPoint = [breakpoint: number, colour: RGBA];\r\n\r\nexport default class GradientRun {\r\n  constructor(public points: GradientPoint[]) {\r\n    this.sort();\r\n  }\r\n\r\n  private sort() {\r\n    this.points.sort(([a], [b]) => a - b);\r\n  }\r\n\r\n  add(breakpoint: number, c: RGBA): this {\r\n    this.points.push([breakpoint, c]);\r\n    this.sort();\r\n    return this;\r\n  }\r\n\r\n  get(value: number) {\r\n    const [low, lowColour] = this.points[0];\r\n    if (value <= low) return fromRgb(...lowColour);\r\n\r\n    const [high, highColour] = this.points[this.points.length - 1];\r\n    if (value >= high) return fromRgb(...highColour);\r\n\r\n    const higherIndex = this.points.findIndex(([p]) => p > value);\r\n    const [below, [ar, ag, ab, aa]] = this.points[higherIndex - 1];\r\n    const [above, [br, bg, bb, ba]] = this.points[higherIndex];\r\n\r\n    const r = (value - below) / (above - below);\r\n    return fromRgb(\r\n      lerp(ar, br, r),\r\n      lerp(ag, bg, r),\r\n      lerp(ab, bb, r),\r\n      lerp(aa, ba, r)\r\n    );\r\n  }\r\n}\r\n", "export default function lerp(start: number, end: number, t: number) {\r\n  return start * (1.0 - t) + end * t;\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\nexport default function distance(a: Position, b: Position) {\r\n  const dx = Math.abs(a.x - b.x);\r\n  const dy = Math.abs(a.y - b.y);\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { generateField } from \"@app/logic/field\";\r\n\r\nexport default function addExplosives(g: Engine) {\r\n  g.on(\"kill\", ({ e }) => {\r\n    const { explodes, name, position } = e;\r\n\r\n    if (explodes && position) {\r\n      for (const { x, y, intensity } of generateField(position, explodes.size))\r\n        g.add(\r\n          new Entity(g, name + \"Explosion\").setPosition({ x, y }).setField({\r\n            type: \"fire\",\r\n            intensity,\r\n            falloff: explodes.falloff,\r\n          })\r\n        );\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { getEntityLayout } from \"@app/logic/entity\";\r\nimport { getFieldAppearance } from \"@app/logic/field\";\r\nimport { isSameCell } from \"@app/tools/position\";\r\n\r\nexport default function addFields(g: Engine) {\r\n  const ships = new Query(g.entities, [\"ship\"]);\r\n  const query = new Query(g.entities, [\"field\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ field, position }, e) => {\r\n      field.intensity -= field.falloff;\r\n      e.setAppearance(getFieldAppearance(field));\r\n\r\n      if (field.intensity <= 0) g.kill(e);\r\n      else\r\n        ships.forEach((_, victim) => {\r\n          const { layout } = getEntityLayout(g, victim);\r\n          const hit = layout.find(({ absolute }) =>\r\n            isSameCell(absolute, position)\r\n          );\r\n          if (hit) g.damage(victim, field.intensity, e);\r\n        });\r\n    })\r\n  );\r\n  g.on(\"spawn\", ({ e }) => {\r\n    if (e.field) e.setAppearance(getFieldAppearance(e.field));\r\n  });\r\n}\r\n", "import { Colors, Terminal } from \"wglt\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport { Turret } from \"@app/components\";\r\nimport { getEntityTree } from \"@app/logic/entity\";\r\nimport { getState } from \"@app/logic/turret\";\r\nimport pluralise from \"@app/tools/pluralise\";\r\n\r\nexport const HUD_HEIGHT = 5;\r\n\r\nfunction drawBar(\r\n  term: Terminal,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  val: number,\r\n  max: number,\r\n  filledBg: number,\r\n  emptyBg: number,\r\n  textFg: number\r\n) {\r\n  const label = `${Math.ceil(val)}/${max}`;\r\n  const length = Math.floor((val / max) * width);\r\n\r\n  term.drawHLine(x, y, width, \" \", undefined, emptyBg);\r\n  if (length) term.drawHLine(x, y, length, \" \", undefined, filledBg);\r\n  term.drawCenteredString(x + width / 2, y, label, textFg);\r\n}\r\n\r\nfunction drawWeaponInfo(term: Terminal, x: number, y: number, turret: Turret) {\r\n  term.drawString(x, y, turret.name, Colors.WHITE);\r\n\r\n  const state = getState(turret);\r\n  if (state === \"Reloading\") {\r\n    term.drawString(x, y + 1, `Reloading (${turret.timer})`, Colors.LIGHT_RED);\r\n    return;\r\n  }\r\n\r\n  const ammo = `${turret.salvo}/${turret.salvoCount}`;\r\n  term.drawString(x, y + 1, ammo, Colors.YELLOW);\r\n\r\n  if (state === \"Chambering\")\r\n    term.drawString(x + ammo.length, y + 1, ` (${turret.timer})`, Colors.BROWN);\r\n}\r\n\r\nexport default function addHUD(g: Engine) {\r\n  const { mapHeight, term } = g;\r\n\r\n  g.on(\"draw\", () => {\r\n    const player = g.player;\r\n\r\n    // term.drawHLine(0, startY, term.width, Glyphs.BoxHorizontalSingle);\r\n    term.fillRect(0, mapHeight, term.width, HUD_HEIGHT, \" \");\r\n    term.drawSingleBox(0, mapHeight, term.width, HUD_HEIGHT, Colors.WHITE);\r\n\r\n    let x = 1;\r\n    const y = mapHeight + 1;\r\n    const name = `${player.pilot!.name} in ${player.ship!.name}`;\r\n    const barLength = Math.max(10, name.length - 3);\r\n    term.drawString(x, y, name, Colors.WHITE);\r\n    term.drawString(x, y + 1, \"HP:\", Colors.WHITE);\r\n    drawBar(\r\n      term,\r\n      x + 3,\r\n      y + 1,\r\n      barLength,\r\n      player.ship!.hp,\r\n      player.ship!.maxHp,\r\n      Colors.DARK_GREEN,\r\n      Colors.DARK_RED,\r\n      Colors.WHITE\r\n    );\r\n\r\n    x += barLength + 4;\r\n    term.drawChar(\r\n      x - 1,\r\n      y - 1,\r\n      Glyphs.BoxDownSingleHorizontalSingle,\r\n      Colors.WHITE\r\n    );\r\n    term.drawVLine(\r\n      x - 1,\r\n      y,\r\n      HUD_HEIGHT - 2,\r\n      Glyphs.BoxVerticalSingle,\r\n      Colors.WHITE\r\n    );\r\n    term.drawChar(\r\n      x - 1,\r\n      y + HUD_HEIGHT - 2,\r\n      Glyphs.BoxUpSingleHorizontalSingle,\r\n      Colors.WHITE\r\n    );\r\n\r\n    for (const tag of player.player!.weaponArrays) {\r\n      const weapons = getEntityTree(g, player).filter((e) => e.turret);\r\n      let wx = x;\r\n      for (const weapon of weapons) {\r\n        drawWeaponInfo(term, wx, y + 1, weapon.turret!);\r\n        wx += 15;\r\n      }\r\n\r\n      term.drawString(\r\n        x,\r\n        y,\r\n        `${tag} ${pluralise(\"Weapon\", weapons.length)}`,\r\n        Colors.LIGHT_CYAN\r\n      );\r\n    }\r\n  });\r\n}\r\n", "import { Motion, Position } from \"@app/components\";\r\n\r\nconst tau = Math.PI * 2;\r\n\r\nexport function angleBetween(a: Position, b: Position) {\r\n  return Math.atan2(b.y - a.y, b.x - a.x);\r\n}\r\n\r\nexport function angleDiff(x: number, y: number) {\r\n  const a = (x - y) % tau;\r\n  const b = (y - x) % tau;\r\n\r\n  return a < b ? -a : b;\r\n}\r\n\r\nexport function angleMove(mo: Motion): [dx: number, dy: number] {\r\n  const dx = Math.cos(mo.angle) * mo.vel;\r\n  const dy = Math.sin(mo.angle) * mo.vel;\r\n  return [dx, dy];\r\n}\r\n", "import { Position, Turret } from \"@app/components\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\n\r\nexport function getState(turret: Turret) {\r\n  if (turret.salvo <= 0) return \"Reloading\";\r\n  if (turret.timer > 0) return \"Chambering\";\r\n  return \"Ready\";\r\n}\r\n\r\nexport function advanceTimer(turret: Turret) {\r\n  if (turret.timer > 0) {\r\n    turret.timer--;\r\n    if (turret.timer <= 0 && turret.salvo <= 0)\r\n      turret.salvo = turret.salvoCount;\r\n  }\r\n}\r\n\r\nexport function canFire(turret: Turret) {\r\n  return turret.timer === 0;\r\n}\r\n\r\nexport function fire(\r\n  g: Engine,\r\n  turret: Turret,\r\n  position: Position,\r\n  target: Position,\r\n  owner: Entity,\r\n  ignoreIds: number[] = []\r\n) {\r\n  if (--turret.salvo <= 0) turret.timer = turret.timeBetweenSalvos;\r\n  else turret.timer = turret.timeBetweenShots;\r\n\r\n  const start = { x: position.x + 0.5, y: position.y + 0.5 };\r\n  const angle =\r\n    turret.bulletAngle === \"nearestEnemy\"\r\n      ? angleBetween(start, target)\r\n      : turret.bulletAngle;\r\n\r\n  const bullet = g\r\n    .spawn(turret.bulletPrefab)\r\n    .setIgnoreSolid({ ids: ignoreIds })\r\n    .move(start.x, start.y);\r\n\r\n  if (turret.bulletVelocity)\r\n    bullet.setMotion({ angle, vel: turret.bulletVelocity });\r\n\r\n  if (!bullet.ai) bullet.setOwner(owner);\r\n\r\n  return bullet;\r\n}\r\n", "export default function pluralise(s: string, n: number) {\r\n  return n === 1 ? s : s + \"s\";\r\n}\r\n", "import { angleBetween, angleDiff } from \"@app/tools/angle\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { getEntityMidpoint } from \"@app/logic/entity\";\r\n\r\nexport default function addHoming(g: Engine) {\r\n  const query = new Query(g.entities, [\"homing\", \"motion\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ homing, motion, position }, e) => {\r\n      if (!homing.target?.alive) return;\r\n\r\n      const centre = getEntityMidpoint(g, homing.target);\r\n      const desired = angleBetween(position, centre);\r\n      const diff = angleDiff(motion.angle, desired);\r\n\r\n      if (Math.abs(diff) <= homing.strength) motion.angle = desired;\r\n      else if (diff < 0) motion.angle -= homing.strength;\r\n      else motion.angle += homing.strength;\r\n\r\n      if (--homing.duration <= 0) {\r\n        e.setHoming();\r\n        e.setTrail();\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\n\r\nexport default function addLifetime(g: Engine) {\r\n  const query = new Query(g.entities, [\"lifetime\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ lifetime }, e) => {\r\n      if (--lifetime.duration <= 0) g.kill(e);\r\n    })\r\n  );\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport int from \"@app/tools/int\";\r\n\r\n/// thanks https://www.redblobgames.com/grids/line-drawing.html#stepping\r\nexport function walkGrid(a: Position, b: Position) {\r\n  const dx = b.x - a.x,\r\n    dy = b.y - a.y,\r\n    nx = Math.abs(dx),\r\n    ny = Math.abs(dy),\r\n    signX = dx > 0 ? 1 : -1,\r\n    signY = dy > 0 ? 1 : -1;\r\n\r\n  const p = { ...a };\r\n  const points = [{ ...p }];\r\n  for (let ix = 0, iy = 0; ix < nx || iy < ny; ) {\r\n    if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n      // next step is horizontal\r\n      p.x += signX;\r\n      ix++;\r\n    } else {\r\n      // next step is vertical\r\n      p.y += signY;\r\n      iy++;\r\n    }\r\n    points.push({ ...p });\r\n  }\r\n  return points;\r\n}\r\n\r\n/// thanks https://www.redblobgames.com/grids/circle-drawing/#outline\r\nexport function getCirclePoints(cx: number, cy: number, radius: number) {\r\n  const points: Position[] = [];\r\n\r\n  const add = (rawX: number, rawY: number) => {\r\n    const x = int(rawX);\r\n    const y = int(rawY);\r\n    if (!points.find((p) => p.x === x && p.y === y)) points.push({ x, y });\r\n  };\r\n\r\n  for (let r = 0; r <= Math.floor(radius * Math.sqrt(0.5)); r++) {\r\n    const d = Math.floor(Math.sqrt(radius * radius - r * r));\r\n    add(cx - d, cy + r);\r\n    add(cx + d, cy + r);\r\n    add(cx - d, cy - r);\r\n    add(cx + d, cy - r);\r\n    add(cx + r, cy - d);\r\n    add(cx + r, cy + d);\r\n    add(cx - r, cy - d);\r\n    add(cx - r, cy + d);\r\n  }\r\n\r\n  return points;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Query from \"@app/Query\";\r\nimport { angleMove } from \"@app/tools/angle\";\r\nimport { intPosition } from \"@app/tools/position\";\r\nimport { walkGrid } from \"@app/logic/geometry\";\r\n\r\nexport default function addMotion(g: Engine) {\r\n  const query = new Query(g.entities, [\"motion\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ motion, position, projectile, ignoreSolid }, e) => {\r\n      const [dx, dy] = angleMove(motion);\r\n      const dst = { x: position.x + dx, y: position.y + dy };\r\n\r\n      const line = walkGrid(intPosition(position), intPosition(dst));\r\n\r\n      let hitWall = false;\r\n      let hitEntity: Entity | undefined = undefined;\r\n      for (const pos of line) {\r\n        if (!g.inBounds(pos)) {\r\n          g.kill(e);\r\n          return;\r\n        }\r\n\r\n        g.move(e, pos);\r\n\r\n        const { wall, solid } = g.getContents(pos, ignoreSolid?.ids);\r\n        if (wall) {\r\n          hitWall = true;\r\n          break;\r\n        } else if (solid) {\r\n          hitEntity = solid;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (hitWall) {\r\n        g.kill(e);\r\n      } else if (hitEntity) {\r\n        if (projectile) g.damage(hitEntity, projectile.damage, e);\r\n        g.kill(e);\r\n      } else {\r\n        g.move(e, dst);\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import { canFire, fire } from \"@app/logic/turret\";\r\nimport { getEntityBlockers, getEntityTree } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\nexport default function addPlayer(g: Engine) {\r\n  g.on(\"playerMove\", ({ move }) => {\r\n    const player = g.player;\r\n    const destination = addPositions(player.position!, move);\r\n    const blockers = getEntityBlockers(g, player, destination);\r\n    if (!blockers.length) {\r\n      player.move(destination.x, destination.y);\r\n      g.tick();\r\n    }\r\n  });\r\n\r\n  g.on(\"playerFire\", ({ array }) => {\r\n    const player = g.player;\r\n    const tag = player.player!.weaponArrays[array];\r\n\r\n    const tree = getEntityTree(g, player);\r\n    const weapons = tree.filter((e) => e.tags.has(tag));\r\n    let fired = false;\r\n    for (const weapon of weapons) {\r\n      if (!weapon.turret) continue;\r\n\r\n      if (canFire(weapon.turret)) {\r\n        fire(\r\n          g,\r\n          weapon.turret,\r\n          weapon.position!,\r\n          { x: 0, y: 0 },\r\n          player,\r\n          tree.map((e) => e.id)\r\n        );\r\n        fired = true;\r\n      }\r\n    }\r\n    if (fired) g.tick();\r\n  });\r\n}\r\n", "export const ShipPowers = [\r\n  \"Typical\",\r\n  \"Healthy\",\r\n  \"Double\",\r\n  \"Multi\",\r\n  \"Drain\",\r\n  \"StarPilot\",\r\n  \"Mega\",\r\n] as const;\r\n\r\ntype ShipPower = (typeof ShipPowers)[number];\r\nexport default ShipPower;\r\n", "import { Appearance, Position } from \"@app/components\";\r\nimport ShipPower, { ShipPowers } from \"@app/types/ShipPower\";\r\n\r\nimport { Colors } from \"wglt\";\r\nimport EnemyPilots from \"@app/pilots/enemy\";\r\nimport Engine from \"@app/Engine\";\r\nimport StarPilots from \"@app/pilots/star\";\r\nimport enumerate from \"@app/tools/enumerate\";\r\nimport { getEntityTree } from \"@app/logic/entity\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\nimport shuffle from \"@app/tools/shuffle\";\r\n\r\nconst Colours: Record<ShipPower, Partial<Appearance>> = {\r\n  Typical: { fg: Colors.DARK_GRAY },\r\n  Healthy: { fg: Colors.DARK_GREEN },\r\n  Double: { fg: Colors.LIGHT_GRAY },\r\n  Multi: { fg: Colors.DARK_MAGENTA },\r\n\r\n  Drain: { fg: Colors.DARK_RED },\r\n  StarPilot: { fg: Colors.YELLOW },\r\n  Mega: { fg: Colors.BLACK, bg: Colors.DARK_MAGENTA },\r\n};\r\nexport default Colours;\r\n\r\nconst powerDifficulty: Record<ShipPower, number> = {\r\n  Typical: 0,\r\n  Healthy: 2,\r\n  Double: 3,\r\n  Multi: 6,\r\n\r\n  Drain: 4,\r\n  StarPilot: 8,\r\n  Mega: 20,\r\n};\r\n\r\nconst ShipPrefabs = [\r\n  \"ShipA\",\r\n  \"ShipB\",\r\n  \"ShipC\",\r\n  \"ShipD\",\r\n  \"ShipE\",\r\n  \"ShipF\",\r\n  \"ShipG\",\r\n  \"ShipH\",\r\n  \"DroneA\",\r\n  \"DroneB\",\r\n  \"DroneC\",\r\n  \"CruiseyWing\",\r\n  \"Olm\",\r\n  \"GoutOFlame\",\r\n  \"Demigod\",\r\n] as const;\r\ntype ShipPrefab = (typeof ShipPrefabs)[number];\r\n\r\nconst prefabDifficulty: Record<ShipPrefab, number> = {\r\n  ShipA: 1,\r\n  ShipB: 1,\r\n  ShipC: 1,\r\n  ShipD: 1,\r\n  ShipE: 1,\r\n  ShipF: 1,\r\n  ShipG: 1,\r\n  ShipH: 1,\r\n  DroneA: 2,\r\n  DroneB: 2,\r\n  DroneC: 2,\r\n  CruiseyWing: 8,\r\n  Olm: 10,\r\n  GoutOFlame: 20,\r\n  Demigod: 40,\r\n};\r\n\r\nfunction getPilot(power: ShipPower) {\r\n  // TODO make sure star pilot doesn't already exist\r\n  if (power === \"StarPilot\" || power === \"Mega\") return oneOf(StarPilots);\r\n  return oneOf(EnemyPilots);\r\n}\r\n\r\nexport function generateEnemy(g: Engine, maxDifficulty: number) {\r\n  while (true) {\r\n    const prefab = oneOf(ShipPrefabs);\r\n    const power = oneOf(ShipPowers);\r\n    const pilot = getPilot(power);\r\n    const difficulty =\r\n      powerDifficulty[power] + prefabDifficulty[prefab] + pilot.difficulty;\r\n\r\n    if (difficulty <= maxDifficulty) {\r\n      // TODO give AI\r\n      const entity = g.spawn(prefab).setPilot(pilot);\r\n\r\n      // TODO set hp, weapons, etc.\r\n\r\n      const appearance = Colours[power];\r\n      for (const part of getEntityTree(g, entity)) {\r\n        if (part.appearance) Object.assign(part.appearance, appearance);\r\n      }\r\n\r\n      return { entity, difficulty };\r\n    }\r\n  }\r\n}\r\n\r\nfunction isFree(g: Engine, sx: number, sy: number, w: number, h: number) {\r\n  for (let y = 0; y < h; y++)\r\n    for (let x = 0; x < w; x++) {\r\n      const { wall, solid, other } = g.getContents({ x: sx + x, y: sy + y });\r\n      if (wall || solid || other.length) return false;\r\n    }\r\n\r\n  return true;\r\n}\r\n\r\nexport function findSpawnPosition(\r\n  g: Engine,\r\n  width: number,\r\n  height: number\r\n): Position {\r\n  for (let y = 0; y < 5; y++) {\r\n    const xList = shuffle(enumerate(g.term.width - width));\r\n\r\n    for (const x of xList) {\r\n      if (isFree(g, x, y, width, height)) return { x, y };\r\n    }\r\n  }\r\n\r\n  throw new Error(`Could not find spawn position for ${width}x${height}!`);\r\n}\r\n", "import { Pilot } from \"@app/components\";\r\n\r\nexport const Basic: Pilot = {\r\n  name: \"Basic\",\r\n  difficulty: 0,\r\n  body: 1,\r\n  mind: 1,\r\n  spirit: 1,\r\n  talent: 1,\r\n  class: [],\r\n};\r\n\r\nconst EnemyPilots = [Basic];\r\nexport default EnemyPilots;\r\n", "import { Pilot } from \"@app/components\";\r\n\r\nexport const Bodini: Pilot = {\r\n  name: \"Bodini\",\r\n  difficulty: 4,\r\n  body: 3,\r\n  mind: 2,\r\n  spirit: 3,\r\n  talent: 2,\r\n  class: [],\r\n};\r\n\r\nconst StarPilots = [Bodini];\r\nexport default StarPilots;\r\n", "export default function enumerate(max: number, min = 0) {\r\n  const items: number[] = [];\r\n  for (let i = min; i < max; i++) items.push(i);\r\n  return items;\r\n}\r\n", "export default function shuffle<T>(array: T[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n\r\n  return array;\r\n}\r\n", "import { findSpawnPosition, generateEnemy } from \"@app/logic/enemy\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { getEntityLayout } from \"@app/logic/entity\";\r\n\r\nexport default function addSpawns(g: Engine) {\r\n  let time = 0;\r\n\r\n  g.on(\"tick\", () => {\r\n    time++;\r\n\r\n    if (!(time % 10)) {\r\n      const maxDifficulty = Math.ceil(time / 20);\r\n      const { entity } = generateEnemy(g, maxDifficulty);\r\n\r\n      const { width, height } = getEntityLayout(g, entity);\r\n      const position = findSpawnPosition(g, width, height);\r\n      entity.move(position.x, position.y);\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { isSameCell } from \"@app/tools/position\";\r\n\r\nexport default function addTrails(g: Engine) {\r\n  g.on(\"move\", ({ e, old, pos }) => {\r\n    if (e.trail && !isSameCell(old, pos))\r\n      g.spawn(e.trail.effectPrefab).setPosition(old);\r\n  });\r\n}\r\n", "import { advanceTimer, canFire, fire } from \"@app/logic/turret\";\r\nimport { getEntityMidpoint, getEntityTreeIDs } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\n\r\nexport default function addTurrets(g: Engine) {\r\n  const query = new Query(g.entities, [\"position\", \"turret\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ position, turret }, e) => {\r\n      const root = g.getRoot(e);\r\n      const enemy = root.ai?.attacking;\r\n      advanceTimer(turret);\r\n\r\n      if (!enemy?.alive) return;\r\n\r\n      if (canFire(turret) && enemy) {\r\n        const target = getEntityMidpoint(g, enemy);\r\n        const bullet = fire(\r\n          g,\r\n          turret,\r\n          position,\r\n          target,\r\n          root,\r\n          getEntityTreeIDs(g, e)\r\n        );\r\n\r\n        if (bullet.homing) bullet.homing.target = enemy;\r\n\r\n        if (bullet.ai) bullet.ai.attacking = enemy;\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport addAI from \"./AI\";\r\nimport addDisplay from \"./Display\";\r\nimport addExplosives from \"./Explosives\";\r\nimport addFields from \"./Fields\";\r\nimport addHUD from \"./HUD\";\r\nimport addHoming from \"./Homing\";\r\nimport addLifetime from \"./Lifetime\";\r\nimport addMotion from \"./Motion\";\r\nimport addPlayer from \"./Player\";\r\nimport addSpawns from \"./Spawns\";\r\nimport addTrails from \"./Trails\";\r\nimport addTurrets from \"./Turrets\";\r\n\r\nexport function addSystems(g: Engine) {\r\n  addLifetime(g);\r\n  addHoming(g);\r\n  addTurrets(g);\r\n  addFields(g);\r\n  addMotion(g);\r\n  addAI(g);\r\n  addSpawns(g);\r\n\r\n  addDisplay(g);\r\n  addHUD(g);\r\n\r\n  addTrails(g);\r\n\r\n  addExplosives(g);\r\n\r\n  addPlayer(g);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { Position } from \"@app/components\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\nimport distance from \"@app/tools/distance\";\r\nimport { getCirclePoints } from \"@app/logic/geometry\";\r\n\r\nexport function fireAirFist(g: Engine, centre: Position, power: number) {\r\n  for (const e of g.entities.get()) {\r\n    const { motion, projectile, position } = e;\r\n    if (\r\n      motion &&\r\n      projectile &&\r\n      position &&\r\n      distance(centre, position) <= power\r\n    ) {\r\n      const angle = angleBetween(centre, position);\r\n      motion.angle = angle;\r\n\r\n      e.setIgnoreSolid();\r\n    }\r\n  }\r\n\r\n  for (const point of getCirclePoints(centre.x, centre.y, power))\r\n    g.spawn(\"AirFistRange\").setPosition(point);\r\n}\r\n", "export default class HashMap<K, V> {\r\n  items: Map<string, V>;\r\n\r\n  constructor(private keyFn: (key: K) => string) {\r\n    this.items = new Map();\r\n  }\r\n\r\n  has(key: K) {\r\n    return this.items.has(this.keyFn(key));\r\n  }\r\n\r\n  get(key: K) {\r\n    return this.items.get(this.keyFn(key));\r\n  }\r\n\r\n  getOrDefault(key: K, fallback: V) {\r\n    const value = this.items.get(this.keyFn(key));\r\n    return typeof value !== \"undefined\" ? value : fallback;\r\n  }\r\n\r\n  getOrDie(key: K) {\r\n    const s = this.keyFn(key);\r\n    const item = this.items.get(s);\r\n    if (typeof item === \"undefined\") throw new Error(`Invalid key: ${s}`);\r\n    return item;\r\n  }\r\n\r\n  set(key: K, value: V) {\r\n    this.items.set(this.keyFn(key), value);\r\n  }\r\n}\r\n", "import HashMap from \"@app/HashMap\";\r\nimport { Position } from \"@app/components\";\r\nimport neighbours from \"@app/logic/neighbours\";\r\n\r\nexport default function bfs(\r\n  start: Position[],\r\n  isPassable: (pos: Position) => boolean,\r\n  maximum = Infinity\r\n) {\r\n  const frontier: Position[] = [];\r\n  const costs = new HashMap<Position, number>((p) => `${p.x},${p.y}`);\r\n\r\n  for (const location of start) {\r\n    frontier.push(location);\r\n    costs.set(location, 0);\r\n  }\r\n\r\n  while (frontier.length) {\r\n    const current = frontier.shift()!;\r\n\r\n    const neighbourCost = costs.getOrDie(current) + 1;\r\n    if (neighbourCost > maximum) continue;\r\n\r\n    for (const neighbour of neighbours(current)) {\r\n      if (!costs.has(neighbour) && isPassable(neighbour)) {\r\n        costs.set(neighbour, neighbourCost);\r\n        frontier.push(neighbour);\r\n      }\r\n    }\r\n  }\r\n\r\n  return costs;\r\n}\r\n", "export default function isDefined<T>(obj?: T): obj is T {\r\n  return typeof obj !== \"undefined\";\r\n}\r\n"],
  "mappings": "y3BAAA,IAAAA,EAAAC,GAAA,CAAAC,GAAAC,KAAA,CAAAA,GAAO,QAAU,WAAW,OCA5B,IAAAC,GAAuC,OCAvC,IAAAC,GAAmD,OCAnD,SAASC,EAAOC,EAAKC,EAAO,IAAI,IAAO,CAErC,GAAI,CAACD,GAAO,OAAOA,GAAQ,SAAU,OAAOA,EAG5C,GAAIC,EAAK,IAAID,CAAG,EAAG,OAAOC,EAAK,IAAID,CAAG,EAQtC,IAAIE,EACJ,GAAIF,EAAI,UAAY,cAAeA,EAEjCE,EAAOF,EAAI,UAAU,EAAI,EACzBC,EAAK,IAAID,EAAKE,CAAI,UACTF,aAAe,KAExBE,EAAO,IAAI,KAAKF,EAAI,QAAQ,CAAC,EAC7BC,EAAK,IAAID,EAAKE,CAAI,UACTF,aAAe,OAExBE,EAAO,IAAI,OAAOF,CAAG,EACrBC,EAAK,IAAID,EAAKE,CAAI,UACT,MAAM,QAAQF,CAAG,EAAG,CAE7BE,EAAO,IAAI,MAAMF,EAAI,MAAM,EAC3BC,EAAK,IAAID,EAAKE,CAAI,EAClB,QAASC,EAAI,EAAGA,EAAIH,EAAI,OAAQG,IAAKD,EAAKC,CAAC,EAAIJ,EAAMC,EAAIG,CAAC,EAAGF,CAAI,UACxDD,aAAe,IAAK,CAE7BE,EAAO,IAAI,IACXD,EAAK,IAAID,EAAKE,CAAI,EAClB,OAAW,CAACE,EAAGC,CAAC,IAAKL,EAAI,QAAQ,EAAGE,EAAK,IAAIE,EAAGL,EAAMM,EAAGJ,CAAI,CAAC,UACrDD,aAAe,IAAK,CAE7BE,EAAO,IAAI,IACXD,EAAK,IAAID,EAAKE,CAAI,EAClB,QAAWG,KAAKL,EAAKE,EAAK,IAAIH,EAAMM,EAAGJ,CAAI,CAAC,UACnCD,aAAe,OAAQ,CAEhCE,EAAO,CAAC,EACRD,EAAK,IAAID,EAAKE,CAAI,EAClB,OAAW,CAACE,EAAGC,CAAC,IAAK,OAAO,QAAQL,CAAG,EAAGE,EAAKE,CAAC,EAAIL,EAAMM,EAAGJ,CAAI,MAIjE,OAAM,MAAM,mBAAmBD,GAAK,EAGtC,OAAOE,CACT,CAEe,SAARI,GAAkBN,EAAK,CAC5B,OAAOD,EAAMC,EAAK,IAAI,GAAK,CAC7B,CCvDO,IAAMO,GAAQC,GAERC,GAAO,OAAO,KAIdC,GACXC,GACiB,CACjB,IAAMC,EAA2B,CAAC,EAClC,OAAW,CAACC,EAAGC,CAAC,IAAKH,EAAOC,EAAEC,CAAC,EAAIC,EACnC,OAAOF,CACT,ECWA,IAAqBG,EAArB,KAA6D,CAyB3D,YAAmBC,EAAkBC,EAAe,CAAjC,OAAAD,EAAkB,UAAAC,EACnC,KAAK,MAAQ,GACb,KAAK,GAAK,EAAED,EAAE,aACd,KAAK,MAAQ,GACb,KAAK,KAAO,IAAI,GAClB,CAEA,YAAYC,EAAkBC,EAAsB,CAKlD,GAJA,KAAK,OAASD,EAEVC,EAAO,YAAY,OAAO,OAAO,KAAMC,GAAMD,EAAO,UAAU,CAAC,EAE/DA,EAAO,SACT,OAAW,CAAE,KAAAD,EAAM,EAAAG,EAAG,EAAAC,EAAG,QAAAC,EAAS,KAAAC,CAAK,IAAKL,EAAO,SAAU,CAC3D,IAAMM,EAAQ,KAAK,EAAE,MAAMP,CAAI,EAAE,cAAc,CAAE,OAAQ,KAAM,EAAAG,EAAG,EAAAC,CAAE,CAAC,EACrE,GAAIC,EACF,QAAWG,KAAOC,GAAKJ,CAAO,EAC5B,OAAO,OAAQE,EAAcC,CAAG,EAAGN,GAAMG,EAAQG,CAAG,CAAC,CAAC,EAC1D,GAAIF,EAAM,QAAWI,KAAOJ,EAAMC,EAAM,KAAK,IAAIG,CAAG,EAGxD,OAAO,IACT,CAEA,IAAK,OAAO,WAAW,GAAI,CACzB,OAAO,KAAK,IACd,CAEA,KAAKC,EAAmB,CACtB,YAAK,MAAQ,GACb,KAAK,UAAWC,GAAM,KAAK,EAAE,KAAKA,EAAGD,CAAE,CAAC,EACjC,IACT,CAEA,UAAUE,EAA+C,CApF3D,IAAAC,EAqFI,QAAWF,KAAK,KAAK,EAAE,SAAS,IAAI,IAC9BE,EAAAF,EAAE,aAAF,YAAAE,EAAc,UAAW,MAAMD,EAASD,EAAGA,EAAE,UAAU,CAE/D,CAEA,SAASA,EAAkB,CACzB,YAAK,MAAQA,EACN,IACT,CAEA,MAAMG,EAAc,CAClB,YAAK,GAAKA,EACH,IACT,CAEA,cAAcA,EAAsB,CAClC,YAAK,EAAE,QAAQ,EACf,KAAK,WAAaA,EACX,IACT,CAEA,cAAcA,EAAsB,CAClC,YAAK,WAAaA,EACX,IACT,CAEA,YAAYA,EAAoB,CAC9B,YAAK,SAAWA,EACT,IACT,CAEA,SAASA,EAAiB,CACxB,YAAK,MAAQA,EACN,IACT,CAEA,UAAUA,EAAkB,CAC1B,YAAK,OAASA,EACP,IACT,CAEA,eAAeA,EAAuB,CACpC,YAAK,YAAcA,EACZ,IACT,CAEA,YAAYA,EAAoB,CAC9B,YAAK,SAAWA,EACT,IACT,CAEA,UAAUA,EAAkB,CAC1B,YAAK,OAASA,EACP,IACT,CAEA,SAASA,EAAiB,CACxB,YAAK,MAAQA,EACN,IACT,CAEA,YAAYA,EAAoB,CAC9B,YAAK,EAAE,QAAQ,EACf,KAAK,SAAWA,EACT,IACT,CAEA,QAAQA,EAAgB,CACtB,YAAK,KAAOA,EACL,IACT,CAEA,SAASA,EAAiB,CACxB,YAAK,MAAQA,EACN,IACT,CAEA,UAAUA,EAAkB,CAC1B,YAAK,OAASA,EACP,IACT,CAEA,UAAUA,EAAkB,CAC1B,YAAK,OAASA,EACP,IACT,CAEA,cAAcA,EAAsB,CAClC,YAAK,WAAaA,EACX,IACT,CAEA,SAASL,EAAoB,CAC3B,YAAK,MAAQA,EACN,IACT,CAEA,KAAKP,EAAWC,EAAiB,CAC/B,YAAK,EAAE,QAAQ,EACf,KAAK,SAAW,CAAE,EAAAD,EAAG,EAAAC,CAAE,EACvB,KAAK,UAAU,CAACQ,EAAGI,IAAOJ,EAAE,KAAKT,EAAIa,EAAG,EAAGZ,EAAIY,EAAG,CAAC,CAAC,EAC7C,IACT,CACF,EAEO,SAASC,GAAgBC,EAAWC,EAAW,CA9LtD,IAAAL,EAAAM,EAAAC,EAAAC,EA+LE,IAAMC,GAASH,GAAAN,EAAAI,EAAE,aAAF,YAAAJ,EAAc,QAAd,KAAAM,EAAuB,EAChCI,GAASF,GAAAD,EAAAF,EAAE,aAAF,YAAAE,EAAc,QAAd,KAAAC,EAAuB,EACtC,OAAIC,IAAWC,EAAeD,EAASC,EAEhCN,EAAE,GAAKC,EAAE,EAClB,CCjMO,IAAMM,GAAa,CACxB,SACA,OACA,OACA,OACA,SACA,aACA,aACA,QACA,MACF,ECbA,IAAAC,GAAA,GAAAC,EAAAD,GAAA,gBAAAE,GAAA,mBAAAC,KAAA,IAAAC,GAAuB,OCAvB,IAAKC,QACHA,IAAA,mBACAA,IAAA,eACAA,IAAA,aACAA,IAAA,mBACAA,IAAA,mBALGA,QAAA,IAOEC,EAAQD,GDHR,IAAME,GAAqB,CAChC,WAAY,CACV,GAAI,CAAE,cAAe,EAAG,MAAO,CAAE,EACjC,KAAM,CAAE,KAAM,aAAc,GAAI,GAAI,MAAO,EAAG,CAChD,EACA,SAAU,CACR,CAAE,KAAM,iBAAkB,EAAG,EAAG,EAAG,CAAE,EACrC,CAAE,KAAM,iBAAkB,EAAG,EAAG,EAAG,CAAE,EACrC,CAAE,KAAM,iBAAkB,EAAG,EAAG,EAAG,CAAE,EACrC,CAAE,KAAM,iBAAkB,EAAG,EAAG,EAAG,CAAE,EACrC,CAAE,KAAM,iBAAkB,EAAG,EAAG,EAAG,CAAE,EACrC,CAAE,KAAM,aAAc,EAAG,EAAG,EAAG,CAAE,EACjC,CAAE,KAAM,wBAAyB,EAAG,EAAG,EAAG,CAAE,EAC5C,CAAE,KAAM,kBAAmB,EAAG,EAAG,EAAG,CAAE,CACxC,CACF,EAEaC,GAAyB,CACpC,WAAY,CACV,MAAO,GACP,WAAY,CACV,MAAO,IACP,MAAOC,EAAM,KACb,GAAI,UAAO,MACX,GAAI,UAAO,KACb,CACF,CACF,EE/BA,IAAAC,GAAA,GAAAC,EAAAD,GAAA,YAAAE,GAAA,kBAAAC,GAAA,iBAAAC,KAAA,IAAAC,GAAuB,OCAvB,IAAMC,GAAS,CACb,KAAM,IACN,IAAK,OACL,WAAY;AAAA,EACZ,OAAQ,KAER,QAAS,IACT,QAAS,IACT,eAAgB,IAChB,WAAY,IACZ,UAAW,OACX,UAAW,IAEX,SAAU,OAEV,eAAgB,OAChB,KAAM,OACN,IAAK,OAEL,QAAS,OACT,IAAK,OACL,oBAAqB,OAErB,kBAAmB,OAEnB,4BAA6B,OAC7B,8BAA+B,OAC/B,oBAAqB,OAErB,4BAA6B,OAC7B,8BAA+B,OAC/B,kCAAmC,OAEnC,GAAI,OACJ,MAAO,OACP,MAAO,OACP,SAAU,OAEV,iBAAkB,MACpB,EACOC,EAAQD,GDnCR,IAAME,GAAiB,CAC5B,WAAY,CACV,WAAY,CAAE,OAAQ,CAAE,EACxB,WAAY,CAAE,MAAO,IAAK,MAAOC,EAAM,OAAQ,GAAI,UAAO,MAAO,CACnE,CACF,EAEaC,GAAwB,CACnC,WAAY,CACV,WAAY,CAAE,OAAQ,CAAE,EACxB,OAAQ,CAAE,SAAU,IAAM,SAAU,EAAG,EACvC,MAAO,CAAE,aAAc,WAAY,EACnC,SAAU,CAAE,KAAM,EAAG,QAAS,CAAE,EAChC,WAAY,CAAE,MAAO,IAAK,MAAOD,EAAM,OAAQ,GAAI,UAAO,QAAS,CACrE,CACF,EAEaE,GAAuB,CAClC,WAAY,CACV,WAAY,CAAE,OAAQ,CAAE,EACxB,WAAY,CACV,MAAOC,EAAO,oBACd,MAAOH,EAAM,OACb,GAAI,UAAO,MACb,CACF,CACF,EE/BA,IAAAI,GAAA,GAAAC,EAAAD,GAAA,kBAAAE,GAAA,cAAAC,KAAA,IAAAC,EAAmC,OAK5B,IAAMC,GAAuB,CAClC,WAAY,CACV,SAAU,CAAE,SAAU,CAAE,EACxB,WAAY,CACV,MAAO,IACP,MAAOC,EAAM,OACb,MAAI,WAAQ,EAAG,IAAK,IAAK,GAAG,EAC5B,UAAW,YAAU,GACvB,CACF,CACF,EAEaC,GAAoB,CAC/B,WAAY,CACV,SAAU,CAAE,SAAU,CAAE,EACxB,WAAY,CACV,MAAO,IACP,MAAOD,EAAM,OACb,MAAI,WAAQ,IAAK,IAAK,IAAK,EAAE,EAC7B,UAAW,YAAU,GACvB,CACF,CACF,EC3BA,IAAAE,GAAA,GAAAC,EAAAD,GAAA,aAAAE,GAAA,gBAAAC,GAAA,oBAAAC,KAAA,IAAAC,GAAuB,OC0DhB,IAAMC,EAAa,CACxBC,EACAC,EACA,CACE,aAAAC,EAAe,SACf,eAAAC,EAAiB,EACjB,WAAAC,EAAa,EACb,iBAAAC,EAAmB,EACnB,kBAAAC,EAAoB,CACtB,KACY,CACZ,KAAAN,EACA,aAAAE,EACA,YAAAD,EACA,eAAAE,EACA,WAAAC,EACA,iBAAAC,EACA,kBAAAC,EACA,MAAO,EACP,MAAOF,CACT,GDzEO,IAAMG,GAA0B,CACrC,WAAY,CACV,WAAY,CAAE,MAAO,IAAK,MAAOC,EAAM,IAAK,GAAI,UAAO,SAAU,EACjE,OAAQC,EAAW,cAAe,eAAgB,CAChD,aAAc,UACd,eAAgB,EAChB,WAAY,EACZ,kBAAmB,EACrB,CAAC,CACH,CACF,EAEaC,GAAkB,CAC7B,WAAY,CACV,GAAI,CAAE,cAAe,EAAG,MAAO,CAAE,EACjC,KAAM,CAAE,KAAM,UAAW,GAAI,EAAG,MAAO,CAAE,CAC3C,EACA,SAAU,CACR,CACE,KAAM,cACN,EAAG,EACH,EAAG,EACH,QAAS,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CACxC,EACA,CAAE,KAAM,cAAe,EAAG,EAAG,EAAG,CAAE,EAClC,CACE,KAAM,cACN,EAAG,EACH,EAAG,EACH,QAAS,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CACxC,EACA,CAAE,KAAM,aAAc,EAAG,EAAG,EAAG,CAAE,CACnC,CACF,EAEaC,GAAsB,CACjC,WAAY,CACV,MAAO,GACP,WAAY,CACV,MAAO,IACP,MAAOH,EAAM,KACb,GAAI,UAAO,OACX,GAAI,UAAO,SACb,CACF,CACF,EElDA,IAAAI,GAAA,GAAAC,EAAAD,GAAA,2BAAAE,GAAA,eAAAC,GAAA,eAAAC,GAAA,cAAAC,KCCA,IAAMC,GAAS,CACb,MAAO,EACP,KAAM,KAAK,GAAK,EAChB,KAAM,KAAK,GACX,GAAK,KAAK,GAAK,EAAK,CACtB,EACOC,GAAQD,GDNf,IAAAE,EAAuB,OAKhB,IAAMC,GAAqB,CAChC,WAAY,CACV,WAAY,CAAE,MAAO,IAAK,MAAOC,EAAM,IAAK,GAAI,SAAO,KAAM,EAC7D,OAAQC,EAAW,cAAeC,GAAO,KAAM,CAC7C,aAAc,SACd,eAAgB,EAChB,WAAY,EACZ,iBAAkB,EAClB,kBAAmB,EACrB,CAAC,CACH,CACF,EAEaC,GAAgC,CAC3C,WAAY,CACV,WAAY,CAAE,MAAO,IAAK,MAAOH,EAAM,IAAK,GAAI,SAAO,MAAO,EAC9D,OAAQC,EAAW,iBAAkB,eAAgB,CACnD,aAAc,gBACd,eAAgB,EAChB,WAAY,EACZ,kBAAmB,CACrB,CAAC,CACH,CACF,EAEaG,GAAqB,CAChC,WAAY,CACV,WAAY,CAAE,MAAO,IAAK,MAAOJ,EAAM,IAAK,GAAI,SAAO,UAAW,EAClE,OAAQC,EAAW,cAAeC,GAAO,KAAM,CAC7C,aAAc,SACd,eAAgB,EAChB,WAAY,EACZ,kBAAmB,CACrB,CAAC,CACH,CACF,EAEaG,GAAoB,CAC/B,WAAY,CACV,WAAY,CAAE,MAAO,IAAK,MAAOL,EAAM,IAAK,GAAI,SAAO,KAAM,EAC7D,OAAQC,EAAW,UAAWC,GAAO,GAAI,CACvC,aAAc,eACd,eAAgB,EAChB,WAAY,EACZ,iBAAkB,EAClB,kBAAmB,CACrB,CAAC,CACH,CACF,EEtDA,IAAAI,GAAA,GAAAC,EAAAD,GAAA,gBAAAE,GAAA,eAAAC,KAAA,IAAAC,GAAuB,OCGhB,IAAMC,EAAQ,CACnBC,EACAC,EACAC,EACAC,EACAC,KACiB,CAAE,KAAAJ,EAAM,EAAAC,EAAG,EAAAC,EAAG,QAAAC,EAAS,KAAAC,CAAK,GDHxC,IAAMC,GAAqB,CAChC,WAAY,CACV,MAAO,GACP,WAAY,CAAE,MAAO,IAAK,MAAOC,EAAM,OAAQ,GAAI,UAAO,SAAU,CACtE,CACF,EAEaC,GAAqB,CAChC,WAAY,CACV,OAAQ,CAAE,aAAc,CAAC,SAAS,CAAE,EACpC,KAAM,CAAE,KAAM,QAAS,GAAI,GAAI,MAAO,EAAG,CAC3C,EACA,SAAU,CACRC,EAAM,aAAc,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,SAAU,CAAE,CAAC,EACrED,EAAM,aAAc,EAAG,EAAG,CACxB,WAAY,CAAE,MAAOC,EAAO,KAAM,GAAI,UAAO,UAAW,CAC1D,CAAC,EACDD,EAAM,aAAc,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,UAAW,CAAE,CAAC,EACtED,EAAM,YAAa,EAAG,EAAG,OAAW,CAAC,SAAS,CAAC,CACjD,CACF,EE1BA,IAAAE,GAAA,GAAAC,EAAAD,GAAA,iBAAAE,GAAA,YAAAC,GAAA,WAAAC,GAAA,WAAAC,GAAA,WAAAC,GAAA,eAAAC,GAAA,SAAAC,GAAA,QAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,UAAAC,KAAA,IAAAC,GAAuB,OAMhB,IAAMC,GAAe,CAC1B,WAAY,CACV,MAAO,GACP,WAAY,CAAE,MAAO,IAAK,MAAOC,EAAM,KAAM,GAAI,UAAO,SAAU,CACpE,CACF,EAEaC,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACC,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,OAAQ,CAAE,CAAC,CAAC,CAC3E,EAEaC,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACF,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,GAAI,CAAE,CAAC,CAAC,CACvE,EAEaE,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACH,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CAAC,CAAC,CAChE,EAEaI,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACJ,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,KAAM,CAAE,CAAC,CAAC,CACzE,EAEaI,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACL,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,SAAU,CAAE,CAAC,CAAC,CAC7E,EAEaK,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACN,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,EAAG,CAAE,CAAC,CAAC,CACtE,EAEaM,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACP,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CAAC,CAAC,CAChE,EAEaQ,GAAgB,CAC3B,WAAY,CAAE,KAAM,CAAE,KAAM,IAAK,GAAI,EAAG,MAAO,CAAE,CAAE,EACnD,SAAU,CAACR,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,MAAO,CAAE,CAAC,CAAC,CAC1E,EAEaQ,GAAiB,CAC5B,WAAY,CAAE,KAAM,CAAE,KAAM,UAAW,GAAI,EAAG,MAAO,CAAE,CAAE,EACzD,SAAU,CAACT,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,KAAM,CAAE,CAAC,CAAC,CACzE,EAEaS,GAAiB,CAC5B,WAAY,CAAE,KAAM,CAAE,KAAM,UAAW,GAAI,EAAG,MAAO,CAAE,CAAE,EACzD,SAAU,CAACV,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,QAAS,CAAE,CAAC,CAAC,CAC5E,EAEaU,GAAiB,CAC5B,WAAY,CAAE,KAAM,CAAE,KAAM,UAAW,GAAI,EAAG,MAAO,CAAE,CAAE,EACzD,SAAU,CAACX,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,OAAQ,CAAE,CAAC,CAAC,CAC3E,EAEaW,GAAsB,CACjC,WAAY,CAAE,KAAM,CAAE,KAAM,eAAgB,GAAI,EAAG,MAAO,CAAE,CAAE,EAC9D,SAAU,CACRZ,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,GAAI,CAAE,CAAC,EACzDD,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,gBAAiB,CAAE,CAAC,EACtED,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,OAAQ,CAAE,CAAC,CAC/D,CACF,EAEaY,GAAc,CACzB,WAAY,CAAE,KAAM,CAAE,KAAM,MAAO,GAAI,EAAG,MAAO,CAAE,CAAE,EACrD,SAAU,CACRb,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,IAAK,CAAE,CAAC,EAC1DD,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,cAAe,CAAE,CAAC,EACpED,EAAM,OAAQ,EAAG,EAAG,CAClB,WAAY,CAAE,MAAOC,EAAO,6BAA8B,CAC5D,CAAC,CACH,CACF,EAEaa,GAAqB,CAChC,WAAY,CAAE,KAAM,CAAE,KAAM,gBAAiB,GAAI,EAAG,MAAO,CAAE,CAAE,EAC/D,SAAU,CACRd,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,QAAS,CAAE,CAAC,EAC9DD,EAAM,OAAQ,EAAG,EAAG,CAClB,WAAY,CAAE,MAAOC,EAAO,iCAAkC,CAChE,CAAC,EACDD,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,QAAS,CAAE,CAAC,EAC9DD,EAAM,OAAQ,EAAG,EAAG,CAClB,WAAY,CAAE,MAAOC,EAAO,2BAA4B,CAC1D,CAAC,CACH,CACF,EAEac,GAAkB,CAC7B,WAAY,CAAE,KAAM,CAAE,KAAM,UAAW,GAAI,EAAG,MAAO,CAAE,CAAE,EACzD,SAAU,CACRf,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,cAAe,CAAE,CAAC,EACpED,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CAAC,EAClDA,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAOC,EAAO,UAAW,CAAE,CAAC,EAChED,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CAAC,EAClDA,EAAM,OAAQ,EAAG,EAAG,CAAE,WAAY,CAAE,MAAO,GAAI,CAAE,CAAC,CACpD,CACF,ECpGA,IAAMgB,GAAaC,cAAA,GACdC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IAKU,SAARC,GAA6BC,EAAWC,EAAkB,CAC/D,OAAOD,EAAE,IAAI,IAAIE,EAAOF,EAAGC,CAAI,EAAE,YAAYA,EAAMX,GAAWW,CAAI,CAAC,CAAC,CACtE,CCzBe,SAARE,EAAqBC,EAAY,CACtC,OAAO,OAAOA,GAAM,YAAc,IAAM,KAAK,MAAMA,CAAC,CACtD,CCCO,SAASC,EAAYC,EAAyB,CACnD,MAAO,CAAE,EAAGC,EAAID,EAAI,CAAC,EAAG,EAAGC,EAAID,EAAI,CAAC,CAAE,CACxC,CAEO,SAASE,EAAWC,EAAaC,EAAsB,CAC5D,IAAMC,EAAKN,EAAYI,CAAC,EAClBG,EAAKP,EAAYK,CAAC,EACxB,OAAOC,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAMC,EAAG,CACtC,CAEO,SAASC,EAAaJ,EAAaC,EAAuB,CAC/D,MAAO,CAAE,EAAGD,EAAE,EAAIC,EAAE,EAAG,EAAGD,EAAE,EAAIC,EAAE,CAAE,CACtC,CCbA,IAAqBI,EAArB,KAAgC,CAG9B,YACUC,EACAC,EAAqB,CAAC,EAC9B,CAFQ,eAAAD,EACA,cAAAC,EAER,KAAK,MAAQ,EACf,CAEA,OAAQ,CACN,KAAK,SAAW,CAAC,EACjB,KAAK,MAAQ,EACf,CAEA,IAAIC,EAAW,CACb,KAAK,SAAS,KAAKA,CAAC,EACpB,KAAK,MAAQ,EACf,CAEA,WAAY,CACV,KAAK,SAAW,KAAK,SAAS,OAAQC,GAAMA,EAAE,KAAK,CACrD,CAEA,MAAO,CACL,KAAK,SAAS,KAAK,KAAK,SAAS,EACjC,KAAK,MAAQ,EACf,CAEA,KAAM,CACJ,OAAI,KAAK,OAAO,KAAK,KAAK,EACnB,KAAK,SAAS,MAAM,CAC7B,CACF,ECnCA,IAAAC,EAA4B,OCA5B,IAAAC,EAA4B,OCWrB,SAASC,GACdC,EACAC,EACU,CACV,GAAI,CAACA,GAAW,CAACD,EAAO,OAAQ,MAAM,IAAI,MAAM,wBAAwB,EAExE,IAAME,EAAOC,GACXH,EAAO,OAAO,CAACI,EAAO,CAAE,OAAAC,CAAO,IAAMD,EAAQC,EAAOF,CAAG,EAAG,CAAC,EAC3DH,EAAO,OAET,MAAO,CAAE,EAAGC,EAAQ,EAAIC,EAAI,GAAG,EAAG,EAAGD,EAAQ,EAAIC,EAAI,GAAG,CAAE,CAC5D,CAEO,SAASI,GACdC,EACAP,EACAC,EACAO,EAAwB,CAAC,EACO,CAChC,IAAMC,EAA2C,CAAC,EAElD,OAAW,CAAE,OAAAJ,CAAO,IAAKL,EAAQ,CAC/B,IAAMU,EAAMC,EAAaV,EAASI,CAAM,EAClC,CAAE,KAAAO,EAAM,MAAAC,CAAM,EAAIN,EAAE,YAAYG,EAAKF,CAAW,EAClDI,EAAMH,EAAS,KAAK,CAAE,SAAUC,EAAK,OAAAL,EAAQ,OAAQ,MAAO,CAAC,EACxDQ,GAAOJ,EAAS,KAAK,CAAE,SAAUC,EAAK,OAAAL,EAAQ,OAAQQ,CAAM,CAAC,EAGxE,OAAOJ,CACT,CAEO,SAASK,EAAcP,EAAWQ,EAAW,CAClD,IAAMC,EAAOT,EAAE,QAAQQ,CAAC,EACxB,OAAOR,EAAE,SAAS,IAAI,EAAE,OAAQU,GAAMV,EAAE,QAAQU,CAAC,IAAMD,CAAI,CAC7D,CAEO,SAASE,EAAiBX,EAAWQ,EAAW,CACrD,OAAOD,EAAcP,EAAGQ,CAAC,EAAE,IAAKE,GAAMA,EAAE,EAAE,CAC5C,CAEO,SAASE,EAAgBZ,EAAWQ,EAAW,CAnDtD,IAAAK,EAoDE,IAAMnB,GAAUmB,EAAAb,EAAE,QAAQQ,CAAC,EAAE,WAAb,KAAAK,EAAyB,CAAE,EAAG,EAAG,EAAG,CAAE,EAEhDC,EAAQP,EAAcP,EAAGQ,CAAC,EAC1Bf,EAAwB,CAAC,EAC3BsB,EAAQ,EACRC,EAAS,EAEb,QAAWC,KAAQH,EAAO,CACxB,GAAM,CAAE,WAAAI,EAAY,MAAAZ,CAAM,EAAIW,EAE9B,GAAIC,GAAcZ,EAAO,CACvB,GAAM,CAAE,EAAAI,EAAG,EAAAS,CAAE,EAAID,EAEjBzB,EAAO,KAAK,CACV,SAAUW,EAAaV,EAASwB,CAAU,EAC1C,OAAQ,CAAE,EAAAR,EAAG,EAAAS,CAAE,EACf,OAAQF,CACV,CAAC,EAEDF,EAAQ,KAAK,IAAIL,EAAI,EAAGK,CAAK,EAC7BC,EAAS,KAAK,IAAIG,EAAI,EAAGH,CAAM,GAInC,MAAO,CAAE,OAAAvB,EAAQ,QAAAC,EAAS,MAAAqB,EAAO,OAAAC,CAAO,CAC1C,CAEO,SAASI,GAAkBpB,EAAWQ,EAAWa,EAAmB,CACzE,IAAMpB,EAAcU,EAAiBX,EAAGQ,CAAC,EACnC,CAAE,OAAAf,EAAQ,QAAAC,CAAQ,EAAIkB,EAAgBZ,EAAGQ,CAAC,EAChD,MAAI,CAACa,GAAU,CAAC3B,EAAgB,CAAC,EAE1BK,GAAkBC,EAAGP,EAAQ4B,GAAU3B,EAASO,CAAW,CACpE,CAEO,SAASqB,EAAkBtB,EAAWQ,EAAqB,CAChE,GAAM,CAAE,OAAAf,EAAQ,QAAAC,CAAQ,EAAIkB,EAAgBZ,EAAGQ,CAAC,EAEhD,GAAI,CAACd,GAAW,CAACD,EAAO,OACtB,MAAM,IAAI,MAAM,oCAAoCe,EAAE,IAAI,EAE5D,OAAOhB,GAAkBC,EAAQC,CAAO,CAC1C,CC9EA,IAAqB6B,EAArB,KAAwD,CACtD,YAAoBC,EAA0BC,EAAW,CAArC,UAAAD,EAA0B,YAAAC,CAAY,CAE1D,QAAQC,EAAW,CACjB,GAAI,CAACA,EAAE,MAAO,MAAO,GAErB,QAAWC,KAAO,KAAK,OACrB,GAAI,CAACD,EAAEC,CAAG,EAAG,MAAO,GAGtB,MAAO,EACT,CAEA,QAAQC,EAAsB,CAC5B,QAAWF,KAAK,KAAK,KAAK,IAAI,EACxB,KAAK,QAAQA,CAAC,GAAGE,EAAGF,EAAuBA,CAAC,CAEpD,CACF,EC/BO,IAAMG,GAA+B,CAC1C,CAAE,EAAG,GAAI,EAAG,EAAG,EACf,CAAE,EAAG,GAAI,EAAG,CAAE,EACd,CAAE,EAAG,GAAI,EAAG,CAAE,EACd,CAAE,EAAG,EAAG,EAAG,CAAE,EACb,CAAE,EAAG,EAAG,EAAG,CAAE,EACb,CAAE,EAAG,EAAG,EAAG,CAAE,EACb,CAAE,EAAG,EAAG,EAAG,EAAG,EACd,CAAE,EAAG,EAAG,EAAG,EAAG,CAChB,EAEe,SAARC,GAA4BC,EAA2B,CAC5D,OAAOF,GAAiB,IAAKG,GAAMC,EAAaF,EAAKC,CAAC,CAAC,CACzD,CChBe,SAARE,EAA0BC,EAAwB,CACvD,GAAI,CAACA,EAAM,OAAQ,MAAM,IAAI,MAAM,0BAA0B,EAE7D,OAAOA,EAAM,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAM,MAAM,CAAC,CACvD,CCKe,SAARC,GAAuBC,EAAW,CACvC,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,KAAM,UAAU,CAAC,EACtDA,EAAE,GAAG,OAAQ,IACXC,EAAM,QAAQ,CAAC,CAAE,GAAAE,EAAI,SAAUC,CAAY,EAAGC,IAAM,CAE7CF,EAAG,YACNA,EAAG,UAAYH,EAAE,OACjBA,EAAE,KAAK,SAAU,CAAE,EAAAK,EAAG,QAASL,EAAE,MAAO,CAAC,GAG3C,IAAMM,EAAcC,EAAiBP,EAAGK,CAAC,EACnC,CAAE,OAAAG,CAAO,EAAIC,EAAgBT,EAAGK,CAAC,EACjCK,EAAWC,EAAYP,CAAW,EAElCQ,EAASZ,EAAE,eAAeG,EAAG,SAAS,EAEtCU,EAAcC,GAAkB,CACpC,GAAM,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAIhB,EAAE,YAAYc,EAAKR,CAAW,EACtD,MAAO,CAACS,GAAS,CAACC,CACpB,EAEMC,EAAeH,GACnBD,EAAWC,CAAG,EACV,KAAK,IAAIF,EAAO,aAAaE,EAAK,GAAQ,EAAIX,EAAG,aAAa,EAC9D,IAEAe,EAAYJ,GAChBN,EAAO,OACL,CAACW,EAAG,CAAE,OAAAC,CAAO,IAAMD,EAAIF,EAAYI,EAAaP,EAAKM,CAAM,CAAC,EAC5D,CACF,EAAIZ,EAAO,OAETc,EAAYJ,EAASR,CAAQ,EAE7Ba,EAA4B,CAAC,EACjC,QAAWH,KAAUI,GAAkB,CACrC,IAAMC,EAAcJ,EAAaX,EAAUU,CAAM,EACjD,GAAI,CAACR,EAAO,IAAIa,CAAW,EAAG,SAE9B,IAAMC,EAAQR,EAASO,CAAW,EAC9BC,EAAQJ,GACVA,EAAYI,EACZH,EAAgB,CAACE,CAAW,GACnBC,IAAUJ,GAAWC,EAAc,KAAKE,CAAW,EAGhE,GAAIF,EAAc,OAAQ,CACxB,IAAMI,EAAcC,EAAML,CAAa,EACvClB,EAAE,KAAKsB,EAAY,EAAGA,EAAY,CAAC,EACnC,OAEJ,CAAC,CACH,EAEA3B,EAAE,GAAG,SAAU,CAAC,CAAE,EAAAK,EAAG,UAAAwB,CAAU,IAAM,CACnC,GAAIxB,IAAMwB,GAENxB,EAAE,IACA,CAACA,EAAE,GAAG,UAAW,CACnB,IAAMyB,EAAO9B,EAAE,QAAQ6B,CAAS,EAC5BC,EAAK,QAAOzB,EAAE,GAAG,UAAYyB,GAGvC,CAAC,CACH,CCrEe,SAARC,GAA4BC,EAAW,CAC5C,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,aAAc,UAAU,CAAC,EAC9DA,EAAE,GAAG,OAAQ,IACXC,EAAM,QAAQ,CAAC,CAAE,WAAAE,EAAY,SAAAC,CAAS,IACpCJ,EAAE,cACAK,EAAID,EAAS,CAAC,EACdC,EAAID,EAAS,CAAC,EACdD,EAAW,MACXA,EAAW,GACXA,EAAW,GACXA,EAAW,SACb,CACF,CACF,CACF,CChBA,IAAAG,GAA0B,OCD1B,IAAAC,GAAwB,OCDT,SAARC,EAAsBC,EAAeC,EAAaC,EAAW,CAClE,OAAOF,GAAS,EAAME,GAAKD,EAAMC,CACnC,CDIA,IAAqBC,EAArB,KAAiC,CAC/B,YAAmBC,EAAyB,CAAzB,YAAAA,EACjB,KAAK,KAAK,CACZ,CAEQ,MAAO,CACb,KAAK,OAAO,KAAK,CAAC,CAACC,CAAC,EAAG,CAACC,CAAC,IAAMD,EAAIC,CAAC,CACtC,CAEA,IAAIC,EAAoBC,EAAe,CACrC,YAAK,OAAO,KAAK,CAACD,EAAYC,CAAC,CAAC,EAChC,KAAK,KAAK,EACH,IACT,CAEA,IAAIC,EAAe,CACjB,GAAM,CAACC,EAAKC,CAAS,EAAI,KAAK,OAAO,CAAC,EACtC,GAAIF,GAASC,EAAK,SAAO,YAAQ,GAAGC,CAAS,EAE7C,GAAM,CAACC,EAAMC,CAAU,EAAI,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAC7D,GAAIJ,GAASG,EAAM,SAAO,YAAQ,GAAGC,CAAU,EAE/C,IAAMC,EAAc,KAAK,OAAO,UAAU,CAAC,CAACC,EAAC,IAAMA,GAAIN,CAAK,EACtD,CAACO,EAAO,CAACC,EAAIC,EAAIC,EAAIC,CAAE,CAAC,EAAI,KAAK,OAAON,EAAc,CAAC,EACvD,CAACO,EAAO,CAACC,EAAIC,EAAIC,EAAIC,CAAE,CAAC,EAAI,KAAK,OAAOX,CAAW,EAEnDY,GAAKjB,EAAQO,IAAUK,EAAQL,GACrC,SAAO,YACLW,EAAKV,EAAIK,EAAII,CAAC,EACdC,EAAKT,EAAIK,EAAIG,CAAC,EACdC,EAAKR,EAAIK,EAAIE,CAAC,EACdC,EAAKP,EAAIK,EAAIC,CAAC,CAChB,CACF,CACF,EEtCe,SAARE,EAA0BC,EAAaC,EAAa,CACzD,IAAMC,EAAK,KAAK,IAAIF,EAAE,EAAIC,EAAE,CAAC,EACvBE,EAAK,KAAK,IAAIH,EAAE,EAAIC,EAAE,CAAC,EAC7B,OAAO,KAAK,KAAKC,EAAKA,EAAKC,EAAKA,CAAE,CACpC,CHIA,IAAMC,GAAiD,CACrD,KAAM,IAAIC,EAAY,CACpB,CAAC,EAAG,CAAC,EAAG,EAAG,EAAG,CAAC,CAAC,EAChB,CAAC,EAAG,CAAC,IAAK,EAAG,EAAG,GAAG,CAAC,EACpB,CAAC,EAAG,CAAC,IAAK,IAAK,EAAG,GAAG,CAAC,EACtB,CAAC,EAAG,CAAC,IAAK,IAAK,IAAK,GAAG,CAAC,EACxB,CAAC,GAAI,CAAC,IAAK,IAAK,IAAK,GAAG,CAAC,CAC3B,CAAC,CACH,EAEO,SAASC,GAAmBC,EAAsC,CACvE,GAAI,EAAAA,EAAM,WAAa,GAEvB,MAAO,CACL,MAAO,IACP,MAAOC,EAAM,OACb,GAAIJ,GAAeG,EAAM,IAAI,EAAE,IAAIA,EAAM,SAAS,EAClD,UAAW,aAAU,GACvB,CACF,CAGO,SAASE,GAAcC,EAAkBC,EAAc,CAC5D,IAAMC,EAAqB,CAAC,EAEtBC,EAAO,KAAK,MAAMH,EAAO,EAAIC,CAAI,EACjCG,EAAO,KAAK,KAAKJ,EAAO,EAAIC,CAAI,EAChCI,EAAO,KAAK,MAAML,EAAO,EAAIC,CAAI,EACjCK,EAAO,KAAK,KAAKN,EAAO,EAAIC,CAAI,EAEtC,QAASM,EAAIF,EAAME,GAAKD,EAAMC,IAC5B,QAASC,EAAIL,EAAMK,GAAKJ,EAAMI,IAAK,CACjC,IAAMC,EAAOC,EAASV,EAAQ,CAAE,EAAAQ,EAAG,EAAAD,CAAE,CAAC,EAClCE,GAAQR,GAEZC,EAAM,KAAK,CAAE,EAAAM,EAAG,EAAAD,EAAG,UAAWN,EAAOQ,CAAK,CAAC,EAI/C,OAAOP,CACT,CI9Ce,SAARS,GAA+BC,EAAW,CAC/CA,EAAE,GAAG,OAAQ,CAAC,CAAE,EAAAC,CAAE,IAAM,CACtB,GAAM,CAAE,SAAAC,EAAU,KAAAC,EAAM,SAAAC,CAAS,EAAIH,EAErC,GAAIC,GAAYE,EACd,OAAW,CAAE,EAAAC,EAAG,EAAAC,EAAG,UAAAC,CAAU,IAAKC,GAAcJ,EAAUF,EAAS,IAAI,EACrEF,EAAE,IACA,IAAIS,EAAOT,EAAGG,EAAO,WAAW,EAAE,YAAY,CAAE,EAAAE,EAAG,EAAAC,CAAE,CAAC,EAAE,SAAS,CAC/D,KAAM,OACN,UAAAC,EACA,QAASL,EAAS,OACpB,CAAC,CACH,CAEN,CAAC,CACH,CCbe,SAARQ,GAA2BC,EAAW,CAC3C,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,MAAM,CAAC,EACtCG,EAAQ,IAAID,EAAMF,EAAE,SAAU,CAAC,QAAS,UAAU,CAAC,EACzDA,EAAE,GAAG,OAAQ,IACXG,EAAM,QAAQ,CAAC,CAAE,MAAAC,EAAO,SAAAC,CAAS,EAAGC,IAAM,CACxCF,EAAM,WAAaA,EAAM,QACzBE,EAAE,cAAcC,GAAmBH,CAAK,CAAC,EAErCA,EAAM,WAAa,EAAGJ,EAAE,KAAKM,CAAC,EAEhCL,EAAM,QAAQ,CAACO,EAAGC,IAAW,CAC3B,GAAM,CAAE,OAAAC,CAAO,EAAIC,EAAgBX,EAAGS,CAAM,EAChCC,EAAO,KAAK,CAAC,CAAE,SAAAE,CAAS,IAClCC,EAAWD,EAAUP,CAAQ,CAC/B,GACSL,EAAE,OAAOS,EAAQL,EAAM,UAAWE,CAAC,CAC9C,CAAC,CACL,CAAC,CACH,EACAN,EAAE,GAAG,QAAS,CAAC,CAAE,EAAAM,CAAE,IAAM,CACnBA,EAAE,OAAOA,EAAE,cAAcC,GAAmBD,EAAE,KAAK,CAAC,CAC1D,CAAC,CACH,CC5BA,IAAAQ,EAAiC,OCEjC,IAAMC,GAAM,KAAK,GAAK,EAEf,SAASC,EAAaC,EAAaC,EAAa,CACrD,OAAO,KAAK,MAAMA,EAAE,EAAID,EAAE,EAAGC,EAAE,EAAID,EAAE,CAAC,CACxC,CAEO,SAASE,GAAUC,EAAWC,EAAW,CAC9C,IAAMJ,GAAKG,EAAIC,GAAKN,GACdG,GAAKG,EAAID,GAAKL,GAEpB,OAAOE,EAAIC,EAAI,CAACD,EAAIC,CACtB,CAEO,SAASI,GAAUC,EAAsC,CAC9D,IAAMC,EAAK,KAAK,IAAID,EAAG,KAAK,EAAIA,EAAG,IAC7BE,EAAK,KAAK,IAAIF,EAAG,KAAK,EAAIA,EAAG,IACnC,MAAO,CAACC,EAAIC,CAAE,CAChB,CCbO,SAASC,GAASC,EAAgB,CACvC,OAAIA,EAAO,OAAS,EAAU,YAC1BA,EAAO,MAAQ,EAAU,aACtB,OACT,CAEO,SAASC,GAAaD,EAAgB,CACvCA,EAAO,MAAQ,IACjBA,EAAO,QACHA,EAAO,OAAS,GAAKA,EAAO,OAAS,IACvCA,EAAO,MAAQA,EAAO,YAE5B,CAEO,SAASE,GAAQF,EAAgB,CACtC,OAAOA,EAAO,QAAU,CAC1B,CAEO,SAASG,GACdC,EACAJ,EACAK,EACAC,EACAC,EACAC,EAAsB,CAAC,EACvB,CACI,EAAER,EAAO,OAAS,EAAGA,EAAO,MAAQA,EAAO,kBAC1CA,EAAO,MAAQA,EAAO,iBAE3B,IAAMS,EAAQ,CAAE,EAAGJ,EAAS,EAAI,GAAK,EAAGA,EAAS,EAAI,EAAI,EACnDK,EACJV,EAAO,cAAgB,eACnBW,EAAaF,EAAOH,CAAM,EAC1BN,EAAO,YAEPY,EAASR,EACZ,MAAMJ,EAAO,YAAY,EACzB,eAAe,CAAE,IAAKQ,CAAU,CAAC,EACjC,KAAKC,EAAM,EAAGA,EAAM,CAAC,EAExB,OAAIT,EAAO,gBACTY,EAAO,UAAU,CAAE,MAAAF,EAAO,IAAKV,EAAO,cAAe,CAAC,EAEnDY,EAAO,IAAIA,EAAO,SAASL,CAAK,EAE9BK,CACT,CCpDe,SAARC,GAA2BC,EAAWC,EAAW,CACtD,OAAOA,IAAM,EAAID,EAAIA,EAAI,GAC3B,CHOO,IAAME,EAAa,EAE1B,SAASC,GACPC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,CACA,IAAMC,EAAQ,GAAG,KAAK,KAAKL,CAAG,KAAKC,IAC7BK,EAAS,KAAK,MAAON,EAAMC,EAAOF,CAAK,EAE7CH,EAAK,UAAUC,EAAGC,EAAGC,EAAO,IAAK,OAAWI,CAAO,EAC/CG,GAAQV,EAAK,UAAUC,EAAGC,EAAGQ,EAAQ,IAAK,OAAWJ,CAAQ,EACjEN,EAAK,mBAAmBC,EAAIE,EAAQ,EAAGD,EAAGO,EAAOD,CAAM,CACzD,CAEA,SAASG,GAAeX,EAAgBC,EAAWC,EAAWU,EAAgB,CAC5EZ,EAAK,WAAWC,EAAGC,EAAGU,EAAO,KAAM,SAAO,KAAK,EAE/C,IAAMC,EAAQC,GAASF,CAAM,EAC7B,GAAIC,IAAU,YAAa,CACzBb,EAAK,WAAWC,EAAGC,EAAI,EAAG,cAAcU,EAAO,SAAU,SAAO,SAAS,EACzE,OAGF,IAAMG,EAAO,GAAGH,EAAO,SAASA,EAAO,aACvCZ,EAAK,WAAWC,EAAGC,EAAI,EAAGa,EAAM,SAAO,MAAM,EAEzCF,IAAU,cACZb,EAAK,WAAWC,EAAIc,EAAK,OAAQb,EAAI,EAAG,KAAKU,EAAO,SAAU,SAAO,KAAK,CAC9E,CAEe,SAARI,GAAwBC,EAAW,CACxC,GAAM,CAAE,UAAAC,EAAW,KAAAlB,CAAK,EAAIiB,EAE5BA,EAAE,GAAG,OAAQ,IAAM,CACjB,IAAME,EAASF,EAAE,OAGjBjB,EAAK,SAAS,EAAGkB,EAAWlB,EAAK,MAAOF,EAAY,GAAG,EACvDE,EAAK,cAAc,EAAGkB,EAAWlB,EAAK,MAAOF,EAAY,SAAO,KAAK,EAErE,IAAIG,EAAI,EACFC,EAAIgB,EAAY,EAChBE,EAAO,GAAGD,EAAO,MAAO,WAAWA,EAAO,KAAM,OAChDE,EAAY,KAAK,IAAI,GAAID,EAAK,OAAS,CAAC,EAC9CpB,EAAK,WAAWC,EAAGC,EAAGkB,EAAM,SAAO,KAAK,EACxCpB,EAAK,WAAWC,EAAGC,EAAI,EAAG,MAAO,SAAO,KAAK,EAC7CH,GACEC,EACAC,EAAI,EACJC,EAAI,EACJmB,EACAF,EAAO,KAAM,GACbA,EAAO,KAAM,MACb,SAAO,WACP,SAAO,SACP,SAAO,KACT,EAEAlB,GAAKoB,EAAY,EACjBrB,EAAK,SACHC,EAAI,EACJC,EAAI,EACJoB,EAAO,8BACP,SAAO,KACT,EACAtB,EAAK,UACHC,EAAI,EACJC,EACAJ,EAAa,EACbwB,EAAO,kBACP,SAAO,KACT,EACAtB,EAAK,SACHC,EAAI,EACJC,EAAIJ,EAAa,EACjBwB,EAAO,4BACP,SAAO,KACT,EAEA,QAAWC,KAAOJ,EAAO,OAAQ,aAAc,CAC7C,IAAMK,EAAUC,EAAcR,EAAGE,CAAM,EAAE,OAAQO,GAAMA,EAAE,MAAM,EAC3DC,EAAK1B,EACT,QAAW2B,KAAUJ,EACnBb,GAAeX,EAAM2B,EAAIzB,EAAI,EAAG0B,EAAO,MAAO,EAC9CD,GAAM,GAGR3B,EAAK,WACHC,EACAC,EACA,GAAGqB,KAAOM,GAAU,SAAUL,EAAQ,MAAM,IAC5C,SAAO,UACT,EAEJ,CAAC,CACH,CIzGe,SAARM,GAA2BC,EAAW,CAC3C,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,SAAU,SAAU,UAAU,CAAC,EACpEA,EAAE,GAAG,OAAQ,IACXC,EAAM,QAAQ,CAAC,CAAE,OAAAE,EAAQ,OAAAC,EAAQ,SAAAC,CAAS,EAAGC,IAAM,CATvD,IAAAC,EAUM,GAAI,GAACA,EAAAJ,EAAO,SAAP,MAAAI,EAAe,OAAO,OAE3B,IAAMC,EAASC,EAAkBT,EAAGG,EAAO,MAAM,EAC3CO,EAAUC,EAAaN,EAAUG,CAAM,EACvCI,EAAOC,GAAUT,EAAO,MAAOM,CAAO,EAExC,KAAK,IAAIE,CAAI,GAAKT,EAAO,SAAUC,EAAO,MAAQM,EAC7CE,EAAO,EAAGR,EAAO,OAASD,EAAO,SACrCC,EAAO,OAASD,EAAO,SAExB,EAAEA,EAAO,UAAY,IACvBG,EAAE,UAAU,EACZA,EAAE,SAAS,EAEf,CAAC,CACH,CACF,CCvBe,SAARQ,GAA6BC,EAAW,CAC7C,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,UAAU,CAAC,EAChDA,EAAE,GAAG,OAAQ,IACXC,EAAM,QAAQ,CAAC,CAAE,SAAAE,CAAS,EAAGC,IAAM,CAC7B,EAAED,EAAS,UAAY,GAAGH,EAAE,KAAKI,CAAC,CACxC,CAAC,CACH,CACF,CCNO,SAASC,GAASC,EAAaC,EAAa,CACjD,IAAMC,EAAKD,EAAE,EAAID,EAAE,EACjBG,EAAKF,EAAE,EAAID,EAAE,EACbI,EAAK,KAAK,IAAIF,CAAE,EAChBG,EAAK,KAAK,IAAIF,CAAE,EAChBG,EAAQJ,EAAK,EAAI,EAAI,GACrBK,EAAQJ,EAAK,EAAI,EAAI,GAEjBK,EAAIC,EAAA,GAAKT,GACTU,EAAS,CAACD,EAAA,GAAKD,EAAG,EACxB,QAASG,EAAK,EAAGC,EAAK,EAAGD,EAAKP,GAAMQ,EAAKP,IAClC,GAAMM,GAAMP,GAAM,GAAMQ,GAAMP,GAEjCG,EAAE,GAAKF,EACPK,MAGAH,EAAE,GAAKD,EACPK,KAEFF,EAAO,KAAKD,EAAA,GAAKD,EAAG,EAEtB,OAAOE,CACT,CAGO,SAASG,GAAgBC,EAAYC,EAAYC,EAAgB,CACtE,IAAMN,EAAqB,CAAC,EAEtBO,EAAM,CAACC,EAAcC,IAAiB,CAC1C,IAAMC,EAAIC,EAAIH,CAAI,EACZI,EAAID,EAAIF,CAAI,EACbT,EAAO,KAAM,GAAM,EAAE,IAAMU,GAAK,EAAE,IAAME,CAAC,GAAGZ,EAAO,KAAK,CAAE,EAAAU,EAAG,EAAAE,CAAE,CAAC,CACvE,EAEA,QAAS,EAAI,EAAG,GAAK,KAAK,MAAMN,EAAS,KAAK,KAAK,EAAG,CAAC,EAAG,IAAK,CAC7D,IAAMO,EAAI,KAAK,MAAM,KAAK,KAAKP,EAASA,EAAS,EAAI,CAAC,CAAC,EACvDC,EAAIH,EAAKS,EAAGR,EAAK,CAAC,EAClBE,EAAIH,EAAKS,EAAGR,EAAK,CAAC,EAClBE,EAAIH,EAAKS,EAAGR,EAAK,CAAC,EAClBE,EAAIH,EAAKS,EAAGR,EAAK,CAAC,EAClBE,EAAIH,EAAK,EAAGC,EAAKQ,CAAC,EAClBN,EAAIH,EAAK,EAAGC,EAAKQ,CAAC,EAClBN,EAAIH,EAAK,EAAGC,EAAKQ,CAAC,EAClBN,EAAIH,EAAK,EAAGC,EAAKQ,CAAC,EAGpB,OAAOb,CACT,CC7Ce,SAARc,GAA2BC,EAAW,CAC3C,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,SAAU,UAAU,CAAC,EAC1DA,EAAE,GAAG,OAAQ,IACXC,EAAM,QAAQ,CAAC,CAAE,OAAAE,EAAQ,SAAAC,EAAU,WAAAC,EAAY,YAAAC,CAAY,EAAGC,IAAM,CAClE,GAAM,CAACC,EAAIC,CAAE,EAAIC,GAAUP,CAAM,EAC3BQ,EAAM,CAAE,EAAGP,EAAS,EAAII,EAAI,EAAGJ,EAAS,EAAIK,CAAG,EAE/CG,EAAOC,GAASC,EAAYV,CAAQ,EAAGU,EAAYH,CAAG,CAAC,EAEzDI,EAAU,GACVC,EACJ,QAAWC,KAAOL,EAAM,CACtB,GAAI,CAACZ,EAAE,SAASiB,CAAG,EAAG,CACpBjB,EAAE,KAAKO,CAAC,EACR,OAGFP,EAAE,KAAKO,EAAGU,CAAG,EAEb,GAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,EAAInB,EAAE,YAAYiB,EAAKX,GAAA,YAAAA,EAAa,GAAG,EAC3D,GAAIY,EAAM,CACRH,EAAU,GACV,cACSI,EAAO,CAChBH,EAAYG,EACZ,OAIAJ,EACFf,EAAE,KAAKO,CAAC,EACCS,GACLX,GAAYL,EAAE,OAAOgB,EAAWX,EAAW,OAAQE,CAAC,EACxDP,EAAE,KAAKO,CAAC,GAERP,EAAE,KAAKO,EAAGI,CAAG,CAEjB,CAAC,CACH,CACF,CCxCe,SAARS,GAA2BC,EAAW,CAC3CA,EAAE,GAAG,aAAc,CAAC,CAAE,KAAAC,CAAK,IAAM,CAC/B,IAAMC,EAASF,EAAE,OACXG,EAAcC,EAAaF,EAAO,SAAWD,CAAI,EACtCI,GAAkBL,EAAGE,EAAQC,CAAW,EAC3C,SACZD,EAAO,KAAKC,EAAY,EAAGA,EAAY,CAAC,EACxCH,EAAE,KAAK,EAEX,CAAC,EAEDA,EAAE,GAAG,aAAc,CAAC,CAAE,MAAAM,CAAM,IAAM,CAChC,IAAMJ,EAASF,EAAE,OACXO,EAAML,EAAO,OAAQ,aAAaI,CAAK,EAEvCE,EAAOC,EAAcT,EAAGE,CAAM,EAC9BQ,EAAUF,EAAK,OAAQG,GAAMA,EAAE,KAAK,IAAIJ,CAAG,CAAC,EAC9CK,EAAQ,GACZ,QAAWC,KAAUH,EACdG,EAAO,QAERC,GAAQD,EAAO,MAAM,IACvBE,GACEf,EACAa,EAAO,OACPA,EAAO,SACP,CAAE,EAAG,EAAG,EAAG,CAAE,EACbX,EACAM,EAAK,IAAKG,GAAMA,EAAE,EAAE,CACtB,EACAC,EAAQ,IAGRA,GAAOZ,EAAE,KAAK,CACpB,CAAC,CACH,CCzCO,IAAMgB,GAAa,CACxB,UACA,UACA,SACA,QACA,QACA,YACA,MACF,ECLA,IAAAC,EAAuB,OCDhB,IAAMC,GAAe,CAC1B,KAAM,QACN,WAAY,EACZ,KAAM,EACN,KAAM,EACN,OAAQ,EACR,OAAQ,EACR,MAAO,CAAC,CACV,EAEMC,GAAc,CAACD,EAAK,EACnBE,GAAQD,GCXR,IAAME,GAAgB,CAC3B,KAAM,SACN,WAAY,EACZ,KAAM,EACN,KAAM,EACN,OAAQ,EACR,OAAQ,EACR,MAAO,CAAC,CACV,EAEMC,GAAa,CAACD,EAAM,EACnBE,GAAQD,GCbA,SAARE,GAA2BC,EAAaC,EAAM,EAAG,CACtD,IAAMC,EAAkB,CAAC,EACzB,QAASC,EAAIF,EAAKE,EAAIH,EAAKG,IAAKD,EAAM,KAAKC,CAAC,EAC5C,OAAOD,CACT,CCJe,SAARE,GAA4BC,EAAY,CAC7C,QAASC,EAAID,EAAM,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACzC,IAAMC,EAAI,KAAK,MAAM,KAAK,OAAO,GAAKD,EAAI,EAAE,EAC5C,CAACD,EAAMC,CAAC,EAAGD,EAAME,CAAC,CAAC,EAAI,CAACF,EAAME,CAAC,EAAGF,EAAMC,CAAC,CAAC,EAG5C,OAAOD,CACT,CJKA,IAAMG,GAAkD,CACtD,QAAS,CAAE,GAAI,SAAO,SAAU,EAChC,QAAS,CAAE,GAAI,SAAO,UAAW,EACjC,OAAQ,CAAE,GAAI,SAAO,UAAW,EAChC,MAAO,CAAE,GAAI,SAAO,YAAa,EAEjC,MAAO,CAAE,GAAI,SAAO,QAAS,EAC7B,UAAW,CAAE,GAAI,SAAO,MAAO,EAC/B,KAAM,CAAE,GAAI,SAAO,MAAO,GAAI,SAAO,YAAa,CACpD,EAGA,IAAMC,GAA6C,CACjD,QAAS,EACT,QAAS,EACT,OAAQ,EACR,MAAO,EAEP,MAAO,EACP,UAAW,EACX,KAAM,EACR,EAEMC,GAAc,CAClB,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,cACA,MACA,aACA,SACF,EAGMC,GAA+C,CACnD,MAAO,EACP,MAAO,EACP,MAAO,EACP,MAAO,EACP,MAAO,EACP,MAAO,EACP,MAAO,EACP,MAAO,EACP,OAAQ,EACR,OAAQ,EACR,OAAQ,EACR,YAAa,EACb,IAAK,GACL,WAAY,GACZ,QAAS,EACX,EAEA,SAASC,GAASC,EAAkB,CAElC,OAAIA,IAAU,aAAeA,IAAU,OAAeC,EAAMC,EAAU,EAC/DD,EAAME,EAAW,CAC1B,CAEO,SAASC,GAAcC,EAAWC,EAAuB,CAC9D,OAAa,CACX,IAAMC,EAASN,EAAMJ,EAAW,EAC1BG,EAAQC,EAAMO,EAAU,EACxBC,EAAQV,GAASC,CAAK,EACtBU,EACJd,GAAgBI,CAAK,EAAIF,GAAiBS,CAAM,EAAIE,EAAM,WAE5D,GAAIC,GAAcJ,EAAe,CAE/B,IAAMK,EAASN,EAAE,MAAME,CAAM,EAAE,SAASE,CAAK,EAIvCG,EAAaC,GAAQb,CAAK,EAChC,QAAWc,KAAQC,EAAcV,EAAGM,CAAM,EACpCG,EAAK,YAAY,OAAO,OAAOA,EAAK,WAAYF,CAAU,EAGhE,MAAO,CAAE,OAAAD,EAAQ,WAAAD,CAAW,GAGlC,CAEA,SAASM,GAAOX,EAAWY,EAAYC,EAAYC,EAAWC,EAAW,CACvE,QAASC,EAAI,EAAGA,EAAID,EAAGC,IACrB,QAASC,EAAI,EAAGA,EAAIH,EAAGG,IAAK,CAC1B,GAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,MAAAC,CAAM,EAAIpB,EAAE,YAAY,CAAE,EAAGY,EAAKK,EAAG,EAAGJ,EAAKG,CAAE,CAAC,EACrE,GAAIE,GAAQC,GAASC,EAAM,OAAQ,MAAO,GAG9C,MAAO,EACT,CAEO,SAASC,GACdrB,EACAsB,EACAC,EACU,CACV,QAASP,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMQ,EAAQC,GAAQC,GAAU1B,EAAE,KAAK,MAAQsB,CAAK,CAAC,EAErD,QAAWL,KAAKO,EACd,GAAIb,GAAOX,EAAGiB,EAAGD,EAAGM,EAAOC,CAAM,EAAG,MAAO,CAAE,EAAAN,EAAG,EAAAD,CAAE,EAItD,MAAM,IAAI,MAAM,qCAAqCM,KAASC,IAAS,CACzE,CKzHe,SAARI,GAA2BC,EAAW,CAC3C,IAAIC,EAAO,EAEXD,EAAE,GAAG,OAAQ,IAAM,CAGjB,GAFAC,IAEI,EAAEA,EAAO,IAAK,CAChB,IAAMC,EAAgB,KAAK,KAAKD,EAAO,EAAE,EACnC,CAAE,OAAAE,CAAO,EAAIC,GAAcJ,EAAGE,CAAa,EAE3C,CAAE,MAAAG,EAAO,OAAAC,CAAO,EAAIC,EAAgBP,EAAGG,CAAM,EAC7CK,EAAWC,GAAkBT,EAAGK,EAAOC,CAAM,EACnDH,EAAO,KAAKK,EAAS,EAAGA,EAAS,CAAC,EAEtC,CAAC,CACH,CCjBe,SAARE,GAA2BC,EAAW,CAC3CA,EAAE,GAAG,OAAQ,CAAC,CAAE,EAAAC,EAAG,IAAAC,EAAK,IAAAC,CAAI,IAAM,CAC5BF,EAAE,OAAS,CAACG,EAAWF,EAAKC,CAAG,GACjCH,EAAE,MAAMC,EAAE,MAAM,YAAY,EAAE,YAAYC,CAAG,CACjD,CAAC,CACH,CCFe,SAARG,GAA4BC,EAAW,CAC5C,IAAMC,EAAQ,IAAIC,EAAMF,EAAE,SAAU,CAAC,WAAY,QAAQ,CAAC,EAC1DA,EAAE,GAAG,OAAQ,IACXC,EAAM,QAAQ,CAAC,CAAE,SAAAE,EAAU,OAAAC,CAAO,EAAGC,IAAM,CAT/C,IAAAC,EAUM,IAAMC,EAAOP,EAAE,QAAQK,CAAC,EAClBG,GAAQF,EAAAC,EAAK,KAAL,YAAAD,EAAS,UAGvB,GAFAG,GAAaL,CAAM,EAEf,GAACI,GAAA,MAAAA,EAAO,QAERE,GAAQN,CAAM,GAAKI,EAAO,CAC5B,IAAMG,EAASC,EAAkBZ,EAAGQ,CAAK,EACnCK,EAASC,GACbd,EACAI,EACAD,EACAQ,EACAJ,EACAQ,EAAiBf,EAAGK,CAAC,CACvB,EAEIQ,EAAO,SAAQA,EAAO,OAAO,OAASL,GAEtCK,EAAO,KAAIA,EAAO,GAAG,UAAYL,GAEzC,CAAC,CACH,CACF,CCnBO,SAASQ,GAAWC,EAAW,CACpCC,GAAYD,CAAC,EACbE,GAAUF,CAAC,EACXG,GAAWH,CAAC,EACZI,GAAUJ,CAAC,EACXK,GAAUL,CAAC,EACXM,GAAMN,CAAC,EACPO,GAAUP,CAAC,EAEXQ,GAAWR,CAAC,EACZS,GAAOT,CAAC,EAERU,GAAUV,CAAC,EAEXW,GAAcX,CAAC,EAEfY,GAAUZ,CAAC,CACb,CCzBO,SAASa,GAAYC,EAAWC,EAAkBC,EAAe,CACtE,QAAWC,KAAKH,EAAE,SAAS,IAAI,EAAG,CAChC,GAAM,CAAE,OAAAI,EAAQ,WAAAC,EAAY,SAAAC,CAAS,EAAIH,EACzC,GACEC,GACAC,GACAC,GACAC,EAASN,EAAQK,CAAQ,GAAKJ,EAC9B,CACA,IAAMM,EAAQC,EAAaR,EAAQK,CAAQ,EAC3CF,EAAO,MAAQI,EAEfL,EAAE,eAAe,GAIrB,QAAWO,KAASC,GAAgBV,EAAO,EAAGA,EAAO,EAAGC,CAAK,EAC3DF,EAAE,MAAM,cAAc,EAAE,YAAYU,CAAK,CAC7C,ChCbA,IAAqBE,EAArB,KAAkD,CAIhD,YACSC,EACAC,EACAC,EACP,CAHO,OAAAF,EACA,gBAAAC,EACA,WAAAC,EAEP,KAAK,MAAQ,EACf,CAEA,MAAO,CACL,GAAM,CAAE,EAAAF,EAAG,WAAAC,EAAY,MAAAC,CAAM,EAAI,KAEjCF,EAAE,mBAAmB,EAErBA,EAAE,SAAS,MAAM,EACjBA,EAAE,SAAS,EAEXA,EAAE,OAASA,EAAE,MAAMC,CAAU,EAAE,SAASC,CAAK,EAE7C,GAAM,CAAE,MAAAC,EAAO,OAAAC,CAAO,EAAIC,EAAgBL,EAAGA,EAAE,MAAM,EACrDA,EAAE,OAAO,KAAKM,EAAIN,EAAE,SAAW,EAAIG,EAAQ,CAAC,EAAGH,EAAE,UAAYI,EAAS,CAAC,EAEvEG,GAAWP,CAAC,CACd,CAEA,MAAO,CACL,GAAM,CAAE,IAAAQ,EAAK,SAAAC,EAAU,UAAAC,EAAW,SAAAC,EAAU,KAAAC,CAAK,EAAI,KAAK,EAE1D,QAASC,EAAI,EAAGA,EAAIH,EAAWG,IAC7B,QAASC,EAAI,EAAGA,EAAIL,EAAUK,IAAK,CACjC,IAAMC,EAAOP,EAAI,KAAKK,CAAC,EAAEC,CAAC,EAG1BF,EAAK,SAASE,EAAGD,EAAG,EAAGE,EAAK,GAAIA,EAAK,EAAE,EAO3C,GAHA,KAAK,EAAE,KAAK,OAAQ,MAAS,EAC7B,KAAK,MAAQ,GAET,KAAK,YAAa,CACpB,IAAMC,EAAUL,EAAS,IAAI,KAAK,WAAW,EAC7C,GAAIK,EACF,QAASH,EAAI,EAAGA,EAAIH,EAAWG,IAC7B,QAASC,EAAI,EAAGA,EAAIL,EAAUK,IAAK,CACjC,IAAMG,EAAQD,EAAQ,IAAI,CAAE,EAAAF,EAAG,EAAAD,CAAE,CAAC,GAAK,IACjCK,EAAKD,IAAU,IAAW,IAAMA,EAAQ,GAAK,GAAGA,IAAU,IAChEL,EAAK,SAASE,EAAGD,EAAGK,EAAI,SAAO,SAAS,GAKlD,CAEA,QAAS,CACP,KAAK,WAAW,EACZ,KAAK,OAAO,KAAK,KAAK,CAC5B,CAEA,YAAa,CACX,GAAM,CAAE,OAAAC,EAAQ,KAAAP,CAAK,EAAI,KAAK,EAExBQ,EAAOR,EAAK,eAAe,EACjC,GAAIQ,EAAM,CACR,KAAK,EAAE,KAAK,aAAc,CAAE,KAAAA,CAAK,CAAC,EAClC,OAGF,GAAIR,EAAK,aAAa,MAAI,IAAI,EAAG,CAC/B,KAAK,EAAE,KAAK,aAAc,CAAE,MAAO,CAAE,CAAC,EACtC,OAEF,GAAIA,EAAK,aAAa,MAAI,IAAI,EAAG,CAC/B,KAAK,EAAE,KAAK,aAAc,CAAE,MAAO,CAAE,CAAC,EACtC,OAGF,GAAIA,EAAK,aAAa,MAAI,IAAI,EAAG,CAC/BS,GAAY,KAAK,EAAGC,EAAkB,KAAK,EAAGH,CAAM,EAAG,GAAG,EAC1D,KAAK,EAAE,KAAK,EACZ,OAEJ,CACF,ED3EA,IAAMI,GAAc,CAClB,EACA,SAAO,SACP,SAAO,MACP,SAAO,UACP,SAAO,OACP,SAAO,OACP,SAAO,KACT,EAEqBC,EAArB,KAAkD,CAOhD,YACSC,EACAC,EAAiB,EACjBC,EAAY,IACnB,CAHO,OAAAF,EACA,oBAAAC,EACA,eAAAC,CACN,CAEH,MAAO,CACL,KAAK,MAAQ,GACb,KAAK,MAAQ,CACX,KAAM,SACN,WAAY,IACZ,KAAM,EACN,KAAM,EACN,OAAQ,EACR,OAAQ,EACR,MAAO,CAAC,CACV,EACA,KAAK,OAAS,EAEd,KAAK,iBAAmB,EACxB,KAAK,MAAQ,CAAC,EACd,QAASC,EAAI,EAAGA,EAAI,KAAK,UAAWA,IAAK,KAAK,MAAM,KAAK,KAAK,QAAQ,CAAC,CACzE,CAEA,MAAO,CACL,GAAM,CAAE,KAAAC,CAAK,EAAI,KAAK,EAEtBA,EAAK,MAAM,EAEX,QAAWC,KAAQ,KAAK,MAAO,CAC7B,GAAM,CAAE,EAAAC,EAAG,EAAAC,CAAE,EAAIC,EAAYH,CAAI,EACjCD,EAAK,SAASE,EAAGC,EAAGF,EAAK,EAAGA,EAAK,EAAE,EAGrC,IAAMI,EAAKL,EAAK,MAAQ,EAExBA,EAAK,mBAAmBK,EAAI,EAAG,wBAAyB,SAAO,KAAK,EAEpEL,EAAK,mBAAmBK,EAAI,EAAG,oBAAqB,SAAO,KAAK,EAEhEL,EAAK,mBAAmBK,EAAI,GAAI,GAAG,KAAK,gBAAiB,SAAO,MAAM,EAEtE,IAAMC,EAAM,EACNC,EAAM,KAAK,OAAOP,EAAK,MAAQM,EAAM,GAAK,CAAC,EAC3CE,EAAQF,EAAMC,EAAM,EAC1B,KAAK,SAAS,OAAQC,CAAK,EAC3B,KAAK,SAAS,OAAQA,EAAQD,CAAG,EACjC,KAAK,SAAS,SAAUC,EAAQD,EAAM,CAAC,EACvC,KAAK,SAAS,SAAUC,EAAQD,EAAM,CAAC,EAEnC,KAAK,SAAW,GAClBP,EAAK,mBAAmBK,EAAI,GAAI,sBAAuB,SAAO,KAAK,EAErE,KAAK,MAAQ,EACf,CAEA,SAASI,EAAgBP,EAAW,CAClC,GAAM,CAAE,KAAAF,CAAK,EAAI,KAAK,EAEhBU,EAAQ,IAAID,EAAK,CAAC,EAAE,YAAY,KAAKA,EAAK,MAAM,CAAC,IACjDE,EAAQ,KAAK,MAAMF,CAAI,EAE7BT,EAAK,mBAAmBE,EAAG,GAAIQ,EAAO,SAAO,UAAU,EACvDV,EAAK,mBAAmBE,EAAG,GAAIS,EAAM,SAAS,EAAGjB,GAAYiB,CAAK,CAAC,CACrE,CAEA,QAAS,CACP,KAAK,gBAAgB,EACrB,KAAK,WAAW,EAEZ,KAAK,OAAO,KAAK,KAAK,CAC5B,CAEA,SAAgB,CACd,GAAM,CAAE,KAAAX,CAAK,EAAI,KAAK,EAEhBY,EAAKC,EAAM,CACf,SAAO,SACP,SAAO,UACP,SAAO,OACP,SAAO,WACP,SAAO,KACT,CAAC,EACKC,EAAM,GAAM,KAAK,OAAO,EACxBC,EAAID,EAAM,IAAO,IAAMA,EAAM,KAAOE,EAAO,IAAM,IACjDC,EAAQ,KAAK,OAAO,EAAI,KAAK,GAAK,EAExC,MAAO,CAAE,EAAGjB,EAAK,MAAQ,EAAG,EAAGA,EAAK,OAAS,EAAG,EAAAe,EAAG,GAAAH,EAAI,IAAAE,EAAK,MAAAG,CAAM,CACpE,CAEA,iBAAkB,CAChB,GAAI,KAAK,iBAAmB,KAAK,eAAgB,CAC/C,KAAK,mBACL,OAGF,KAAK,iBAAmB,EACxB,KAAK,MAAQ,GAEb,GAAM,CAAE,MAAAC,EAAO,OAAAC,CAAO,EAAI,KAAK,EAAE,KAEjC,QAAWlB,KAAQ,KAAK,MAAO,CAC7B,GAAM,CAACmB,EAAIC,CAAE,EAAIC,GAAUrB,CAAI,EAC/BA,EAAK,GAAKmB,EACVnB,EAAK,GAAKoB,GAENpB,EAAK,EAAI,GAAKA,EAAK,GAAKiB,GAASjB,EAAK,EAAI,GAAKA,EAAK,GAAKkB,IAC3D,OAAO,OAAOlB,EAAM,KAAK,QAAQ,CAAC,EAExC,CAEA,UAAUsB,EAAUC,EAAgB,CAClC,IAAMC,EACJ,KAAK,EAAE,KAAK,UAAU,MAAI,aAAa,GACvC,KAAK,EAAE,KAAK,UAAU,MAAI,cAAc,EAC1C,OAAO,KAAK,EAAE,KAAK,aAAaF,CAAG,GAAKC,IAAUC,CACpD,CAEA,WAAWhB,EAAgBE,EAAe,CACxC,IAAMe,EAAW,KAAK,MAAMjB,CAAI,EAAIE,EAEpC,GAAIe,EAAW,GAAKA,EAAW,EAAG,MAAO,GAEzC,KAAK,QAAUf,EACf,KAAK,MAAMF,CAAI,EAAIiB,EACnB,KAAK,MAAQ,EACf,CAEA,YAAa,CACP,KAAK,OAAS,IACZ,KAAK,UAAU,MAAI,KAAM,EAAK,GAAG,KAAK,WAAW,OAAQ,CAAC,EAC1D,KAAK,UAAU,MAAI,KAAM,EAAK,GAAG,KAAK,WAAW,OAAQ,CAAC,EAC1D,KAAK,UAAU,MAAI,KAAM,EAAK,GAAG,KAAK,WAAW,SAAU,CAAC,EAC5D,KAAK,UAAU,MAAI,KAAM,EAAK,GAAG,KAAK,WAAW,SAAU,CAAC,GAG9D,KAAK,UAAU,MAAI,KAAM,EAAI,GAAG,KAAK,WAAW,OAAQ,EAAE,EAC1D,KAAK,UAAU,MAAI,KAAM,EAAI,GAAG,KAAK,WAAW,OAAQ,EAAE,EAC1D,KAAK,UAAU,MAAI,KAAM,EAAI,GAAG,KAAK,WAAW,SAAU,EAAE,EAC5D,KAAK,UAAU,MAAI,KAAM,EAAI,GAAG,KAAK,WAAW,SAAU,EAAE,EAE5D,KAAK,SAAW,GAAK,KAAK,EAAE,KAAK,aAAa,MAAI,QAAQ,GAC5D,KAAK,EAAE,QAAQ,IAAIC,EAAS,KAAK,EAAG,aAAc,KAAK,KAAK,CAAC,CACjE,CACF,EkCvLA,IAAqBC,EAArB,KAAmC,CAGjC,YAAoBC,EAA2B,CAA3B,WAAAA,EAClB,KAAK,MAAQ,IAAI,GACnB,CAEA,IAAIC,EAAQ,CACV,OAAO,KAAK,MAAM,IAAI,KAAK,MAAMA,CAAG,CAAC,CACvC,CAEA,IAAIA,EAAQ,CACV,OAAO,KAAK,MAAM,IAAI,KAAK,MAAMA,CAAG,CAAC,CACvC,CAEA,aAAaA,EAAQC,EAAa,CAChC,IAAMC,EAAQ,KAAK,MAAM,IAAI,KAAK,MAAMF,CAAG,CAAC,EAC5C,OAAO,OAAOE,GAAU,YAAcA,EAAQD,CAChD,CAEA,SAASD,EAAQ,CACf,IAAMG,EAAI,KAAK,MAAMH,CAAG,EAClBI,EAAO,KAAK,MAAM,IAAID,CAAC,EAC7B,GAAI,OAAOC,GAAS,YAAa,MAAM,IAAI,MAAM,gBAAgBD,GAAG,EACpE,OAAOC,CACT,CAEA,IAAIJ,EAAQE,EAAU,CACpB,KAAK,MAAM,IAAI,KAAK,MAAMF,CAAG,EAAGE,CAAK,CACvC,CACF,EC1Be,SAARG,GACLC,EACAC,EACAC,EAAU,IACV,CACA,IAAMC,EAAuB,CAAC,EACxBC,EAAQ,IAAIC,EAA2BC,GAAM,GAAGA,EAAE,KAAKA,EAAE,GAAG,EAElE,QAAWC,KAAYP,EACrBG,EAAS,KAAKI,CAAQ,EACtBH,EAAM,IAAIG,EAAU,CAAC,EAGvB,KAAOJ,EAAS,QAAQ,CACtB,IAAMK,EAAUL,EAAS,MAAM,EAEzBM,EAAgBL,EAAM,SAASI,CAAO,EAAI,EAChD,GAAI,EAAAC,EAAgBP,GAEpB,QAAWQ,KAAaC,GAAWH,CAAO,EACpC,CAACJ,EAAM,IAAIM,CAAS,GAAKT,EAAWS,CAAS,IAC/CN,EAAM,IAAIM,EAAWD,CAAa,EAClCN,EAAS,KAAKO,CAAS,GAK7B,OAAON,CACT,CChCe,SAARQ,GAA8BC,EAAmB,CACtD,OAAO,OAAOA,GAAQ,WACxB,CzDsBA,IAAqBC,EAArB,KAAoD,CAUlD,YACSC,EACAC,EACAC,EACP,CAHO,UAAAF,EACA,cAAAC,EACA,eAAAC,EAEPF,EAAK,OAAS,KAAK,OAAO,KAAK,IAAI,EAEnC,KAAK,IAAM,IAAI,WAAQC,EAAUC,EAAW,IAAM,EAAI,EACtD,KAAK,aAAe,EACpB,KAAK,SAAW,IAAIC,EAAWC,EAAe,EAC9C,KAAK,SAAW,IAAI,IAEpB,KAAK,mBAAmB,EACxB,KAAK,QAAQ,IAAIC,EAAS,IAAI,CAAC,CACjC,CAEA,QAAQC,EAAgB,CACtB,KAAK,KAAOA,EACZ,KAAK,KAAK,KAAK,CACjB,CAEA,oBAAqB,CACnB,KAAK,eAAiBC,GAAYC,GAAW,IAAKC,GAAM,CAACA,EAAG,CAAC,CAAC,CAAC,CAAC,CAClE,CAEA,KAA0BC,EAASC,EAAyB,CAC1D,QAAWC,KAAM,KAAK,eAAeF,CAAI,EAAGE,EAAGD,CAAI,CACrD,CAEA,GAAwBD,EAASG,EAAiC,CAChE,KAAK,eAAeH,CAAI,EAAE,KAAKG,CAAO,CACxC,CAEA,MAAMH,EAAkB,CACtB,OAAOI,GAAY,KAAMJ,CAAI,CAC/B,CAEA,SAAU,CACR,KAAK,KAAK,MAAQ,EACpB,CAEA,IAAIK,EAAW,CACb,YAAK,QAAQ,EACb,KAAK,SAAS,IAAIA,CAAC,EACnB,KAAK,KAAK,QAAS,CAAE,EAAAA,CAAE,CAAC,EACjBA,CACT,CAEA,KAAKA,EAAWC,EAAa,CACvBD,EAAE,QACJA,EAAE,KAAKC,CAAE,EACT,KAAK,KAAK,OAAQ,CAAE,EAAAD,EAAG,GAAAC,CAAG,CAAC,EAE/B,CAEA,KAAKD,EAAWE,EAAe,CAC7B,IAAMC,EAAMH,EAAE,SACdA,EAAE,KAAKE,EAAI,EAAGA,EAAI,CAAC,EACfC,GAAK,KAAK,KAAK,OAAQ,CAAE,EAAAH,EAAG,IAAAG,EAAK,IAAAD,CAAI,CAAC,CAC5C,CAEA,UAAW,CACT,GAAM,CAAE,IAAAE,EAAK,UAAAjB,EAAW,SAAAD,CAAS,EAAI,KACrCkB,EAAI,MAAM,EAEV,QAASC,EAAI,EAAGA,EAAIlB,EAAWkB,IAC7B,QAASC,EAAI,EAAGA,EAAIpB,EAAUoB,IAE5BF,EAAI,WAAWE,EAAGD,EAAG,EAAK,EAC1BD,EAAI,gBAAgBE,EAAGD,EAAG,EAAK,EAGnCD,EAAI,WAAW,EAAG,EAAG,GAAQ,CAC/B,CAEA,cACEE,EACAD,EACAE,EACAC,EACAC,EACAC,EACA,CACI,KAAK,IAAI,UAAUJ,EAAGD,CAAC,IACrBK,EAAI,KAAK,KAAK,SAASJ,EAAGD,EAAG,CAAE,GAAAI,CAAG,EAAWC,CAAE,EAC9C,KAAK,KAAK,SAASJ,EAAGD,EAAGE,EAAGC,EAAIC,CAAE,EAE3C,CAEA,QAAQT,EAAmB,CA3H7B,IAAAW,EA4HI,IAAMC,GAAQD,EAAAX,EAAE,QAAF,KAAAW,EAAWX,EACzB,OAAOY,EAAM,WAAa,KAAK,QAAQA,EAAM,WAAW,MAAM,EAAIA,CACpE,CAEA,YACEV,EACAW,EAAwB,CAAC,EAC2B,CACpD,IAAMC,EAASC,EAAYb,CAAG,EAC9B,GAAI,CAAC,KAAK,SAASY,CAAM,EAAG,MAAO,CAAE,KAAM,GAAM,MAAO,CAAC,CAAE,EAE3D,IAAME,EAAO,KAAK,IAAI,UAAUF,EAAO,EAAGA,EAAO,CAAC,EAC5CG,EAAW,KAAK,SACnB,IAAI,EACJ,OAAQjB,GAAMA,EAAE,UAAYkB,EAAWJ,EAAQd,EAAE,QAAQ,CAAC,EACvDmB,EAAQF,EACX,OAAQjB,GAAM,CAACa,EAAY,SAASb,EAAE,EAAE,CAAC,EACzC,KAAMA,GAAMA,EAAE,KAAK,EAEtB,MAAO,CAAE,KAAAgB,EAAM,MAAAG,EAAO,MAAOF,EAAS,OAAQjB,GAAM,CAACA,EAAE,KAAK,CAAE,CAChE,CAEA,MAAO,CACL,KAAK,SAAS,MAAM,EACpB,KAAK,KAAK,OAAQ,MAAS,EAC3B,KAAK,SAAS,UAAU,CAC1B,CAEA,QAAS,CACP,KAAK,KAAK,OAAO,CACnB,CAEA,SAASE,EAAe,CACtB,OACEA,EAAI,GAAK,GACTA,EAAI,GAAK,GACTA,EAAI,EAAI,KAAK,UACbA,EAAI,EAAI,KAAK,SAEjB,CAEA,eAAekB,EAAgB,CAC7B,IAAMC,EAAM,GAAGD,EAAO,cAClBhB,EAAM,KAAK,SAAS,IAAIiB,CAAG,EAC/B,OAAKjB,IACHA,EAAMkB,GACJC,EAAc,KAAMH,CAAM,EACvB,IAAKpB,GAAMA,EAAE,QAAQ,EACrB,OAAOwB,EAAS,EACnB,KAAK,SAAS,KAAK,IAAI,CACzB,EACA,KAAK,SAAS,IAAIH,EAAKjB,CAAG,GAGrBA,CACT,CAEA,OAAOqB,EAAaC,EAAgBC,EAAmB,CACrD,IAAM3B,EAAI,KAAK,QAAQyB,CAAG,EACrBzB,EAAE,OAEPA,EAAE,KAAK,IAAM0B,EACb,QAAQ,IAAIC,EAAU,KAAM,OAAQ3B,EAAE,KAAM,MAAO0B,CAAM,EACzD,KAAK,KAAK,SAAU,CAAE,EAAA1B,EAAG,UAAA2B,EAAW,OAAAD,CAAO,CAAC,EAExC1B,EAAE,KAAK,IAAM,GAAG,KAAK,KAAKA,EAAG2B,CAAS,EAC5C,CACF,ED1LA,SAASC,GAAWC,EAAqB,CAGvC,IAAMC,EAAO,gBAEPC,EAAY,SAAS,cAAc,KAAK,EAC9CF,EAAO,YAAYE,CAAS,EAC5B,IAAMC,EAAW,IAAM,CACrB,IAAMC,EAAY,GAAOH,EAAK,UACxBI,EAAa,GAAOJ,EAAK,WAEzBK,EAAa,KAAK,MAAM,OAAO,WAAaF,CAAS,EACrDG,EAAc,KAAK,MAAM,OAAO,YAAcF,CAAU,EACxDG,EAAQ,KAAK,IAAIF,EAAYC,CAAW,EAE9CL,EAAU,MAAM,MAAQ,GAAGE,EAAYI,MACvCN,EAAU,MAAM,OAAS,GAAGG,EAAaG,KAC3C,EACA,OAAO,iBAAiB,SAAUL,CAAQ,EAC1CA,EAAS,EAET,IAAMM,EAAS,SAAS,cAAc,QAAQ,EAC9CP,EAAU,YAAYO,CAAM,EAC5B,sBAAsB,IAAMA,EAAO,MAAM,CAAC,EAE1C,IAAMC,EAAO,IAAI,YAASD,EAAQ,GAAM,GAAM,CAAE,KAAAR,CAAK,CAAC,EAChDU,EAAI,IAAIC,EAAOF,EAAM,GAAM,GAAOG,CAAU,EACjD,OAAe,EAAIF,CACtB,CAEA,OAAO,iBAAiB,OAAQ,IAAMZ,GAAW,SAAS,IAAI,CAAC",
  "names": ["require_wglt", "__commonJSMin", "exports", "module", "import_wglt", "import_wglt", "clone", "src", "seen", "copy", "i", "k", "v", "src_default", "clone", "src_default", "keys", "fromEntries", "pairs", "e", "k", "v", "Entity", "g", "name", "prefab", "clone", "x", "y", "overlay", "tags", "child", "key", "keys", "tag", "by", "e", "callback", "_a", "c", "at", "compareEntities", "a", "b", "_b", "_c", "_d", "layerA", "layerB", "EventNames", "battleship_exports", "__export", "Battleship", "BattleshipHull", "import_wglt", "Layer", "Layer_default", "Battleship", "BattleshipHull", "Layer_default", "bullet_exports", "__export", "Bullet", "HomingMissile", "PlayerBullet", "import_wglt", "Glyphs", "glyphs_default", "Bullet", "Layer_default", "HomingMissile", "PlayerBullet", "glyphs_default", "effect_exports", "__export", "AirFistRange", "SmokePuff", "import_wglt", "AirFistRange", "Layer_default", "SmokePuff", "fighter_exports", "__export", "Fighter", "FighterHull", "FighterLauncher", "import_wglt", "makeTurret", "name", "bulletAngle", "bulletPrefab", "bulletVelocity", "salvoCount", "timeBetweenShots", "timeBetweenSalvos", "FighterLauncher", "Layer_default", "makeTurret", "Fighter", "FighterHull", "gun_exports", "__export", "HomingMissileLauncher", "MachineGun", "PeaShooter", "PlayerGun", "Angles", "angles_default", "import_wglt", "MachineGun", "Layer_default", "makeTurret", "angles_default", "HomingMissileLauncher", "PeaShooter", "PlayerGun", "player_exports", "__export", "PlayerHull", "PlayerShip", "import_wglt", "child", "name", "x", "y", "overlay", "tags", "PlayerHull", "Layer_default", "PlayerShip", "child", "glyphs_default", "ships_exports", "__export", "CruiseyWing", "Demigod", "DroneA", "DroneB", "DroneC", "GoutOFlame", "Hull", "Olm", "ShipA", "ShipB", "ShipC", "ShipD", "ShipE", "ShipF", "ShipG", "ShipH", "import_wglt", "Hull", "Layer_default", "ShipA", "child", "glyphs_default", "ShipB", "ShipC", "ShipD", "ShipE", "ShipF", "ShipG", "ShipH", "DroneA", "DroneB", "DroneC", "CruiseyWing", "Olm", "GoutOFlame", "Demigod", "AllPrefabs", "__spreadValues", "battleship_exports", "bullet_exports", "effect_exports", "fighter_exports", "gun_exports", "player_exports", "ships_exports", "instantiate", "g", "name", "Entity", "int", "n", "intPosition", "pos", "int", "isSameCell", "a", "b", "ia", "ib", "addPositions", "EntityList", "compareFn", "entities", "e", "i", "import_wglt", "import_wglt", "getLayoutMidpoint", "layout", "topLeft", "avg", "key", "total", "offset", "getLayoutBlockers", "g", "ignoreSolid", "blockers", "pos", "addPositions", "wall", "solid", "getEntityTree", "e", "root", "x", "getEntityTreeIDs", "getEntityLayout", "_a", "parts", "width", "height", "part", "attachment", "y", "getEntityBlockers", "origin", "getEntityMidpoint", "Query", "list", "filter", "e", "key", "cb", "neighbourOffsets", "neighbours", "pos", "o", "addPositions", "oneOf", "items", "addAI", "g", "query", "Query", "ai", "rawPosition", "e", "ignoreSolid", "getEntityTreeIDs", "layout", "getEntityLayout", "position", "intPosition", "search", "isPassable", "pos", "solid", "wall", "getPosScore", "getScore", "a", "offset", "addPositions", "bestScore", "possibilities", "neighbourOffsets", "possibility", "score", "destination", "oneOf", "inflicter", "root", "addDisplay", "g", "query", "Query", "appearance", "position", "int", "import_wglt", "import_wglt", "lerp", "start", "end", "t", "GradientRun", "points", "a", "b", "breakpoint", "c", "value", "low", "lowColour", "high", "highColour", "higherIndex", "p", "below", "ar", "ag", "ab", "aa", "above", "br", "bg", "bb", "ba", "r", "lerp", "distance", "a", "b", "dx", "dy", "fieldGradients", "GradientRun", "getFieldAppearance", "field", "Layer_default", "generateField", "centre", "size", "parts", "minX", "maxX", "minY", "maxY", "y", "x", "dist", "distance", "addExplosives", "g", "e", "explodes", "name", "position", "x", "y", "intensity", "generateField", "Entity", "addFields", "g", "ships", "Query", "query", "field", "position", "e", "getFieldAppearance", "_", "victim", "layout", "getEntityLayout", "absolute", "isSameCell", "import_wglt", "tau", "angleBetween", "a", "b", "angleDiff", "x", "y", "angleMove", "mo", "dx", "dy", "getState", "turret", "advanceTimer", "canFire", "fire", "g", "position", "target", "owner", "ignoreIds", "start", "angle", "angleBetween", "bullet", "pluralise", "s", "n", "HUD_HEIGHT", "drawBar", "term", "x", "y", "width", "val", "max", "filledBg", "emptyBg", "textFg", "label", "length", "drawWeaponInfo", "turret", "state", "getState", "ammo", "addHUD", "g", "mapHeight", "player", "name", "barLength", "glyphs_default", "tag", "weapons", "getEntityTree", "e", "wx", "weapon", "pluralise", "addHoming", "g", "query", "Query", "homing", "motion", "position", "e", "_a", "centre", "getEntityMidpoint", "desired", "angleBetween", "diff", "angleDiff", "addLifetime", "g", "query", "Query", "lifetime", "e", "walkGrid", "a", "b", "dx", "dy", "nx", "ny", "signX", "signY", "p", "__spreadValues", "points", "ix", "iy", "getCirclePoints", "cx", "cy", "radius", "add", "rawX", "rawY", "x", "int", "y", "d", "addMotion", "g", "query", "Query", "motion", "position", "projectile", "ignoreSolid", "e", "dx", "dy", "angleMove", "dst", "line", "walkGrid", "intPosition", "hitWall", "hitEntity", "pos", "wall", "solid", "addPlayer", "g", "move", "player", "destination", "addPositions", "getEntityBlockers", "array", "tag", "tree", "getEntityTree", "weapons", "e", "fired", "weapon", "canFire", "fire", "ShipPowers", "import_wglt", "Basic", "EnemyPilots", "enemy_default", "Bodini", "StarPilots", "star_default", "enumerate", "max", "min", "items", "i", "shuffle", "array", "i", "j", "Colours", "powerDifficulty", "ShipPrefabs", "prefabDifficulty", "getPilot", "power", "oneOf", "star_default", "enemy_default", "generateEnemy", "g", "maxDifficulty", "prefab", "ShipPowers", "pilot", "difficulty", "entity", "appearance", "Colours", "part", "getEntityTree", "isFree", "sx", "sy", "w", "h", "y", "x", "wall", "solid", "other", "findSpawnPosition", "width", "height", "xList", "shuffle", "enumerate", "addSpawns", "g", "time", "maxDifficulty", "entity", "generateEnemy", "width", "height", "getEntityLayout", "position", "findSpawnPosition", "addTrails", "g", "e", "old", "pos", "isSameCell", "addTurrets", "g", "query", "Query", "position", "turret", "e", "_a", "root", "enemy", "advanceTimer", "canFire", "target", "getEntityMidpoint", "bullet", "fire", "getEntityTreeIDs", "addSystems", "g", "addLifetime", "addHoming", "addTurrets", "addFields", "addMotion", "addAI", "addSpawns", "addDisplay", "addHUD", "addTrails", "addExplosives", "addPlayer", "fireAirFist", "g", "centre", "power", "e", "motion", "projectile", "position", "distance", "angle", "angleBetween", "point", "getCirclePoints", "MainMode", "g", "shipPrefab", "pilot", "width", "height", "getEntityLayout", "int", "addSystems", "map", "mapWidth", "mapHeight", "overlays", "term", "y", "x", "cell", "overlay", "value", "ch", "player", "move", "fireAirFist", "getEntityMidpoint", "StatColours", "MenuMode", "g", "starfieldSpeed", "starCount", "i", "term", "star", "x", "y", "intPosition", "cx", "pad", "qtr", "start", "stat", "label", "value", "fg", "oneOf", "vel", "c", "glyphs_default", "angle", "width", "height", "dx", "dy", "angleMove", "key", "shift", "shiftDown", "newValue", "MainMode", "HashMap", "keyFn", "key", "fallback", "value", "s", "item", "bfs", "start", "isPassable", "maximum", "frontier", "costs", "HashMap", "p", "location", "current", "neighbourCost", "neighbour", "neighbours", "isDefined", "obj", "Engine", "term", "mapWidth", "mapHeight", "EntityList", "compareEntities", "MenuMode", "mode", "fromEntries", "EventNames", "n", "name", "data", "cb", "handler", "instantiate", "e", "by", "pos", "old", "map", "y", "x", "g", "fg", "bg", "bm", "_a", "owner", "ignoreSolid", "square", "intPosition", "wall", "entities", "isSameCell", "solid", "entity", "key", "bfs", "getEntityTree", "isDefined", "hit", "amount", "inflicter", "loadEngine", "parent", "font", "container", "onResize", "wantWidth", "wantHeight", "ratioWidth", "ratioHeight", "ratio", "canvas", "term", "g", "Engine", "HUD_HEIGHT"]
}
