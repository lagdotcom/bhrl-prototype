{
  "version": 3,
  "sources": ["globalExternal:wglt", "../src/index.ts", "../src/Engine.ts", "../node_modules/nanoclone/src/index.js", "../src/tools/object.ts", "../src/Entity.ts", "../src/events.ts", "../src/prefabs/battleship.ts", "../src/types/Layer.ts", "../src/prefabs/tools.ts", "../src/prefabs/bullet.ts", "../src/logic/glyphs.ts", "../src/prefabs/effect.ts", "../src/prefabs/fighter.ts", "../src/logic/angles.ts", "../src/prefabs/gun.ts", "../src/prefabs/player.ts", "../src/prefabs/ships.ts", "../src/prefabs/sword.ts", "../src/prefabs/index.ts", "../src/tools/int.ts", "../src/tools/position.ts", "../src/EntityList.ts", "../src/MenuMode.ts", "../src/CampaignMode.ts", "../src/CombatMode.ts", "../src/logic/entity.ts", "../src/Query.ts", "../src/tools/angle.ts", "../src/logic/neighbours.ts", "../src/tools/oneOf.ts", "../src/systems/AI.ts", "../src/systems/Display.ts", "../src/logic/field.ts", "../src/GradientRun.ts", "../src/tools/lerp.ts", "../src/tools/distance.ts", "../src/systems/Explosives.ts", "../src/logic/damage.ts", "../src/systems/Fields.ts", "../src/systems/HUD.ts", "../src/ui/PilotInfo.ts", "../src/logic/colours.ts", "../src/ui/ShipInfo.ts", "../src/logic/graphics.ts", "../src/ui/WeaponInfo.ts", "../src/logic/enemy.ts", "../src/types/PilotClass.ts", "../src/tools/enumerate.ts", "../src/logic/pilot.ts", "../src/tools/shuffle.ts", "../src/logic/turret.ts", "../src/systems/Homing.ts", "../src/systems/Lifetime.ts", "../src/logic/geometry.ts", "../src/systems/Motion.ts", "../src/systems/Player.ts", "../src/systems/Shields.ts", "../src/systems/Spawns.ts", "../src/systems/Trails.ts", "../src/systems/Turrets.ts", "../src/systems/index.ts", "../src/ui/BulletInfo.ts", "../src/logic/examine.ts", "../src/logic/airFist.ts", "../src/Grid.ts", "../src/pilots/star.ts", "../src/HashMap.ts", "../src/logic/bfs.ts", "../src/tools/isDefined.ts"],
  "sourcesContent": ["module.exports = globalThis.wglt", "import { DEFAULT_FONT, Terminal } from \"wglt\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { HUD_HEIGHT } from \"@app/systems/HUD\";\r\n\r\nfunction loadEngine(parent: HTMLElement) {\r\n  const cols = 60;\r\n  const rows = 40;\r\n  const font = DEFAULT_FONT;\r\n\r\n  const container = document.createElement(\"div\");\r\n  parent.appendChild(container);\r\n  const onResize = () => {\r\n    const wantWidth = cols * font.charWidth;\r\n    const wantHeight = rows * font.charHeight;\r\n\r\n    const ratioWidth = Math.floor(window.innerWidth / wantWidth);\r\n    const ratioHeight = Math.floor(window.innerHeight / wantHeight);\r\n    const ratio = Math.min(ratioWidth, ratioHeight);\r\n\r\n    container.style.width = `${wantWidth * ratio}px`;\r\n    container.style.height = `${wantHeight * ratio}px`;\r\n  };\r\n  window.addEventListener(\"resize\", onResize);\r\n  onResize();\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  container.appendChild(canvas);\r\n  requestAnimationFrame(() => canvas.focus());\r\n\r\n  const term = new Terminal(canvas, cols, rows, { font });\r\n  const g = new Engine(term, cols, rows - HUD_HEIGHT);\r\n  (window as any).g = g;\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => loadEngine(document.body));\r\n", "import { BlendMode, Cell, Console, Terminal } from \"wglt\";\r\nimport Entity, { compareEntities } from \"@app/Entity\";\r\nimport {\r\n  EventCallback,\r\n  EventHandler,\r\n  EventMap,\r\n  EventName,\r\n  EventNames,\r\n} from \"@app/events\";\r\nimport instantiate, { PrefabName } from \"@app/prefabs\";\r\nimport { intPosition, isSameCell } from \"@app/tools/position\";\r\n\r\nimport EntityList from \"@app/EntityList\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport HashMap from \"@app/HashMap\";\r\nimport KillReason from \"@app/types/KillReason\";\r\nimport MenuMode from \"@app/MenuMode\";\r\nimport { Position } from \"@app/components\";\r\nimport bfs from \"@app/logic/bfs\";\r\nimport { fromEntries } from \"@app/tools/object\";\r\nimport { getEntityTree } from \"@app/logic/entity\";\r\nimport isDefined from \"@app/tools/isDefined\";\r\n\r\ntype Overlay = HashMap<Position, number>;\r\n\r\nexport default class Engine implements EventHandler {\r\n  lastEntityId: number;\r\n\r\n  map: Console;\r\n  entities: EntityList;\r\n  eventCallbacks!: Record<EventName, EventCallback<any>[]>;\r\n  overlays: Map<string, Overlay>;\r\n  player!: Entity; // be careful of this !\r\n  mode!: GameMode;\r\n\r\n  constructor(\r\n    public term: Terminal,\r\n    public mapWidth: number,\r\n    public mapHeight: number\r\n  ) {\r\n    term.update = this.update.bind(this);\r\n\r\n    this.map = new Console(mapWidth, mapHeight, () => true);\r\n    this.lastEntityId = 0;\r\n    this.entities = new EntityList(compareEntities);\r\n    this.overlays = new Map();\r\n\r\n    this.clearEventHandlers();\r\n    this.setMode(new MenuMode(this));\r\n  }\r\n\r\n  setMode(mode: GameMode) {\r\n    this.mode = mode;\r\n    this.mode.init();\r\n  }\r\n\r\n  clearEventHandlers() {\r\n    this.eventCallbacks = fromEntries(EventNames.map((n) => [n, []]));\r\n  }\r\n\r\n  fire<T extends EventName>(name: T, data: EventMap[T]): void {\r\n    for (const cb of this.eventCallbacks[name]) cb(data);\r\n  }\r\n\r\n  on<T extends EventName>(name: T, handler: EventCallback<T>): void {\r\n    this.eventCallbacks[name].push(handler);\r\n  }\r\n\r\n  spawn(name: PrefabName) {\r\n    return instantiate(this, name);\r\n  }\r\n\r\n  refresh() {\r\n    this.mode.refresh();\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.refresh();\r\n    this.entities.add(e);\r\n    this.fire(\"spawn\", { e });\r\n    return e;\r\n  }\r\n\r\n  kill(e: Entity, reason: KillReason) {\r\n    if (e.alive) {\r\n      e.kill(reason);\r\n      this.fire(\"kill\", { e, reason });\r\n    }\r\n  }\r\n\r\n  move(e: Entity, pos: Position) {\r\n    const old = e.position;\r\n    e.move(pos.x, pos.y);\r\n    if (old) this.fire(\"move\", { e, old, pos });\r\n  }\r\n\r\n  blankMap() {\r\n    const { map, mapHeight, mapWidth } = this;\r\n    map.clear();\r\n\r\n    for (let y = 0; y < mapHeight; y++)\r\n      for (let x = 0; x < mapWidth; x++) {\r\n        // TODO draw something? :D\r\n        map.setBlocked(x, y, false);\r\n        map.setBlockedSight(x, y, false);\r\n      }\r\n\r\n    map.computeFov(0, 0, Infinity);\r\n  }\r\n\r\n  drawIfVisible(\r\n    x: number,\r\n    y: number,\r\n    g: string | number,\r\n    fg?: number,\r\n    bg?: number,\r\n    bm?: BlendMode\r\n  ) {\r\n    if (this.map.isVisible(x, y)) {\r\n      if (bm) this.term.drawCell(x, y, { bg } as Cell, bm);\r\n      else this.term.drawChar(x, y, g, fg, bg);\r\n    }\r\n  }\r\n\r\n  getRoot(e: Entity): Entity {\r\n    return e.attachment ? this.getRoot(e.attachment.parent) : e;\r\n  }\r\n\r\n  getContents(\r\n    pos: Position,\r\n    ignoreSolid: number[] = []\r\n  ): { oob?: boolean; wall?: boolean; solid?: Entity; other: Entity[] } {\r\n    const square = intPosition(pos);\r\n    if (!this.inBounds(square)) return { oob: true, other: [] };\r\n\r\n    const wall = this.map.isBlocked(square.x, square.y);\r\n    const entities = this.entities\r\n      .get()\r\n      .filter((e) => e.position && isSameCell(square, e.position));\r\n    const solid = entities\r\n      .filter((e) => !ignoreSolid.includes(e.id))\r\n      .find((e) => e.solid);\r\n\r\n    return { wall, solid, other: entities.filter((e) => !e.solid) };\r\n  }\r\n\r\n  tick() {\r\n    this.overlays.clear();\r\n    this.fire(\"tick\", undefined);\r\n    this.entities.clearDead();\r\n  }\r\n\r\n  update() {\r\n    this.mode.update();\r\n  }\r\n\r\n  inBounds(pos: Position) {\r\n    return (\r\n      pos.x >= 0 &&\r\n      pos.y >= 0 &&\r\n      pos.x < this.mapWidth &&\r\n      pos.y < this.mapHeight\r\n    );\r\n  }\r\n\r\n  getDistanceMap(entity: Entity) {\r\n    const key = `${entity.id}.distance`;\r\n    let map = this.overlays.get(key);\r\n    if (!map) {\r\n      map = bfs(\r\n        getEntityTree(this, entity)\r\n          .map((e) => e.position)\r\n          .filter(isDefined),\r\n        this.inBounds.bind(this)\r\n      );\r\n      this.overlays.set(key, map);\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n", "function clone (src, seen = new Map()) {\r\n  // Immutable things - null, undefined, functions, symbols, etc.\r\n  if (!src || typeof src !== 'object') return src\r\n\r\n  // Things we've seen already (circular refs)\r\n  if (seen.has(src)) return seen.get(src)\r\n\r\n  // Basic pattern for cloning something below here is:\r\n  // 1. Create copy\r\n  // 2. Add it to `seen` immediately, so we recognize it if we see it in\r\n  //    subordinate members\r\n  // 3. clone subordinate members\r\n\r\n  let copy\r\n  if (src.nodeType && 'cloneNode' in src) {\r\n    // DOM Node\r\n    copy = src.cloneNode(true)\r\n    seen.set(src, copy)\r\n  } else if (src instanceof Date) {\r\n    // Date\r\n    copy = new Date(src.getTime())\r\n    seen.set(src, copy)\r\n  } else if (src instanceof RegExp) {\r\n    // RegExp\r\n    copy = new RegExp(src)\r\n    seen.set(src, copy)\r\n  } else if (Array.isArray(src)) {\r\n    // Array\r\n    copy = new Array(src.length)\r\n    seen.set(src, copy)\r\n    for (let i = 0; i < src.length; i++) copy[i] = clone(src[i], seen)\r\n  } else if (src instanceof Map) {\r\n    // Map\r\n    copy = new Map()\r\n    seen.set(src, copy)\r\n    for (const [k, v] of src.entries()) copy.set(k, clone(v, seen))\r\n  } else if (src instanceof Set) {\r\n    // Set\r\n    copy = new Set()\r\n    seen.set(src, copy)\r\n    for (const v of src) copy.add(clone(v, seen))\r\n  } else if (src instanceof Object) {\r\n    // Object\r\n    copy = {}\r\n    seen.set(src, copy)\r\n    for (const [k, v] of Object.entries(src)) copy[k] = clone(v, seen)\r\n  } else {\r\n    // Unrecognized thing.  It's better to throw here than to return `src`, as\r\n    // we don't know whether src needs to be deep-copied here.\r\n    throw Error(`Unable to clone ${src}`)\r\n  }\r\n\r\n  return copy\r\n}\r\n\r\nexport default function (src) {\r\n  return clone(src, new Map())\r\n}\r\n", "import nanoclone from \"nanoclone\";\r\n\r\nexport const clone = nanoclone;\r\n\r\nexport const keys = Object.keys as <K extends PropertyKey, V>(\r\n  obj: Partial<Record<K, V>>\r\n) => K[];\r\n\r\nexport const fromEntries = <K extends PropertyKey, V>(\r\n  pairs: [K, V][]\r\n): Record<K, V> => {\r\n  const e: Partial<Record<K, V>> = {};\r\n  for (const [k, v] of pairs) e[k] = v;\r\n  return e as Record<K, V>;\r\n};\r\n", "import {\r\n  AI,\r\n  Appearance,\r\n  Attachment,\r\n  ComponentMap,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  LastMovement,\r\n  Lifetime,\r\n  Motion,\r\n  Origin,\r\n  Pilot,\r\n  Player,\r\n  Position,\r\n  Projectile,\r\n  Ship,\r\n  Trail,\r\n  Turret,\r\n} from \"@app/components\";\r\nimport { clone, keys } from \"@app/tools/object\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport KillReason from \"@app/types/KillReason\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\n\r\nexport default class Entity implements Partial<ComponentMap> {\r\n  alive: boolean;\r\n  id: number;\r\n  tags: Set<string>;\r\n\r\n  prefab?: PrefabName;\r\n  ai?: AI;\r\n  appearance?: Appearance;\r\n  attachment?: Attachment;\r\n  explodes?: Explodes;\r\n  field?: Field;\r\n  homing?: Homing;\r\n  ignoreSolid?: IgnoreSolid;\r\n  lastMovement?: LastMovement;\r\n  lifetime?: Lifetime;\r\n  motion?: Motion;\r\n  origin?: Origin;\r\n  pilot?: Pilot;\r\n  player?: Player;\r\n  projectile?: Projectile;\r\n  position?: Position;\r\n  ship?: Ship;\r\n  solid: boolean;\r\n  trail?: Trail;\r\n  turret?: Turret;\r\n\r\n  constructor(public g: Engine, public name?: string) {\r\n    this.alive = true;\r\n    this.id = ++g.lastEntityId;\r\n    this.solid = false;\r\n    this.tags = new Set();\r\n  }\r\n\r\n  applyPrefab(name: PrefabName, prefab: Prefab): this {\r\n    this.prefab = name;\r\n\r\n    if (prefab.components) Object.assign(this, clone(prefab.components));\r\n\r\n    if (prefab.children)\r\n      for (const { name, x, y, overlay, tags } of prefab.children) {\r\n        const child = this.g.spawn(name).setAttachment({ parent: this, x, y });\r\n        if (overlay)\r\n          for (const key of keys(overlay))\r\n            Object.assign((child as any)[key], clone(overlay[key]));\r\n        if (tags) for (const tag of tags) child.tags.add(tag);\r\n      }\r\n\r\n    return this;\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return this.name;\r\n  }\r\n\r\n  kill(reason: KillReason): this {\r\n    this.alive = false;\r\n    this.eachChild((e) => this.g.kill(e, reason));\r\n    return this;\r\n  }\r\n\r\n  eachChild(callback: (e: Entity, at: Attachment) => void) {\r\n    for (const e of this.g.entities.get()) {\r\n      if (e.attachment?.parent === this) callback(e, e.attachment);\r\n    }\r\n  }\r\n\r\n  setAI(c?: AI): this {\r\n    this.ai = c;\r\n    return this;\r\n  }\r\n\r\n  setAppearance(c?: Appearance): this {\r\n    this.g.refresh();\r\n    this.appearance = c;\r\n    return this;\r\n  }\r\n\r\n  setAttachment(c?: Attachment): this {\r\n    this.attachment = c;\r\n    return this;\r\n  }\r\n\r\n  setExplodes(c?: Explodes): this {\r\n    this.explodes = c;\r\n    return this;\r\n  }\r\n\r\n  setField(c?: Field): this {\r\n    this.field = c;\r\n    return this;\r\n  }\r\n\r\n  setHoming(c?: Homing): this {\r\n    this.homing = c;\r\n    return this;\r\n  }\r\n\r\n  setIgnoreSolid(c?: IgnoreSolid): this {\r\n    this.ignoreSolid = c;\r\n    return this;\r\n  }\r\n\r\n  setLastMovement(c?: LastMovement): this {\r\n    this.lastMovement = c;\r\n    return this;\r\n  }\r\n\r\n  setLifetime(c?: Lifetime): this {\r\n    this.lifetime = c;\r\n    return this;\r\n  }\r\n\r\n  setMotion(c?: Motion): this {\r\n    this.motion = c;\r\n    return this;\r\n  }\r\n\r\n  setOrigin(c?: Origin): this {\r\n    this.origin = c;\r\n    return this;\r\n  }\r\n\r\n  setPilot(c?: Pilot): this {\r\n    this.pilot = c;\r\n    return this;\r\n  }\r\n\r\n  setPosition(c?: Position): this {\r\n    this.g.refresh();\r\n    this.position = c;\r\n    return this;\r\n  }\r\n\r\n  setShip(c?: Ship): this {\r\n    this.ship = c;\r\n    return this;\r\n  }\r\n\r\n  setTrail(c?: Trail): this {\r\n    this.trail = c;\r\n    return this;\r\n  }\r\n\r\n  setTurret(c?: Turret): this {\r\n    this.turret = c;\r\n    return this;\r\n  }\r\n\r\n  setPlayer(c?: Player): this {\r\n    this.player = c;\r\n    return this;\r\n  }\r\n\r\n  setProjectile(c?: Projectile): this {\r\n    this.projectile = c;\r\n    return this;\r\n  }\r\n\r\n  setSolid(tag: boolean): this {\r\n    this.solid = tag;\r\n    return this;\r\n  }\r\n\r\n  move(x: number, y: number): this {\r\n    this.g.refresh();\r\n    this.position = { x, y };\r\n    this.eachChild((e, at) => e.move(x + at.x, y + at.y));\r\n    return this;\r\n  }\r\n}\r\n\r\nexport function compareEntities(a: Entity, b: Entity) {\r\n  const layerA = a.appearance?.layer ?? 0;\r\n  const layerB = b.appearance?.layer ?? 0;\r\n  if (layerA !== layerB) return layerA - layerB;\r\n\r\n  return a.id - b.id;\r\n}\r\n", "import { Pilot, Position } from \"@app/components\";\r\n\r\nimport AttackWave from \"@app/types/AttackWave\";\r\nimport DamageSource from \"@app/types/DamageSource\";\r\nimport Entity from \"@app/Entity\";\r\nimport KillReason from \"@app/types/KillReason\";\r\n\r\nexport const EventNames = [\r\n  \"damage\",\r\n  \"draw\",\r\n  \"kill\",\r\n  \"move\",\r\n  \"notice\",\r\n  \"playerFire\",\r\n  \"playerMove\",\r\n  \"spawn\",\r\n  \"tick\",\r\n  \"waveBegin\",\r\n] as const;\r\nexport type EventName = (typeof EventNames)[number];\r\n\r\nexport type EventMap = {\r\n  damage: { e: Entity; amount: number; source: DamageSource };\r\n  draw: undefined;\r\n  kill: { e: Entity; reason: KillReason };\r\n  move: { e: Entity; old: Position; pos: Position };\r\n  notice: { e: Entity; noticed: Entity };\r\n  playerFire: { array: number };\r\n  playerMove: { move: Position };\r\n  spawn: { e: Entity };\r\n  tick: undefined;\r\n  waveBegin: { wave: AttackWave; difficulty: number; pilot?: Pilot };\r\n};\r\n\r\nexport type EventCallback<T extends EventName> = (data: EventMap[T]) => void;\r\n\r\nexport type EventHandler = {\r\n  fire<T extends EventName>(name: T, data: EventMap[T]): void;\r\n  on<T extends EventName>(name: T, cb: EventCallback<T>): void;\r\n};\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { ship } from \"@app/prefabs/tools\";\r\n\r\nexport const Battleship: Prefab = {\r\n  components: {\r\n    ai: { idealDistance: 8, speed: 1 },\r\n    ship: ship(\"Battleship\", 40),\r\n  },\r\n  children: [\r\n    { name: \"BattleshipHull\", x: 1, y: 0 },\r\n    { name: \"BattleshipHull\", x: 2, y: 0 },\r\n    { name: \"BattleshipHull\", x: 0, y: 1 },\r\n    { name: \"BattleshipHull\", x: 1, y: 1 },\r\n    { name: \"BattleshipHull\", x: 2, y: 1 },\r\n    { name: \"MachineGun\", x: 0, y: 1 },\r\n    { name: \"HomingMissileLauncher\", x: 2, y: 1 },\r\n    { name: \"FighterLauncher\", x: 2, y: 0 },\r\n  ],\r\n};\r\n\r\nexport const BattleshipHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"/\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.WHITE,\r\n      bg: Colors.BROWN,\r\n    },\r\n  },\r\n};\r\n", "enum Layer {\r\n  Effect,\r\n  Ship,\r\n  Gun,\r\n  Bullet,\r\n  Player,\r\n}\r\nexport default Layer;\r\n", "import { Ship, Turret } from \"@app/components\";\r\n\r\nimport { PrefabChild } from \"@app/types/Prefab\";\r\nimport { PrefabName } from \".\";\r\n\r\nexport const child = (\r\n  name: PrefabName,\r\n  x: number,\r\n  y: number,\r\n  overlay?: PrefabChild[\"overlay\"],\r\n  tags?: PrefabChild[\"tags\"]\r\n): PrefabChild => ({ name, x, y, overlay, tags });\r\n\r\nexport const ship = (name: string, maxHp: number, maxShield = 0): Ship => ({\r\n  name,\r\n  maxHp,\r\n  hp: 0,\r\n  maxShield,\r\n  shield: 0,\r\n});\r\n\r\nexport const turret = (\r\n  name: string,\r\n  {\r\n    salvoCount = 1,\r\n    timeBetweenShots = 1,\r\n    timeBetweenSalvos = 1,\r\n    ammunition = Infinity,\r\n  }: Partial<Turret>,\r\n  bullets: Turret[\"bullets\"]\r\n): Turret => ({\r\n  name,\r\n  bullets,\r\n  salvoCount,\r\n  timeBetweenShots,\r\n  timeBetweenSalvos,\r\n  timer: 0,\r\n  salvo: salvoCount,\r\n  ammunition,\r\n});\r\n", "import { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const Bullet: Prefab = {\r\n  components: {\r\n    projectile: { damage: 1 },\r\n    appearance: {\r\n      glyph: Glyphs.InvertedExclamation,\r\n      layer: Layer.Bullet,\r\n      fg: Colors.YELLOW,\r\n    },\r\n  },\r\n};\r\n\r\nexport const DroneBullet: Prefab = {\r\n  components: {\r\n    projectile: { damage: 1 },\r\n    appearance: { glyph: \".\", layer: Layer.Bullet, fg: Colors.ORANGE },\r\n  },\r\n};\r\n\r\nexport const HomingMissile: Prefab = {\r\n  components: {\r\n    projectile: { damage: 1 },\r\n    homing: { strength: 0.15, duration: 10 },\r\n    trail: { effectPrefab: \"SmokePuff\" },\r\n    explodes: { size: 5, falloff: 1 },\r\n    appearance: { glyph: \"*\", layer: Layer.Bullet, fg: Colors.DARK_RED },\r\n  },\r\n};\r\n\r\nexport const PlayerBullet: Prefab = {\r\n  components: {\r\n    projectile: { damage: 3 },\r\n    appearance: { glyph: \"!\", layer: Layer.Bullet, fg: Colors.YELLOW },\r\n  },\r\n};\r\n", "const Glyphs = {\r\n  Diamond: \"\\x04\",\r\n  Club: \"\\x05\",\r\n  Dot: \"\\x07\",\r\n  Ring: \"\\x09\",\r\n  RingInvert: \"\\x0a\",\r\n  Female: \"\\x0c\",\r\n  Star: \"\\x0f\",\r\n\r\n  Pilcrow: \"\\x14\",\r\n  Silcrow: \"\\x15\",\r\n  ResizeVertical: \"\\x17\",\r\n  UpArrow: \"\\x18\",\r\n  DownArrow: \"\\x19\",\r\n  RightArrow: \"\\x1a\",\r\n  LeftArrow: \"\\x1b\",\r\n  DownWedge: \"\\x1f\",\r\n\r\n  Pentagon: \"\\x7f\",\r\n\r\n  CapitalUUmlaut: \"\\x9a\",\r\n  Cent: \"\\x9b\",\r\n  Yen: \"\\x9d\",\r\n\r\n  NotFlip: \"\\xa9\",\r\n  Not: \"\\xaa\",\r\n  InvertedExclamation: \"\\xad\",\r\n\r\n  BoxVerticalSingle: \"\\xb3\",\r\n\r\n  BoxUpSingleHorizontalSingle: \"\\xc1\",\r\n  BoxDownSingleHorizontalSingle: \"\\xc2\",\r\n  BoxHorizontalSingle: \"\\xc4\",\r\n\r\n  BoxUpDoubleHorizontalSingle: \"\\xd0\",\r\n  BoxDownSingleHorizontalDouble: \"\\xd1\",\r\n  BoxVerticalDoubleHorizontalSingle: \"\\xd7\",\r\n\r\n  Pi: \"\\xe3\",\r\n  Theta: \"\\xe9\",\r\n  Omega: \"\\xea\",\r\n  SymbolED: \"\\xed\",\r\n\r\n  HorizontalDivide: \"\\xf6\",\r\n};\r\nexport default Glyphs;\r\n", "import { BlendMode, fromRgb } from \"wglt\";\r\n\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const AirFistRange: Prefab = {\r\n  components: {\r\n    lifetime: { duration: 2 },\r\n    appearance: {\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(0, 255, 255, 100),\r\n      blendMode: BlendMode.Add,\r\n    },\r\n  },\r\n};\r\n\r\nexport const SmokePuff: Prefab = {\r\n  components: {\r\n    lifetime: { duration: 2 },\r\n    appearance: {\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(100, 100, 100, 50),\r\n      blendMode: BlendMode.Add,\r\n    },\r\n  },\r\n};\r\n", "import { ship, turret } from \"@app/prefabs/tools\";\r\n\r\nimport Angles from \"@app/logic/angles\";\r\nimport { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const FighterLauncher: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"_\", layer: Layer.Gun, fg: Colors.DARK_CYAN },\r\n    turret: turret(\"Fighter Bay\", { salvoCount: 1, timeBetweenSalvos: 20 }, [\r\n      { prefab: \"Fighter\", angle: Angles.Down, vel: 0 },\r\n    ]),\r\n  },\r\n};\r\n\r\nexport const Fighter: Prefab = {\r\n  components: {\r\n    ai: { idealDistance: 6, speed: 2 },\r\n    ship: ship(\"Fighter\", 2),\r\n  },\r\n  children: [\r\n    {\r\n      name: \"FighterHull\",\r\n      x: 0,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \"<\" } },\r\n    },\r\n    { name: \"FighterHull\", x: 1, y: 0 },\r\n    {\r\n      name: \"FighterHull\",\r\n      x: 2,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \">\" } },\r\n    },\r\n    { name: \"PeaShooter\", x: 1, y: 0 },\r\n  ],\r\n};\r\n\r\nexport const FighterHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"-\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.YELLOW,\r\n      bg: Colors.DARK_BLUE,\r\n    },\r\n  },\r\n};\r\n", "const quarter = Math.PI / 2;\r\nconst eighth = quarter / 2;\r\n\r\n// radians baby\r\nconst Angles = {\r\n  Right: 0,\r\n  DownRight: eighth,\r\n  Down: quarter,\r\n  DownLeft: quarter + eighth,\r\n  Left: quarter * 2,\r\n  UpLeft: quarter * 2 + eighth,\r\n  Up: quarter * 3,\r\n  UpRight: quarter * 3 + eighth,\r\n};\r\nexport default Angles;\r\n", "import Angles from \"@app/logic/angles\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { turret } from \"@app/prefabs/tools\";\r\n\r\nexport const MachineGun: Prefab = {\r\n  components: {\r\n    turret: turret(\r\n      \"Machine Gun\",\r\n      { salvoCount: 5, timeBetweenShots: 0, timeBetweenSalvos: 12 },\r\n      [{ prefab: \"Bullet\", angle: Angles.Down, vel: 2 }]\r\n    ),\r\n  },\r\n};\r\n\r\nexport const HomingMissileLauncher: Prefab = {\r\n  components: {\r\n    turret: turret(\"Homing Missile\", { salvoCount: 1, timeBetweenSalvos: 8 }, [\r\n      { prefab: \"HomingMissile\", angle: \"nearestEnemy\", vel: 1 },\r\n    ]),\r\n  },\r\n};\r\n\r\nexport const PeaShooter: Prefab = {\r\n  components: {\r\n    turret: turret(\"Pea Shooter\", { salvoCount: 1, timeBetweenSalvos: 3 }, [\r\n      { prefab: \"Bullet\", angle: Angles.Down, vel: 2 },\r\n    ]),\r\n  },\r\n};\r\n\r\nexport const PlayerGun: Prefab = {\r\n  components: {\r\n    turret: turret(\r\n      \"Pew Pew\",\r\n      { salvoCount: 2, timeBetweenShots: 0, timeBetweenSalvos: 3 },\r\n      [{ prefab: \"PlayerBullet\", angle: Angles.Up, vel: 2 }]\r\n    ),\r\n  },\r\n};\r\n\r\nexport const DroneGun: Prefab = {\r\n  components: {\r\n    turret: turret(\r\n      \"Stinger\",\r\n      { salvoCount: 1, timeBetweenSalvos: 5, ammunition: 5 },\r\n      [{ prefab: \"DroneBullet\", angle: \"nearestEnemy\", vel: 1 }]\r\n    ),\r\n  },\r\n};\r\n\r\nexport const OlmSpray: Prefab = {\r\n  components: {\r\n    turret: turret(\"Deployment\", { salvoCount: 1, timeBetweenSalvos: 12 }, [\r\n      { prefab: \"DroneA\", angle: Angles.Up, vel: 0, offset: { x: 0, y: -1 } },\r\n      {\r\n        prefab: \"HomingMissile\",\r\n        angle: Angles.DownLeft,\r\n        vel: 2,\r\n        offset: { x: -1, y: 1 },\r\n      },\r\n      {\r\n        prefab: \"HomingMissile\",\r\n        angle: Angles.DownRight,\r\n        vel: 2,\r\n        offset: { x: 1, y: 1 },\r\n      },\r\n    ]),\r\n  },\r\n};\r\n", "import { child, ship } from \"@app/prefabs/tools\";\r\n\r\nimport { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const PlayerHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: { glyph: \"#\", layer: Layer.Player, fg: Colors.DARK_GRAY },\r\n  },\r\n};\r\n\r\nexport const PlayerShip: Prefab = {\r\n  components: {\r\n    player: { weaponArrays: [\"Primary\", \"Secondary\"] },\r\n    ship: ship(\"Ace of Clubs\", 20, 10),\r\n  },\r\n  children: [\r\n    child(\"PlayerHull\", 0, 0, { appearance: { glyph: Glyphs.LeftArrow } }),\r\n    child(\"PlayerHull\", 1, 0, {\r\n      appearance: { glyph: Glyphs.Club, fg: Colors.LIGHT_GRAY },\r\n    }),\r\n    child(\"PlayerHull\", 2, 0, { appearance: { glyph: Glyphs.RightArrow } }),\r\n    child(\"PlayerGun\", 1, 0, undefined, [\"Primary\"]),\r\n    child(\"Sword\", 1, 0, undefined, [\"Secondary\"]),\r\n  ],\r\n};\r\n", "import { child, ship } from \"@app/prefabs/tools\";\r\n\r\nimport { AI } from \"@app/components\";\r\nimport { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const Hull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: { glyph: \"#\", layer: Layer.Ship, fg: Colors.DARK_GRAY },\r\n  },\r\n};\r\n\r\nconst defaultAI: AI = { idealDistance: 8, firingDistance: 14, speed: 1 };\r\nconst tinyGun = child(\"PeaShooter\", 0, 0);\r\n\r\nexport const ShipA: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"A\", 0) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Pilcrow } }),\r\n    tinyGun,\r\n  ],\r\n};\r\n\r\nexport const ShipB: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"B\", 0) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Yen } }),\r\n    tinyGun,\r\n  ],\r\n};\r\n\r\nexport const ShipC: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"C\", 0) },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: \"W\" } }), tinyGun],\r\n};\r\n\r\nexport const ShipD: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"D\", 0) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Omega } }),\r\n    tinyGun,\r\n  ],\r\n};\r\n\r\nexport const ShipE: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"E\", 0) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.DownWedge } }),\r\n    tinyGun,\r\n  ],\r\n};\r\n\r\nexport const ShipF: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"F\", 0) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Pi } }),\r\n    tinyGun,\r\n  ],\r\n};\r\n\r\nexport const ShipG: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"G\", 0) },\r\n  children: [child(\"Hull\", 0, 0, { appearance: { glyph: \"M\" } }), tinyGun],\r\n};\r\n\r\nexport const ShipH: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"H\", 0) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Female } }),\r\n    tinyGun,\r\n  ],\r\n};\r\n\r\nconst droneAI: AI = { idealDistance: 5, firingDistance: 6, speed: 1 };\r\nconst droneGun = child(\"DroneGun\", 0, 0);\r\n\r\nexport const DroneA: Prefab = {\r\n  components: { ai: droneAI, ship: ship(\"Drone A\", 1) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Theta } }),\r\n    droneGun,\r\n  ],\r\n};\r\n\r\nexport const DroneB: Prefab = {\r\n  components: { ai: droneAI, ship: ship(\"Drone B\", 1) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.SymbolED } }),\r\n    droneGun,\r\n  ],\r\n};\r\n\r\nexport const DroneC: Prefab = {\r\n  components: { ai: droneAI, ship: ship(\"Drone C\", 1) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Silcrow } }),\r\n    droneGun,\r\n  ],\r\n};\r\n\r\nexport const CruiseyWing: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"Cruisey Wing\", 10, 5) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Not } }),\r\n    child(\"Hull\", 1, 0, { appearance: { glyph: Glyphs.HorizontalDivide } }),\r\n    child(\"Hull\", 2, 0, { appearance: { glyph: Glyphs.NotFlip } }),\r\n  ],\r\n};\r\n\r\nexport const Olm: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"Olm\", 15, 4) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Cent } }),\r\n    child(\"Hull\", 0, 1, { appearance: { glyph: Glyphs.ResizeVertical } }),\r\n    child(\"Hull\", 0, 2, {\r\n      appearance: { glyph: Glyphs.BoxDownSingleHorizontalDouble },\r\n    }),\r\n    child(\"OlmSpray\", 0, 0),\r\n  ],\r\n};\r\n\r\nexport const GoutOFlame: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"Gout-'o-flame\", 5, 20) },\r\n  children: [\r\n    child(\"Hull\", 0, 0, { appearance: { glyph: Glyphs.Pentagon } }),\r\n    child(\"Hull\", 1, 0, {\r\n      appearance: { glyph: Glyphs.BoxVerticalDoubleHorizontalSingle },\r\n    }),\r\n    child(\"Hull\", 2, 0, { appearance: { glyph: Glyphs.Pentagon } }),\r\n    child(\"Hull\", 1, 1, {\r\n      appearance: { glyph: Glyphs.BoxUpDoubleHorizontalSingle },\r\n    }),\r\n  ],\r\n};\r\n\r\nexport const Demigod: Prefab = {\r\n  components: { ai: defaultAI, ship: ship(\"Demigod\", 30, 15) },\r\n  children: [\r\n    child(\"Hull\", 1, 0, { appearance: { glyph: Glyphs.CapitalUUmlaut } }),\r\n    child(\"Hull\", 0, 1, { appearance: { glyph: \"}\" } }),\r\n    child(\"Hull\", 1, 1, { appearance: { glyph: Glyphs.RingInvert } }),\r\n    child(\"Hull\", 2, 1, { appearance: { glyph: \"{\" } }),\r\n    child(\"Hull\", 1, 2, { appearance: { glyph: \"Y\" } }),\r\n  ],\r\n};\r\n", "import { Colors } from \"wglt\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { turret } from \"./tools\";\r\n\r\nexport const SwordBullet: Prefab = {\r\n  components: {\r\n    projectile: { damage: 5 },\r\n    appearance: {\r\n      glyph: Glyphs.Star,\r\n      layer: Layer.Bullet,\r\n      fg: Colors.LIGHT_GREEN,\r\n    },\r\n  },\r\n};\r\n\r\nexport const Sword: Prefab = {\r\n  components: {\r\n    turret: turret(\"Sword\", { salvoCount: 1, timeBetweenSalvos: 20 }, [\r\n      {\r\n        prefab: \"SwordBullet\",\r\n        angle: \"lastMovement\",\r\n        vel: 1,\r\n        beam: {\r\n          duration: 2,\r\n          appearance: [\r\n            { glyph: Glyphs.Star, fg: Colors.LIGHT_GREEN },\r\n            { glyph: \"o\", fg: Colors.LIGHT_GREEN },\r\n            { glyph: Glyphs.Diamond, fg: Colors.LIGHT_GREEN },\r\n            { glyph: Glyphs.Ring, fg: Colors.DARK_GREEN },\r\n            { glyph: Glyphs.Dot, fg: Colors.DARK_GRAY },\r\n          ],\r\n        },\r\n      },\r\n    ]),\r\n  },\r\n};\r\n", "import * as battleship from \"./battleship\";\r\nimport * as bullet from \"./bullet\";\r\nimport * as effect from \"./effect\";\r\nimport * as fighter from \"./fighter\";\r\nimport * as gun from \"./gun\";\r\nimport * as player from \"./player\";\r\nimport * as ships from \"./ships\";\r\nimport * as sword from \"./sword\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\n\r\nconst AllPrefabs = {\r\n  ...battleship,\r\n  ...bullet,\r\n  ...effect,\r\n  ...fighter,\r\n  ...gun,\r\n  ...player,\r\n  ...ships,\r\n  ...sword,\r\n};\r\n\r\nexport type PrefabName = keyof typeof AllPrefabs;\r\n\r\nexport default function instantiate(g: Engine, name: PrefabName) {\r\n  return g.add(new Entity(g, name).applyPrefab(name, AllPrefabs[name]));\r\n}\r\n", "export default function int(n?: number) {\r\n  return typeof n === \"undefined\" ? NaN : Math.floor(n);\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport function intPosition(pos: Position): Position {\r\n  return { x: int(pos.x), y: int(pos.y) };\r\n}\r\n\r\nexport function isSameCell(a?: Position, b?: Position): boolean {\r\n  if (typeof a === \"undefined\" || typeof b === \"undefined\") return false;\r\n\r\n  const ia = intPosition(a);\r\n  const ib = intPosition(b);\r\n  return ia.x === ib.x && ia.y === ib.y;\r\n}\r\n\r\nexport function addPositions(a: Position, b: Position): Position {\r\n  return { x: a.x + b.x, y: a.y + b.y };\r\n}\r\n", "import Entity from \"@app/Entity\";\r\n\r\nexport default class EntityList {\r\n  dirty: boolean;\r\n\r\n  constructor(\r\n    private compareFn: (a: Entity, b: Entity) => number,\r\n    private entities: Entity[] = []\r\n  ) {\r\n    this.dirty = true;\r\n  }\r\n\r\n  clear() {\r\n    this.entities = [];\r\n    this.dirty = false;\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.entities.push(e);\r\n    this.dirty = true;\r\n  }\r\n\r\n  clearDead() {\r\n    this.entities = this.entities.filter((i) => i.alive);\r\n  }\r\n\r\n  sort() {\r\n    this.entities.sort(this.compareFn);\r\n    this.dirty = false;\r\n  }\r\n\r\n  get() {\r\n    if (this.dirty) this.sort();\r\n    return this.entities.slice();\r\n  }\r\n}\r\n", "import { Colors, Key } from \"wglt\";\r\n\r\nimport CampaignMode from \"@app/CampaignMode\";\r\nimport Engine from \"@app/Engine\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport { Pilot } from \"@app/components\";\r\nimport PilotStat from \"@app/types/PilotStat\";\r\nimport { StatColours } from \"@app/logic/colours\";\r\nimport { angleMove } from \"@app/tools/angle\";\r\nimport { intPosition } from \"@app/tools/position\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\n\r\ntype Star = {\r\n  x: number;\r\n  y: number;\r\n  c: string;\r\n  fg: number;\r\n  angle: number;\r\n  vel: number;\r\n};\r\n\r\nexport default class MenuMode implements GameMode {\r\n  dirty!: boolean;\r\n  pilot!: Pilot;\r\n  points!: number;\r\n  starfieldCounter!: number;\r\n  stars!: Star[];\r\n\r\n  constructor(\r\n    public g: Engine,\r\n    public starfieldSpeed = 5,\r\n    public starCount = 100\r\n  ) {}\r\n\r\n  refresh() {\r\n    this.dirty = true;\r\n  }\r\n\r\n  init() {\r\n    this.dirty = true;\r\n    this.pilot = {\r\n      name: \"Player\",\r\n      difficulty: NaN,\r\n      body: 1,\r\n      mind: 1,\r\n      spirit: 1,\r\n      talent: 1,\r\n      class: [],\r\n    };\r\n    this.points = 6;\r\n\r\n    this.starfieldCounter = 0;\r\n    this.stars = [];\r\n    for (let i = 0; i < this.starCount; i++) this.stars.push(this.newStar());\r\n  }\r\n\r\n  draw() {\r\n    const { term } = this.g;\r\n\r\n    term.clear();\r\n\r\n    for (const star of this.stars) {\r\n      const { x, y } = intPosition(star);\r\n      term.drawChar(x, y, star.c, star.fg);\r\n    }\r\n\r\n    const cx = term.width / 2;\r\n\r\n    term.drawCenteredString(cx, 2, \"Bullet Hell Roguelike\", Colors.WHITE);\r\n\r\n    term.drawCenteredString(cx, 9, \"Create your Pilot\", Colors.WHITE);\r\n\r\n    term.drawCenteredString(cx, 10, `${this.points} points`, Colors.YELLOW);\r\n\r\n    const pad = 2;\r\n    const qtr = Math.floor((term.width - pad * 2) / 4);\r\n    const start = pad + qtr / 2;\r\n    this.drawStat(\"body\", start);\r\n    this.drawStat(\"mind\", start + qtr);\r\n    this.drawStat(\"spirit\", start + qtr * 2);\r\n    this.drawStat(\"talent\", start + qtr * 3);\r\n\r\n    if (this.points === 0)\r\n      term.drawCenteredString(cx, 20, \"Hit Enter to begin!\", Colors.WHITE);\r\n\r\n    this.dirty = false;\r\n  }\r\n\r\n  drawStat(stat: PilotStat, x: number) {\r\n    const { term } = this.g;\r\n\r\n    const label = `(${stat[0].toUpperCase()})${stat.slice(1)}`;\r\n    const value = this.pilot[stat];\r\n\r\n    term.drawCenteredString(x, 13, label, Colors.LIGHT_CYAN);\r\n    term.drawCenteredString(x, 14, value.toString(), StatColours[value]);\r\n  }\r\n\r\n  update() {\r\n    this.handleStarfield();\r\n    this.handleKeys();\r\n\r\n    if (this.dirty) this.draw();\r\n  }\r\n\r\n  newStar(): Star {\r\n    const { term } = this.g;\r\n\r\n    const fg = oneOf([\r\n      Colors.DARK_RED,\r\n      Colors.LIGHT_RED,\r\n      Colors.YELLOW,\r\n      Colors.LIGHT_CYAN,\r\n      Colors.WHITE,\r\n    ]);\r\n    const vel = 0.5 + Math.random();\r\n    const c = vel < 0.75 ? \".\" : vel < 1.25 ? Glyphs.Dot : \"*\";\r\n    const angle = Math.random() * Math.PI * 2;\r\n\r\n    return { x: term.width / 2, y: term.height / 2, c, fg, vel, angle };\r\n  }\r\n\r\n  handleStarfield() {\r\n    if (this.starfieldCounter < this.starfieldSpeed) {\r\n      this.starfieldCounter++;\r\n      return;\r\n    }\r\n\r\n    this.starfieldCounter = 0;\r\n    this.dirty = true;\r\n\r\n    const { width, height } = this.g.term;\r\n\r\n    for (const star of this.stars) {\r\n      const [dx, dy] = angleMove(star);\r\n      star.x += dx;\r\n      star.y += dy;\r\n\r\n      if (star.x < 0 || star.x >= width || star.y < 0 || star.y >= height)\r\n        Object.assign(star, this.newStar());\r\n    }\r\n  }\r\n\r\n  isPressed(key: Key, shift: boolean) {\r\n    const shiftDown =\r\n      this.g.term.isKeyDown(Key.VK_SHIFT_LEFT) ||\r\n      this.g.term.isKeyDown(Key.VK_SHIFT_RIGHT);\r\n    return this.g.term.isKeyPressed(key) && shift === shiftDown;\r\n  }\r\n\r\n  changeStat(stat: PilotStat, value: number) {\r\n    const newValue = this.pilot[stat] + value;\r\n\r\n    if (newValue < 1 || newValue > 6) return false;\r\n\r\n    this.points -= value;\r\n    this.pilot[stat] = newValue;\r\n    this.dirty = true;\r\n  }\r\n\r\n  handleKeys() {\r\n    if (this.points > 0) {\r\n      if (this.isPressed(Key.VK_B, false)) this.changeStat(\"body\", 1);\r\n      if (this.isPressed(Key.VK_M, false)) this.changeStat(\"mind\", 1);\r\n      if (this.isPressed(Key.VK_S, false)) this.changeStat(\"spirit\", 1);\r\n      if (this.isPressed(Key.VK_T, false)) this.changeStat(\"talent\", 1);\r\n    }\r\n\r\n    if (this.isPressed(Key.VK_B, true)) this.changeStat(\"body\", -1);\r\n    if (this.isPressed(Key.VK_M, true)) this.changeStat(\"mind\", -1);\r\n    if (this.isPressed(Key.VK_S, true)) this.changeStat(\"spirit\", -1);\r\n    if (this.isPressed(Key.VK_T, true)) this.changeStat(\"talent\", -1);\r\n\r\n    if (\r\n      this.points === 0 &&\r\n      (this.g.term.isKeyPressed(Key.VK_ENTER) ||\r\n        this.g.term.isKeyPressed(Key.VK_NUMPAD_ENTER))\r\n    )\r\n      this.g.setMode(new CampaignMode(this.g, \"PlayerShip\", this.pilot));\r\n  }\r\n}\r\n", "import { Colors, Key } from \"wglt\";\r\nimport { Pilot, Position } from \"@app/components\";\r\nimport { addPositions, isSameCell } from \"@app/tools/position\";\r\n\r\nimport CombatMode from \"@app/CombatMode\";\r\nimport Engine from \"@app/Engine\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport Grid from \"@app/Grid\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\nimport Sector from \"@app/types/Sector\";\r\nimport StarPilots from \"@app/pilots/star\";\r\nimport { initialiseShip } from \"@app/logic/enemy\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\nimport { putPilotInShip } from \"@app/logic/pilot\";\r\n\r\nexport default class CampaignMode implements GameMode {\r\n  dirty: boolean;\r\n  difficulty!: number;\r\n  space!: Grid<Sector>;\r\n  position!: Position;\r\n\r\n  constructor(\r\n    public g: Engine,\r\n    public shipPrefab: PrefabName,\r\n    public pilot: Pilot\r\n  ) {\r\n    this.dirty = true;\r\n  }\r\n\r\n  get currentSector() {\r\n    return this.space.get(this.position);\r\n  }\r\n\r\n  refresh() {\r\n    this.dirty = true;\r\n  }\r\n\r\n  init() {\r\n    const { g } = this;\r\n\r\n    g.clearEventHandlers();\r\n    g.entities.clear();\r\n    g.player = this.makePlayer();\r\n\r\n    this.difficulty = 0;\r\n    this.position = { x: 2, y: 2 };\r\n    this.space = new Grid(5, 5, () => ({ completed: false }));\r\n    const stars = new Set<Pilot>();\r\n    const freePositions = this.space\r\n      .getPositions()\r\n      .filter((pos) => !isSameCell(this.position, pos));\r\n    while (stars.size < 6) {\r\n      const star = oneOf(StarPilots);\r\n\r\n      if (!stars.has(star)) {\r\n        stars.add(star);\r\n        const position = oneOf(freePositions);\r\n        const sector = this.space.get(position);\r\n        sector.star = star;\r\n\r\n        const i = freePositions.indexOf(position);\r\n        freePositions.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    // this.startCombat();\r\n  }\r\n\r\n  startCombat() {\r\n    this.g.setMode(new CombatMode(this.g, this));\r\n  }\r\n\r\n  endCombat() {\r\n    this.currentSector.completed = true;\r\n    this.difficulty++;\r\n\r\n    // don't call setMode or we'll get initialised again\r\n    this.g.mode = this;\r\n    this.refresh();\r\n  }\r\n\r\n  makePlayer() {\r\n    const { g, shipPrefab, pilot } = this;\r\n\r\n    const e = g.spawn(shipPrefab);\r\n    if (!e.ship)\r\n      throw new Error(\r\n        `Ship prefab ${shipPrefab} doesn't have a ship component!`\r\n      );\r\n\r\n    putPilotInShip(e, pilot);\r\n    initialiseShip(e.ship);\r\n\r\n    return e;\r\n  }\r\n\r\n  draw() {\r\n    const { term } = this.g;\r\n\r\n    term.clear();\r\n\r\n    const current = this.space.get(this.position);\r\n    const cx = term.width / 2;\r\n\r\n    term.drawCenteredString(cx, 2, \"Known Space\", Colors.WHITE);\r\n\r\n    if (!current.completed)\r\n      term.drawCenteredString(cx, 4, \"Hit Enter to fight!\", Colors.WHITE);\r\n\r\n    const gridX = (term.width - 25) / 2;\r\n    const gridY = (term.height - 25) / 2;\r\n\r\n    for (let y = 0; y < 5; y++) {\r\n      const sy = gridY + y * 5;\r\n\r\n      for (let x = 0; x < 5; x++) {\r\n        const sx = gridX + x * 5;\r\n        const pos = { x, y };\r\n        const sector = this.space.get(pos);\r\n\r\n        term.fillRect(\r\n          sx,\r\n          sy,\r\n          5,\r\n          5,\r\n          \" \",\r\n          undefined,\r\n          sector.completed ? Colors.BLACK : Colors.DARK_RED\r\n        );\r\n        term.drawSingleBox(sx, sy, 5, 5, Colors.WHITE);\r\n\r\n        if (isSameCell(pos, this.position))\r\n          term.drawChar(sx + 2, sy + 2, \"@\", Colors.LIGHT_CYAN);\r\n        else if (sector.star) term.drawChar(sx + 2, sy + 2, \"*\", Colors.YELLOW);\r\n      }\r\n    }\r\n\r\n    this.dirty = false;\r\n  }\r\n\r\n  handleKeys() {\r\n    const sector = this.space.get(this.position);\r\n\r\n    if (\r\n      !sector.completed &&\r\n      (this.g.term.isKeyPressed(Key.VK_ENTER) ||\r\n        this.g.term.isKeyPressed(Key.VK_NUMPAD_ENTER))\r\n    )\r\n      this.startCombat();\r\n\r\n    const move = this.g.term.getMovementKey();\r\n    if (sector.completed && move) {\r\n      const destination = addPositions(this.position, move);\r\n      if (this.space.contains(destination)) {\r\n        this.position = destination;\r\n        this.dirty = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.handleKeys();\r\n    if (this.dirty) this.draw();\r\n  }\r\n}\r\n", "import { BlendMode, Cell, Colors, Key } from \"wglt\";\r\nimport { getEntityLayout, getEntityMidpoint } from \"@app/logic/entity\";\r\n\r\nimport AttackWave from \"@app/types/AttackWave\";\r\nimport CampaignMode from \"@app/CampaignMode\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport GameMode from \"@app/types/GameMode\";\r\nimport { Position } from \"@app/components\";\r\nimport { addSystems } from \"@app/systems\";\r\nimport { angleMove } from \"@app/tools/angle\";\r\nimport { drawExamineOverlay } from \"@app/logic/examine\";\r\nimport { fireAirFist } from \"@app/logic/airFist\";\r\nimport { getWaves } from \"./logic/enemy\";\r\nimport int from \"@app/tools/int\";\r\nimport { intPosition } from \"@app/tools/position\";\r\nimport { walkGrid } from \"@app/logic/geometry\";\r\n\r\nexport default class CombatMode implements GameMode {\r\n  dirty: boolean;\r\n  examineAt?: Position;\r\n  examining: Entity[];\r\n  showOverlay?: string;\r\n  waves!: AttackWave[];\r\n\r\n  constructor(public g: Engine, public campaign: CampaignMode) {\r\n    this.dirty = true;\r\n    this.examining = [];\r\n  }\r\n\r\n  refresh() {\r\n    this.dirty = true;\r\n  }\r\n\r\n  init() {\r\n    const { g } = this;\r\n\r\n    this.examineAt = undefined;\r\n    this.examining = [];\r\n\r\n    this.waves = getWaves();\r\n\r\n    g.blankMap();\r\n\r\n    const { width, height } = getEntityLayout(g, g.player);\r\n    g.player.move(int(g.mapWidth / 2 - width / 2), g.mapHeight - height - 4);\r\n\r\n    addSystems(g);\r\n    this.nextWave();\r\n  }\r\n\r\n  nextWave() {\r\n    const wave = this.waves.shift();\r\n    if (wave) {\r\n      const pilot =\r\n        this.waves.length === 0 ? this.campaign.currentSector.star : undefined;\r\n      this.g.fire(\"waveBegin\", {\r\n        wave,\r\n        difficulty: this.campaign.difficulty,\r\n        pilot,\r\n      });\r\n    }\r\n\r\n    // TODO out of waves?\r\n  }\r\n\r\n  draw() {\r\n    const { map, mapWidth, mapHeight, overlays, term } = this.g;\r\n\r\n    for (let y = 0; y < mapHeight; y++) {\r\n      for (let x = 0; x < mapWidth; x++) {\r\n        const cell = map.grid[y][x];\r\n\r\n        // TODO scrolling etc.\r\n        term.drawChar(x, y, 0, cell.fg, cell.bg);\r\n      }\r\n    }\r\n\r\n    this.g.fire(\"draw\", undefined);\r\n    this.dirty = false;\r\n\r\n    if (this.showOverlay) {\r\n      const overlay = overlays.get(this.showOverlay);\r\n      if (overlay) {\r\n        for (let y = 0; y < mapHeight; y++) {\r\n          for (let x = 0; x < mapWidth; x++) {\r\n            const value = overlay.get({ x, y }) || Infinity;\r\n            const ch = value === Infinity ? \"-\" : value < 10 ? `${value}` : \"*\";\r\n            term.drawChar(x, y, ch, Colors.LIGHT_RED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.examineAt) {\r\n      drawExamineOverlay(this.g, this.examineAt, this.examining);\r\n\r\n      for (const e of this.examining) {\r\n        const { motion, position } = e;\r\n        if (motion && position) {\r\n          const [dx, dy] = angleMove(motion);\r\n          const dst = { x: position.x + dx, y: position.y + dy };\r\n\r\n          const line = walkGrid(intPosition(position), intPosition(dst));\r\n\r\n          for (const pos of line)\r\n            term.drawCell(\r\n              pos.x,\r\n              pos.y,\r\n              { bg: Colors.DARK_RED } as Cell,\r\n              BlendMode.Add\r\n            );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (this.g.term.mouse.dx || this.g.term.mouse.dy) this.refresh();\r\n\r\n    this.handleKeys();\r\n\r\n    if (this.dirty) {\r\n      this.handleMouseMove();\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  examine(pos: Position) {\r\n    this.examineAt = pos;\r\n    this.dirty = true;\r\n\r\n    const { solid, other } = this.g.getContents(pos);\r\n\r\n    const set = new Set<Entity>();\r\n    if (solid) set.add(this.g.getRoot(solid));\r\n    for (const e of other) set.add(this.g.getRoot(e));\r\n\r\n    this.examining = [...set];\r\n  }\r\n\r\n  handleMouseMove() {\r\n    const { x, y } = this.g.term.mouse;\r\n    this.examine({ x, y });\r\n  }\r\n\r\n  handleKeys() {\r\n    const { player, term } = this.g;\r\n\r\n    const move = term.getMovementKey();\r\n    if (move) {\r\n      this.g.fire(\"playerMove\", { move });\r\n      return;\r\n    }\r\n\r\n    if (term.isKeyPressed(Key.VK_1)) {\r\n      this.g.fire(\"playerFire\", { array: 0 });\r\n      return;\r\n    }\r\n    if (term.isKeyPressed(Key.VK_2)) {\r\n      this.g.fire(\"playerFire\", { array: 1 });\r\n      return;\r\n    }\r\n\r\n    if (term.isKeyPressed(Key.VK_F)) {\r\n      fireAirFist(this.g, getEntityMidpoint(this.g, player), 4.5);\r\n      this.g.tick();\r\n      return;\r\n    }\r\n  }\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { Position } from \"@app/components\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\ntype LayoutEntry<T = Entity> = {\r\n  absolute: Position;\r\n  offset: Position;\r\n  entity: T;\r\n};\r\n\r\nexport function getLayoutMidpoint(\r\n  layout: LayoutEntry[],\r\n  topLeft: Position\r\n): Position {\r\n  if (!topLeft || !layout.length) throw new Error(\"Could not get midpoint\");\r\n\r\n  const avg = (key: keyof Position) =>\r\n    layout.reduce((total, { offset }) => total + offset[key], 0) /\r\n    layout.length;\r\n\r\n  return { x: topLeft.x + avg(\"x\"), y: topLeft.y + avg(\"y\") };\r\n}\r\n\r\nexport function getLayoutBlockers(\r\n  g: Engine,\r\n  layout: LayoutEntry[],\r\n  topLeft: Position,\r\n  ignoreSolid: number[] = []\r\n): LayoutEntry<Entity | \"wall\">[] {\r\n  const blockers: LayoutEntry<Entity | \"wall\">[] = [];\r\n\r\n  for (const { offset } of layout) {\r\n    const pos = addPositions(topLeft, offset);\r\n    const { wall, solid } = g.getContents(pos, ignoreSolid);\r\n    if (wall) blockers.push({ absolute: pos, offset, entity: \"wall\" });\r\n    else if (solid) blockers.push({ absolute: pos, offset, entity: solid });\r\n  }\r\n\r\n  return blockers;\r\n}\r\n\r\nexport function getEntityTree(g: Engine, e: Entity) {\r\n  const root = g.getRoot(e);\r\n  return g.entities.get().filter((x) => g.getRoot(x) === root);\r\n}\r\n\r\nexport function getEntityTreeIDs(g: Engine, e: Entity) {\r\n  return getEntityTree(g, e).map((x) => x.id);\r\n}\r\n\r\nexport function getEntityLayout(g: Engine, e: Entity) {\r\n  const topLeft = g.getRoot(e).position ?? { x: 0, y: 0 };\r\n\r\n  const parts = getEntityTree(g, e);\r\n  const layout: LayoutEntry[] = [];\r\n  let width = 0;\r\n  let height = 0;\r\n\r\n  for (const part of parts) {\r\n    const { attachment, solid } = part;\r\n\r\n    if (attachment && solid) {\r\n      const { x, y } = attachment;\r\n\r\n      layout.push({\r\n        absolute: addPositions(topLeft, attachment),\r\n        offset: { x, y },\r\n        entity: part,\r\n      });\r\n\r\n      width = Math.max(x + 1, width);\r\n      height = Math.max(y + 1, height);\r\n    }\r\n  }\r\n\r\n  return { layout, topLeft, width, height };\r\n}\r\n\r\nexport function getEntityBlockers(g: Engine, e: Entity, origin?: Position) {\r\n  const ignoreSolid = getEntityTreeIDs(g, e);\r\n  const { layout, topLeft } = getEntityLayout(g, e);\r\n  if (!origin || !topLeft) return [];\r\n\r\n  return getLayoutBlockers(g, layout, origin || topLeft, ignoreSolid);\r\n}\r\n\r\nexport function getEntityMidpoint(g: Engine, e: Entity): Position {\r\n  const { layout, topLeft } = getEntityLayout(g, e);\r\n\r\n  if (!topLeft || !layout.length)\r\n    throw new Error(`Could not get midpoint of entity#${e.id}`);\r\n\r\n  return getLayoutMidpoint(layout, topLeft);\r\n}\r\n\r\nexport function isSpaceFree(\r\n  g: Engine,\r\n  sx: number,\r\n  sy: number,\r\n  w: number,\r\n  h: number\r\n) {\r\n  for (let y = 0; y < h; y++)\r\n    for (let x = 0; x < w; x++) {\r\n      const { oob, wall, solid, other } = g.getContents({\r\n        x: sx + x,\r\n        y: sy + y,\r\n      });\r\n      if (oob || wall || solid || other.length) return false;\r\n    }\r\n\r\n  return true;\r\n}\r\n", "import { ComponentMap, EntityAttribute } from \"@app/components\";\r\n\r\nimport Entity from \"@app/Entity\";\r\nimport EntityList from \"@app/EntityList\";\r\n\r\nexport type HasComponents<T extends EntityAttribute[]> = Pick<\r\n  ComponentMap,\r\n  T[number]\r\n> &\r\n  Partial<ComponentMap>;\r\n\r\nexport type QueryCallback<T extends EntityAttribute[]> = (\r\n  components: HasComponents<T>,\r\n  e: Entity\r\n) => void;\r\n\r\nexport default class Query<T extends EntityAttribute[]> {\r\n  constructor(private list: EntityList, private filter: T) {}\r\n\r\n  matches(e: Entity) {\r\n    if (!e.alive) return false;\r\n\r\n    for (const key of this.filter) {\r\n      if (!e[key]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  forEach(cb: QueryCallback<T>) {\r\n    for (const e of this.list.get()) {\r\n      if (this.matches(e)) cb(e as HasComponents<T>, e);\r\n    }\r\n  }\r\n}\r\n", "import { Motion, Position } from \"@app/components\";\r\n\r\nconst tau = Math.PI * 2;\r\n\r\nexport function angleBetween(a: Position, b: Position) {\r\n  return Math.atan2(b.y - a.y, b.x - a.x);\r\n}\r\n\r\nexport function angleDiff(x: number, y: number) {\r\n  const a = (x - y) % tau;\r\n  const b = (y - x) % tau;\r\n\r\n  return a < b ? -a : b;\r\n}\r\n\r\nexport function angleMove(mo: Motion): [dx: number, dy: number] {\r\n  const dx = Math.cos(mo.angle) * mo.vel;\r\n  const dy = Math.sin(mo.angle) * mo.vel;\r\n  return [dx, dy];\r\n}\r\n\r\nexport function angleWrap(angle: number) {\r\n  while (angle < 0) angle += tau;\r\n  return angle;\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\nexport const neighbourOffsets: Position[] = [\r\n  { x: -1, y: -1 },\r\n  { x: -1, y: 0 },\r\n  { x: -1, y: 1 },\r\n  { x: 0, y: 1 },\r\n  { x: 1, y: 1 },\r\n  { x: 1, y: 0 },\r\n  { x: 1, y: -1 },\r\n  { x: 0, y: -1 },\r\n];\r\n\r\nexport default function neighbours(pos: Position): Position[] {\r\n  return neighbourOffsets.map((o) => addPositions(pos, o));\r\n}\r\n", "export default function oneOf<T>(items: readonly T[]): T {\r\n  if (!items.length) throw new Error(\"oneOf passed empty array\");\r\n\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n", "import { addPositions, intPosition } from \"@app/tools/position\";\r\nimport { getEntityLayout, getEntityTreeIDs } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { Position } from \"@app/components\";\r\nimport Query from \"@app/Query\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\nimport { neighbourOffsets } from \"@app/logic/neighbours\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\n\r\nexport default function addAI(g: Engine) {\r\n  const query = new Query(g.entities, [\"ai\", \"position\"]);\r\n  g.on(\"tick\", function MoveEnemies() {\r\n    query.forEach(({ ai, position: rawPosition }, e) => {\r\n      e.setLastMovement();\r\n\r\n      // TODO something better than this?\r\n      if (!ai.attacking) {\r\n        ai.attacking = g.player;\r\n        g.fire(\"notice\", { e, noticed: g.player });\r\n      }\r\n\r\n      const ignoreSolid = getEntityTreeIDs(g, e);\r\n      const { layout } = getEntityLayout(g, e);\r\n      const position = intPosition(rawPosition);\r\n\r\n      const search = g.getDistanceMap(ai.attacking);\r\n\r\n      const isPassable = (pos: Position) => {\r\n        const { oob, solid, wall } = g.getContents(pos, ignoreSolid);\r\n        return !oob && !solid && !wall;\r\n      };\r\n\r\n      const getPosScore = (pos: Position) =>\r\n        isPassable(pos)\r\n          ? Math.abs(search.getOrDefault(pos, Infinity) - ai.idealDistance)\r\n          : Infinity;\r\n\r\n      const getScore = (pos: Position) =>\r\n        layout.reduce(\r\n          (a, { offset }) => a + getPosScore(addPositions(pos, offset)),\r\n          0\r\n        ) / layout.length;\r\n\r\n      let bestScore = getScore(position);\r\n\r\n      let possibilities: Position[] = [];\r\n      for (const offset of neighbourOffsets) {\r\n        const possibility = addPositions(position, offset);\r\n        if (!search.has(possibility)) continue;\r\n\r\n        const score = getScore(possibility);\r\n        if (score < bestScore) {\r\n          bestScore = score;\r\n          possibilities = [possibility];\r\n        } else if (score === bestScore) possibilities.push(possibility);\r\n      }\r\n\r\n      if (possibilities.length) {\r\n        const destination = oneOf(possibilities);\r\n        e.move(destination.x, destination.y);\r\n        e.setLastMovement({ angle: angleBetween(position, destination) });\r\n        return;\r\n      }\r\n    });\r\n  });\r\n\r\n  g.on(\"damage\", function AIReactsTODamage({ e, source }) {\r\n    if (!source.owner) return;\r\n    if (e === source.owner) return;\r\n\r\n    if (e.ai && !e.ai.attacking && source.owner.alive)\r\n      e.ai.attacking = source.owner;\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport default function addDisplay(g: Engine) {\r\n  const query = new Query(g.entities, [\"appearance\", \"position\"]);\r\n  g.on(\"draw\", function DrawEntities() {\r\n    query.forEach(({ appearance, position }) =>\r\n      g.drawIfVisible(\r\n        int(position.x),\r\n        int(position.y),\r\n        appearance.glyph,\r\n        appearance.fg,\r\n        appearance.bg,\r\n        appearance.blendMode\r\n      )\r\n    );\r\n  });\r\n}\r\n", "import { Appearance, Field, Position } from \"@app/components\";\r\n\r\nimport { BlendMode } from \"wglt\";\r\nimport FieldType from \"@app/types/FieldType\";\r\nimport GradientRun from \"@app/GradientRun\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport distance from \"@app/tools/distance\";\r\n\r\nexport type FieldCell = { x: number; y: number; intensity: number };\r\n\r\nconst fieldGradients: Record<FieldType, GradientRun> = {\r\n  fire: new GradientRun([\r\n    [0, [0, 0, 0, 0]],\r\n    [2, [255, 0, 0, 150]],\r\n    [4, [255, 255, 0, 150]],\r\n    [6, [255, 255, 255, 150]],\r\n    [10, [255, 255, 255, 255]],\r\n  ]),\r\n};\r\n\r\nexport function getFieldAppearance(field: Field): Appearance | undefined {\r\n  if (field.intensity <= 0) return undefined;\r\n\r\n  return {\r\n    glyph: \" \",\r\n    layer: Layer.Effect,\r\n    bg: fieldGradients[field.type].get(field.intensity),\r\n    blendMode: BlendMode.Add,\r\n  };\r\n}\r\n\r\n// TODO shape around walls lol\r\nexport function generateField(centre: Position, size: number) {\r\n  const parts: FieldCell[] = [];\r\n\r\n  const minX = Math.floor(centre.x - size);\r\n  const maxX = Math.ceil(centre.x + size);\r\n  const minY = Math.floor(centre.y - size);\r\n  const maxY = Math.ceil(centre.y + size);\r\n\r\n  for (let y = minY; y <= maxY; y++) {\r\n    for (let x = minX; x <= maxX; x++) {\r\n      const dist = distance(centre, { x, y });\r\n      if (dist >= size) continue;\r\n\r\n      parts.push({ x, y, intensity: size - dist });\r\n    }\r\n  }\r\n\r\n  return parts;\r\n}\r\n", "import RGBA from \"@app/types/RGBA\";\r\nimport { fromRgb } from \"wglt\";\r\nimport lerp from \"@app/tools/lerp\";\r\n\r\ntype GradientPoint = [breakpoint: number, colour: RGBA];\r\n\r\nexport default class GradientRun {\r\n  constructor(public points: GradientPoint[]) {\r\n    this.sort();\r\n  }\r\n\r\n  private sort() {\r\n    this.points.sort(([a], [b]) => a - b);\r\n  }\r\n\r\n  add(breakpoint: number, c: RGBA): this {\r\n    this.points.push([breakpoint, c]);\r\n    this.sort();\r\n    return this;\r\n  }\r\n\r\n  get(value: number) {\r\n    const [low, lowColour] = this.points[0];\r\n    if (value <= low) return fromRgb(...lowColour);\r\n\r\n    const [high, highColour] = this.points[this.points.length - 1];\r\n    if (value >= high) return fromRgb(...highColour);\r\n\r\n    const higherIndex = this.points.findIndex(([p]) => p > value);\r\n    const [below, [ar, ag, ab, aa]] = this.points[higherIndex - 1];\r\n    const [above, [br, bg, bb, ba]] = this.points[higherIndex];\r\n\r\n    const r = (value - below) / (above - below);\r\n    return fromRgb(\r\n      lerp(ar, br, r),\r\n      lerp(ag, bg, r),\r\n      lerp(ab, bb, r),\r\n      lerp(aa, ba, r)\r\n    );\r\n  }\r\n}\r\n", "export default function lerp(start: number, end: number, t: number) {\r\n  return start * (1.0 - t) + end * t;\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\nexport default function distance(a: Position, b: Position) {\r\n  const dx = Math.abs(a.x - b.x);\r\n  const dy = Math.abs(a.y - b.y);\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { generateField } from \"@app/logic/field\";\r\n\r\nexport default function addExplosives(g: Engine) {\r\n  g.on(\"kill\", function CreateExplosion({ e, reason }) {\r\n    if (reason.type === \"exitedMap\") return;\r\n\r\n    const { explodes, name, position } = e;\r\n\r\n    if (explodes && position) {\r\n      for (const { x, y, intensity } of generateField(position, explodes.size))\r\n        g.add(\r\n          new Entity(g, name + \"Explosion\").setPosition({ x, y }).setField({\r\n            type: \"fire\",\r\n            intensity,\r\n            falloff: explodes.falloff,\r\n          })\r\n        );\r\n    }\r\n  });\r\n}\r\n", "import DamageSource from \"@app/types/DamageSource\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\n\r\nexport default function damage(\r\n  g: Engine,\r\n  hit: Entity,\r\n  amount: number,\r\n  inflicter: Entity\r\n) {\r\n  const e = g.getRoot(hit);\r\n  if (!e.ship) return;\r\n\r\n  let damageToHp = amount;\r\n\r\n  if (e.ship.shield > 0) {\r\n    if (e.ship.shield > amount) {\r\n      e.ship.shield -= amount;\r\n      damageToHp = 0;\r\n    } else {\r\n      damageToHp -= e.ship.shield;\r\n      e.ship.shield = 0;\r\n    }\r\n  }\r\n  if (damageToHp) e.ship.hp -= damageToHp;\r\n\r\n  const source: DamageSource = { e: inflicter, owner: inflicter };\r\n  if (inflicter.origin) {\r\n    source.owner = inflicter.origin.owner;\r\n    source.ship = inflicter.origin.ship;\r\n    source.turret = inflicter.origin.turret;\r\n  }\r\n\r\n  console.log(inflicter.name, \"hits\", e.name, \"for\", amount);\r\n  g.fire(\"damage\", { e, amount, source });\r\n\r\n  if (e.ship.hp <= 0) g.kill(e, { type: \"damage\", source });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport damage from \"@app/logic/damage\";\r\nimport { getEntityLayout } from \"@app/logic/entity\";\r\nimport { getFieldAppearance } from \"@app/logic/field\";\r\nimport { isSameCell } from \"@app/tools/position\";\r\n\r\nexport default function addFields(g: Engine) {\r\n  const ships = new Query(g.entities, [\"ship\"]);\r\n  const query = new Query(g.entities, [\"field\", \"position\"]);\r\n  g.on(\"tick\", function ApplyFields() {\r\n    query.forEach(({ field, position }, e) => {\r\n      field.intensity -= field.falloff;\r\n      e.setAppearance(getFieldAppearance(field));\r\n\r\n      if (field.intensity <= 0) g.kill(e, { type: \"expired\" });\r\n      else\r\n        ships.forEach((_, victim) => {\r\n          const { layout } = getEntityLayout(g, victim);\r\n          const hit = layout.find(({ absolute }) =>\r\n            isSameCell(absolute, position)\r\n          );\r\n          if (hit) damage(g, victim, field.intensity, e);\r\n        });\r\n    });\r\n  });\r\n  g.on(\"spawn\", function InitialiseField({ e }) {\r\n    if (e.field) e.setAppearance(getFieldAppearance(e.field));\r\n  });\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Engine from \"@app/Engine\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport PilotInfo from \"@app/ui/PilotInfo\";\r\nimport ShipInfo from \"@app/ui/ShipInfo\";\r\nimport WeaponInfo from \"@app/ui/WeaponInfo\";\r\nimport { getEntityTree } from \"@app/logic/entity\";\r\nimport pluralise from \"@app/tools/pluralise\";\r\n\r\nexport const HUD_HEIGHT = 6;\r\n\r\nexport default function addHUD(g: Engine) {\r\n  const { mapHeight, term } = g;\r\n\r\n  g.on(\"draw\", function DrawHUD() {\r\n    const player = g.player;\r\n    const { pilot, ship } = player;\r\n\r\n    term.fillRect(\r\n      0,\r\n      mapHeight,\r\n      term.width,\r\n      HUD_HEIGHT,\r\n      \" \",\r\n      Colors.WHITE,\r\n      Colors.BLACK\r\n    );\r\n    term.drawSingleBox(0, mapHeight, term.width, HUD_HEIGHT);\r\n\r\n    let x = 1;\r\n    const y = mapHeight + 1;\r\n\r\n    const shipInfo = new ShipInfo(g, ship!);\r\n    shipInfo.draw(x, y);\r\n\r\n    const statX = x + Math.floor((shipInfo.width - 11) / 2);\r\n    const pilotInfo = new PilotInfo(g, pilot!, false);\r\n    pilotInfo.draw(statX, y + 3);\r\n\r\n    x += shipInfo.width + 1;\r\n    term.drawChar(\r\n      x - 1,\r\n      y - 1,\r\n      Glyphs.BoxDownSingleHorizontalSingle,\r\n      Colors.WHITE\r\n    );\r\n    term.drawVLine(\r\n      x - 1,\r\n      y,\r\n      HUD_HEIGHT - 2,\r\n      Glyphs.BoxVerticalSingle,\r\n      Colors.WHITE\r\n    );\r\n    term.drawChar(\r\n      x - 1,\r\n      y + HUD_HEIGHT - 2,\r\n      Glyphs.BoxUpSingleHorizontalSingle,\r\n      Colors.WHITE\r\n    );\r\n\r\n    let wx = x;\r\n    for (const tag of player.player!.weaponArrays) {\r\n      const sx = wx;\r\n      const weapons = getEntityTree(g, player).filter(\r\n        (e) => e.turret && e.tags.has(tag)\r\n      );\r\n      for (const weapon of weapons) {\r\n        const weaponInfo = new WeaponInfo(g, weapon.turret!);\r\n        weaponInfo.draw(wx, y + 1);\r\n        wx += weaponInfo.width + 1;\r\n      }\r\n\r\n      term.drawString(sx, y, tag, Colors.LIGHT_CYAN);\r\n\r\n      wx = Math.max(wx, sx + tag.length + 1);\r\n    }\r\n  });\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Drawable from \"@app/types/Drawable\";\r\nimport Engine from \"@app/Engine\";\r\nimport { Pilot } from \"@app/components\";\r\nimport PilotStat from \"@app/types/PilotStat\";\r\nimport { StatColours } from \"@app/logic/colours\";\r\n\r\nexport default class PilotInfo implements Drawable {\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor(public g: Engine, public pilot: Pilot, public full: boolean) {\r\n    this.width = 11;\r\n    this.height = full ? 2 + pilot.class.length : 1;\r\n  }\r\n\r\n  get isPlayer() {\r\n    return isNaN(this.pilot.difficulty);\r\n  }\r\n\r\n  draw(x: number, y: number) {\r\n    if (this.full) {\r\n      this.g.term.drawString(\r\n        x,\r\n        y,\r\n        this.pilot.name,\r\n        this.pilot.star ? Colors.YELLOW : Colors.LIGHT_GRAY\r\n      );\r\n      y++;\r\n    }\r\n\r\n    this.drawStat(x, y, \"body\");\r\n    this.drawStat(x + 3, y, \"mind\");\r\n    this.drawStat(x + 6, y, \"spirit\");\r\n    this.drawStat(x + 9, y, \"talent\");\r\n\r\n    if (!this.full) return;\r\n\r\n    for (const cl of this.pilot.class)\r\n      this.g.term.drawString(x, ++y, cl, Colors.LIGHT_GREEN);\r\n  }\r\n\r\n  drawStat(x: number, y: number, stat: PilotStat) {\r\n    const value = this.pilot[stat];\r\n    this.g.term.drawChar(x, y, stat[0].toUpperCase(), Colors.WHITE);\r\n    this.g.term.drawChar(x + 1, y, value.toString(), StatColours[value]);\r\n  }\r\n}\r\n", "import { Colors } from \"wglt\";\r\n\r\nexport const StatColours = [\r\n  0,\r\n  Colors.DARK_RED,\r\n  Colors.BROWN,\r\n  Colors.LIGHT_RED,\r\n  Colors.ORANGE,\r\n  Colors.YELLOW,\r\n  Colors.WHITE,\r\n];\r\n", "import { Colors } from \"wglt\";\r\nimport Drawable from \"@app/types/Drawable\";\r\nimport Engine from \"@app/Engine\";\r\nimport { Ship } from \"@app/components\";\r\nimport { drawBar } from \"@app/logic/graphics\";\r\n\r\nexport default class ShipInfo implements Drawable {\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor(public g: Engine, public ship: Ship) {\r\n    this.width = Math.max(13, ship.name.length);\r\n    this.height = ship.maxShield ? 3 : 2;\r\n  }\r\n\r\n  draw(x: number, y: number) {\r\n    const { ship, width } = this;\r\n    const { term } = this.g;\r\n\r\n    const barLength = width - 3;\r\n\r\n    term.drawString(x, y, ship.name, Colors.WHITE);\r\n\r\n    term.drawString(x, y + 1, \"HP:\", Colors.WHITE);\r\n    drawBar(\r\n      term,\r\n      x + 3,\r\n      y + 1,\r\n      barLength,\r\n      ship.hp,\r\n      ship.maxHp,\r\n      Colors.DARK_GREEN,\r\n      Colors.DARK_RED,\r\n      Colors.WHITE\r\n    );\r\n\r\n    if (ship.maxShield) {\r\n      term.drawString(x, y + 2, \"Sh:\", Colors.WHITE);\r\n      drawBar(\r\n        term,\r\n        x + 3,\r\n        y + 2,\r\n        barLength,\r\n        ship.shield,\r\n        ship.maxShield,\r\n        Colors.DARK_CYAN,\r\n        Colors.LIGHT_BLUE,\r\n        Colors.WHITE\r\n      );\r\n    }\r\n  }\r\n}\r\n", "import { Terminal } from \"wglt\";\r\n\r\nexport function drawBar(\r\n  term: Terminal,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  val: number,\r\n  max: number,\r\n  filledBg: number,\r\n  emptyBg: number,\r\n  textFg: number\r\n) {\r\n  const label = `${Math.ceil(val)}/${max}`;\r\n  const length = Math.floor((val / max) * width);\r\n\r\n  term.drawHLine(x, y, width, \" \", undefined, emptyBg);\r\n  if (length) term.drawHLine(x, y, length, \" \", undefined, filledBg);\r\n  term.drawCenteredString(x + width / 2, y, label, textFg);\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Drawable from \"@app/types/Drawable\";\r\nimport Engine from \"@app/Engine\";\r\nimport { Turret } from \"@app/components\";\r\nimport { getState } from \"@app/logic/turret\";\r\n\r\nconst StateColours = {\r\n  Spent: Colors.DARK_GRAY,\r\n  Reloading: Colors.LIGHT_RED,\r\n  Ready: Colors.YELLOW,\r\n  Chambering: Colors.BROWN,\r\n};\r\n\r\nexport default class WeaponInfo implements Drawable {\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor(public g: Engine, public turret: Turret) {\r\n    this.width = Math.max(turret.name.length, this.stateLabel.length);\r\n    this.height = 2;\r\n\r\n    if (turret.ammunition > 0 && turret.ammunition < Infinity) this.height++;\r\n  }\r\n\r\n  get stateLabel() {\r\n    const { timer, salvo, salvoCount } = this.turret;\r\n\r\n    const state = getState(this.turret);\r\n    if (state === \"Spent\") return \"Out of Ammo\";\r\n    if (state === \"Reloading\") return `Reloading (${timer})`;\r\n\r\n    const ammo = `${salvo}/${salvoCount}`;\r\n    return state === \"Ready\" ? ammo : `${ammo} (${timer})`;\r\n  }\r\n\r\n  draw(x: number, y: number) {\r\n    this.g.term.drawString(x, y, this.turret.name, Colors.WHITE);\r\n\r\n    const state = getState(this.turret);\r\n    this.g.term.drawString(x, y + 1, this.stateLabel, StateColours[state]);\r\n\r\n    if (this.height > 2)\r\n      this.g.term.drawString(\r\n        x,\r\n        y + 2,\r\n        `${this.turret.ammunition} ammo left`,\r\n        Colors.LIGHT_GRAY\r\n      );\r\n  }\r\n}\r\n", "import { Appearance, Pilot, Ship } from \"@app/components\";\r\nimport { getEntityLayout, getEntityTree, isSpaceFree } from \"@app/logic/entity\";\r\n\r\nimport AttackWave from \"@app/types/AttackWave\";\r\nimport { Colors } from \"wglt\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { PilotClasses } from \"@app/types/PilotClass\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\nimport ShipPower from \"@app/types/ShipPower\";\r\nimport { clone } from \"@app/tools/object\";\r\nimport enumerate from \"@app/tools/enumerate\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\nimport { putPilotInShip } from \"@app/logic/pilot\";\r\nimport shuffle from \"@app/tools/shuffle\";\r\n\r\nenum EnemyFlags {\r\n  None = 0,\r\n  Healthy = 1,\r\n  Double = 2,\r\n  Drain = 4,\r\n  HasPilot = 8,\r\n}\r\n\r\nconst PowerAppearancePatch: Record<ShipPower, Partial<Appearance>> = {\r\n  Typical: { fg: Colors.DARK_GRAY },\r\n  Healthy: { fg: Colors.DARK_GREEN },\r\n  Double: { fg: Colors.LIGHT_GRAY },\r\n  Multi: { fg: Colors.DARK_MAGENTA },\r\n\r\n  Drain: { fg: Colors.DARK_RED },\r\n  StarPilot: { fg: Colors.YELLOW },\r\n  Mega: { fg: Colors.BLACK, bg: Colors.DARK_MAGENTA },\r\n};\r\n\r\nconst PowerToFlags: Record<ShipPower, EnemyFlags> = {\r\n  Typical: EnemyFlags.None,\r\n  Healthy: EnemyFlags.Healthy,\r\n  Double: EnemyFlags.Double,\r\n  Multi: EnemyFlags.Healthy | EnemyFlags.Double,\r\n\r\n  Drain: EnemyFlags.Drain,\r\n  StarPilot: EnemyFlags.HasPilot,\r\n  Mega:\r\n    EnemyFlags.Healthy |\r\n    EnemyFlags.Double |\r\n    EnemyFlags.Drain |\r\n    EnemyFlags.HasPilot,\r\n};\r\n\r\nconst typeA: PrefabName[] = [\"ShipA\", \"ShipB\", \"ShipC\"];\r\n\r\nconst typeB: PrefabName[] = [\"ShipD\", \"DroneA\"];\r\n\r\nconst typeC: PrefabName[] = [\"ShipB\", \"ShipD\"];\r\n\r\nconst waves: AttackWave[] = [\r\n  {\r\n    difficulty: 1,\r\n    escorts: 5,\r\n    escortTypes: typeA,\r\n    flagships: 1,\r\n    flagshipTypes: [\"Olm\"],\r\n  },\r\n  {\r\n    difficulty: 2,\r\n    escorts: 6,\r\n    escortTypes: typeB,\r\n    flagships: 1,\r\n    flagshipTypes: [\"CruiseyWing\"],\r\n  },\r\n  {\r\n    difficulty: 3,\r\n    escorts: 7,\r\n    escortTypes: typeC,\r\n    flagships: 2,\r\n    flagshipTypes: [\"Olm\"],\r\n  },\r\n];\r\n\r\nexport function getWaves(count = 3) {\r\n  return shuffle(waves.slice())\r\n    .slice(0, count)\r\n    .sort((a, b) => a.difficulty - b.difficulty);\r\n}\r\n\r\nexport function getShipPower(\r\n  specialChance: number,\r\n  starPilot: boolean\r\n): ShipPower {\r\n  if (Math.random() * 100 >= specialChance)\r\n    return starPilot ? \"StarPilot\" : \"Typical\";\r\n\r\n  if (starPilot) return \"Mega\";\r\n\r\n  return oneOf([\"Healthy\", \"Double\", \"Multi\", \"Drain\"]);\r\n}\r\n\r\nexport function makePilot(basePilot: Pilot) {\r\n  const pilot = clone(basePilot);\r\n\r\n  // give random classes up to Talent limit\r\n  while (pilot.class.length < pilot.talent)\r\n    pilot.class.push(\r\n      oneOf(PilotClasses.filter((cl) => !pilot.class.includes(cl)))\r\n    );\r\n\r\n  return pilot;\r\n}\r\n\r\nexport function makeEnemy(\r\n  g: Engine,\r\n  prefab: PrefabName,\r\n  power: ShipPower,\r\n  basePilot?: Pilot\r\n) {\r\n  const flags = PowerToFlags[power];\r\n  if (flags & EnemyFlags.HasPilot && !basePilot)\r\n    throw new Error(`power ${power} needs pilot, none given`);\r\n\r\n  const e = g.spawn(prefab);\r\n  const { ship } = e;\r\n  if (!ship)\r\n    throw new Error(`Ship prefab ${prefab} doesn't have a ship component!`);\r\n\r\n  if (flags & EnemyFlags.Healthy) ship.maxHp = ship.maxHp * 2 + 3;\r\n\r\n  if (basePilot) {\r\n    const pilot = makePilot(basePilot);\r\n    putPilotInShip(e, pilot);\r\n  }\r\n\r\n  initialiseShip(ship);\r\n\r\n  const appearance = PowerAppearancePatch[power];\r\n  for (const part of getEntityTree(g, e)) {\r\n    if (part.appearance) Object.assign(part.appearance, appearance);\r\n  }\r\n\r\n  return e;\r\n}\r\n\r\nexport function findSpawnPosition(g: Engine, e: Entity) {\r\n  const { width, height } = getEntityLayout(g, e);\r\n\r\n  for (let y = 0; y < g.term.height; y++) {\r\n    const xList = shuffle(enumerate(g.term.width - width));\r\n\r\n    for (const x of xList) {\r\n      if (isSpaceFree(g, x, y, width, height)) return { x, y };\r\n    }\r\n  }\r\n\r\n  throw new Error(`Could not find ${width}x${height} spawn location`);\r\n}\r\n\r\nexport function initialiseShip(ship: Ship) {\r\n  ship.hp = ship.maxHp;\r\n  ship.shield = ship.maxShield;\r\n}\r\n", "export const PilotClasses = [\r\n  \"Berserker\",\r\n  \"Chopter\",\r\n  \"Duelist\",\r\n  \"Engineer\",\r\n  \"Fighter\",\r\n  \"Negotiator\",\r\n  \"Psychic\",\r\n  \"Smuggler\",\r\n] as const;\r\ntype PilotClass = (typeof PilotClasses)[number];\r\nexport default PilotClass;\r\n", "export default function enumerate(max: number, min = 0) {\r\n  const items: number[] = [];\r\n  for (let i = min; i < max; i++) items.push(i);\r\n  return items;\r\n}\r\n", "import Entity from \"@app/Entity\";\r\nimport { Pilot } from \"@app/components\";\r\n\r\nexport function putPilotInShip(e: Entity, pilot: Pilot) {\r\n  const { ship } = e;\r\n\r\n  if (!ship)\r\n    throw new Error(`Cannot put pilot into entity ${e.name} (no ship)`);\r\n\r\n  e.setPilot(pilot);\r\n  ship.maxHp += pilot.body;\r\n}\r\n", "export default function shuffle<T>(array: T[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n\r\n  return array;\r\n}\r\n", "import { Position, Turret } from \"@app/components\";\r\nimport { angleBetween, angleMove } from \"@app/tools/angle\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\nimport { TurretBullet } from \"@app/components/Turret\";\r\nimport { addPositions } from \"@app/tools/position\";\r\nimport { initialiseShip } from \"@app/logic/enemy\";\r\n\r\nexport function getState(turret: Turret) {\r\n  if (turret.salvo <= 0) {\r\n    if (turret.ammunition <= 0) return \"Spent\";\r\n    return \"Reloading\";\r\n  }\r\n  if (turret.timer > 0) return \"Chambering\";\r\n  return \"Ready\";\r\n}\r\n\r\nexport function advanceTimer(turret: Turret) {\r\n  if (turret.timer > 0) {\r\n    turret.timer--;\r\n    if (turret.timer <= 0 && turret.salvo <= 0) {\r\n      if (turret.ammunition) {\r\n        turret.salvo = Math.min(turret.salvoCount, turret.ammunition);\r\n        turret.ammunition -= turret.salvo;\r\n      } else turret.timer = Infinity;\r\n    }\r\n  }\r\n}\r\n\r\nexport function canFire(turret: Turret, owner: Entity) {\r\n  if (\r\n    turret.bullets.find((b) => b.angle === \"lastMovement\") &&\r\n    !owner.lastMovement\r\n  )\r\n    return false;\r\n  return turret.timer === 0;\r\n}\r\n\r\nfunction initBullet(\r\n  g: Engine,\r\n  prefab: PrefabName,\r\n  owner: Entity,\r\n  turret: Turret,\r\n  start: Position,\r\n  angle: number,\r\n  vel: number,\r\n  ignoreIds: number[]\r\n) {\r\n  const bullet = g\r\n    .spawn(prefab)\r\n    .setIgnoreSolid({ ids: ignoreIds })\r\n    .move(start.x, start.y);\r\n\r\n  if (vel) bullet.setMotion({ angle, vel });\r\n\r\n  if (bullet.ship) initialiseShip(bullet.ship);\r\n\r\n  if (owner.ship) bullet.setOrigin({ owner, ship: owner.ship, turret });\r\n\r\n  return bullet;\r\n}\r\n\r\nfunction fireBullet(\r\n  g: Engine,\r\n  b: TurretBullet,\r\n  turret: Turret,\r\n  position: Position,\r\n  target: Position,\r\n  owner: Entity,\r\n  ignoreIds: number[]\r\n) {\r\n  const { angle: angleCmd, beam, offset, prefab, vel } = b;\r\n\r\n  const start = addPositions(position, offset ?? { x: 0.5, y: 0.5 });\r\n  const angle =\r\n    angleCmd === \"nearestEnemy\"\r\n      ? angleBetween(start, target)\r\n      : angleCmd === \"lastMovement\"\r\n      ? owner.lastMovement!.angle\r\n      : angleCmd;\r\n\r\n  if (beam && vel) {\r\n    const [dx, dy] = angleMove({ angle, vel });\r\n    const step = { x: dx, y: dy };\r\n    let position = addPositions(start, step);\r\n\r\n    return beam.appearance.map((patch) => {\r\n      const bullet = initBullet(\r\n        g,\r\n        prefab,\r\n        owner,\r\n        turret,\r\n        position,\r\n        angle,\r\n        0,\r\n        ignoreIds\r\n      ).setLifetime({ duration: beam.duration });\r\n      if (bullet.appearance) Object.assign(bullet.appearance, patch);\r\n      if (owner.ship) bullet.setOrigin({ owner, ship: owner.ship, turret });\r\n\r\n      position = addPositions(position, step);\r\n\r\n      return bullet;\r\n    });\r\n  }\r\n\r\n  return [initBullet(g, prefab, owner, turret, start, angle, vel, ignoreIds)];\r\n}\r\n\r\nexport function fire(\r\n  g: Engine,\r\n  turret: Turret,\r\n  position: Position,\r\n  target: Position,\r\n  owner: Entity,\r\n  ignoreIds: number[] = []\r\n) {\r\n  const { timeBetweenSalvos, timeBetweenShots } = turret;\r\n\r\n  if (--turret.salvo <= 0) turret.timer = timeBetweenSalvos;\r\n  else turret.timer = timeBetweenShots;\r\n\r\n  const bullets: Entity[] = [];\r\n\r\n  for (const bullet of turret.bullets)\r\n    bullets.push(\r\n      ...fireBullet(g, bullet, turret, position, target, owner, ignoreIds)\r\n    );\r\n\r\n  return bullets;\r\n}\r\n", "import { angleBetween, angleDiff } from \"@app/tools/angle\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { getEntityMidpoint } from \"@app/logic/entity\";\r\n\r\nexport default function addHoming(g: Engine) {\r\n  const query = new Query(g.entities, [\"homing\", \"motion\", \"position\"]);\r\n  g.on(\"tick\", function ApplyHoming() {\r\n    query.forEach(({ homing, motion, position }, e) => {\r\n      if (!homing.target?.alive) return;\r\n\r\n      const centre = getEntityMidpoint(g, homing.target);\r\n      const desired = angleBetween(position, centre);\r\n      const diff = angleDiff(motion.angle, desired);\r\n\r\n      if (Math.abs(diff) <= homing.strength) motion.angle = desired;\r\n      else if (diff < 0) motion.angle -= homing.strength;\r\n      else motion.angle += homing.strength;\r\n\r\n      if (--homing.duration <= 0) {\r\n        e.setHoming();\r\n        e.setTrail();\r\n      }\r\n    });\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\n\r\nexport default function addLifetime(g: Engine) {\r\n  const query = new Query(g.entities, [\"lifetime\"]);\r\n  g.on(\"tick\", function DecreaseLifetime() {\r\n    query.forEach(({ lifetime }, e) => {\r\n      if (--lifetime.duration <= 0) g.kill(e, { type: \"expired\" });\r\n      else if (lifetime.decayingAppearance && e.appearance) {\r\n        const patch = lifetime.decayingAppearance[lifetime.duration - 1];\r\n        Object.assign(e.appearance, patch);\r\n      }\r\n    });\r\n  });\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport int from \"@app/tools/int\";\r\n\r\n/// thanks https://www.redblobgames.com/grids/line-drawing.html#stepping\r\nexport function walkGrid(a: Position, b: Position) {\r\n  const dx = b.x - a.x,\r\n    dy = b.y - a.y,\r\n    nx = Math.abs(dx),\r\n    ny = Math.abs(dy),\r\n    signX = dx > 0 ? 1 : -1,\r\n    signY = dy > 0 ? 1 : -1;\r\n\r\n  const p = { ...a };\r\n  const points = [{ ...p }];\r\n  for (let ix = 0, iy = 0; ix < nx || iy < ny; ) {\r\n    if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n      // next step is horizontal\r\n      p.x += signX;\r\n      ix++;\r\n    } else {\r\n      // next step is vertical\r\n      p.y += signY;\r\n      iy++;\r\n    }\r\n    points.push({ ...p });\r\n  }\r\n  return points;\r\n}\r\n\r\n/// thanks https://www.redblobgames.com/grids/circle-drawing/#outline\r\nexport function getCirclePoints(cx: number, cy: number, radius: number) {\r\n  const points: Position[] = [];\r\n\r\n  const add = (rawX: number, rawY: number) => {\r\n    const x = int(rawX);\r\n    const y = int(rawY);\r\n    if (!points.find((p) => p.x === x && p.y === y)) points.push({ x, y });\r\n  };\r\n\r\n  for (let r = 0; r <= Math.floor(radius * Math.sqrt(0.5)); r++) {\r\n    const d = Math.floor(Math.sqrt(radius * radius - r * r));\r\n    add(cx - d, cy + r);\r\n    add(cx + d, cy + r);\r\n    add(cx - d, cy - r);\r\n    add(cx + d, cy - r);\r\n    add(cx + r, cy - d);\r\n    add(cx + r, cy + d);\r\n    add(cx - r, cy - d);\r\n    add(cx - r, cy + d);\r\n  }\r\n\r\n  return points;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Query from \"@app/Query\";\r\nimport { angleMove } from \"@app/tools/angle\";\r\nimport damage from \"@app/logic/damage\";\r\nimport { intPosition } from \"@app/tools/position\";\r\nimport { walkGrid } from \"@app/logic/geometry\";\r\n\r\nexport default function addMotion(g: Engine) {\r\n  const query = new Query(g.entities, [\"motion\", \"position\"]);\r\n  g.on(\"tick\", function MoveProjectiles() {\r\n    query.forEach(({ motion, position, projectile, ignoreSolid }, e) => {\r\n      const [dx, dy] = angleMove(motion);\r\n      const dst = { x: position.x + dx, y: position.y + dy };\r\n\r\n      const line = walkGrid(intPosition(position), intPosition(dst));\r\n\r\n      let hitWall = false;\r\n      let hitEntity: Entity | undefined = undefined;\r\n      for (const pos of line) {\r\n        if (!g.inBounds(pos)) {\r\n          g.kill(e, { type: \"exitedMap\" });\r\n          return;\r\n        }\r\n\r\n        g.move(e, pos);\r\n\r\n        const { wall, solid } = g.getContents(pos, ignoreSolid?.ids);\r\n        if (wall) {\r\n          hitWall = true;\r\n          break;\r\n        } else if (solid) {\r\n          hitEntity = solid;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (hitWall) {\r\n        g.kill(e, { type: \"hitWall\" });\r\n      } else if (hitEntity) {\r\n        if (projectile) damage(g, hitEntity, projectile.damage, e);\r\n        g.kill(e, { type: \"hitEntity\", other: hitEntity });\r\n      } else {\r\n        g.move(e, dst);\r\n      }\r\n    });\r\n  });\r\n}\r\n", "import { canFire, fire } from \"@app/logic/turret\";\r\nimport { getEntityBlockers, getEntityTree } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { addPositions } from \"@app/tools/position\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\n\r\nexport default function addPlayer(g: Engine) {\r\n  g.on(\"playerMove\", function MovePlayer({ move }) {\r\n    const player = g.player;\r\n    const position = player.position!;\r\n    const destination = addPositions(position, move);\r\n    const blockers = getEntityBlockers(g, player, destination);\r\n    if (!blockers.length) {\r\n      player.move(destination.x, destination.y);\r\n      player.setLastMovement({ angle: angleBetween(position, destination) });\r\n      g.tick();\r\n    }\r\n  });\r\n\r\n  g.on(\"playerFire\", function FirePlayerWeapons({ array }) {\r\n    const player = g.player;\r\n    const tag = player.player!.weaponArrays[array];\r\n\r\n    const tree = getEntityTree(g, player);\r\n    const weapons = tree.filter((e) => e.tags.has(tag));\r\n    let fired = false;\r\n    for (const weapon of weapons) {\r\n      if (!weapon.turret) continue;\r\n\r\n      if (canFire(weapon.turret, player)) {\r\n        fire(\r\n          g,\r\n          weapon.turret,\r\n          weapon.position!,\r\n          { x: 0, y: 0 },\r\n          player,\r\n          tree.map((e) => e.id)\r\n        );\r\n        fired = true;\r\n      }\r\n    }\r\n\r\n    if (fired) {\r\n      player.setLastMovement();\r\n      g.tick();\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\n\r\nexport default function addShields(g: Engine) {\r\n  const query = new Query(g.entities, [\"pilot\", \"ship\"]);\r\n  g.on(\"tick\", function RechargeShields() {\r\n    query.forEach(({ pilot, ship }) => {\r\n      const recharge = pilot.body;\r\n      ship.shield = Math.min(ship.maxShield, ship.shield + recharge);\r\n    });\r\n  });\r\n}\r\n", "import { findSpawnPosition, getShipPower, makeEnemy } from \"@app/logic/enemy\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\n\r\nexport default function addSpawns(g: Engine) {\r\n  g.on(\"waveBegin\", function SpawnNextWave({ wave, difficulty, pilot }) {\r\n    const entities: Entity[] = [];\r\n\r\n    const specialChance = (difficulty + wave.difficulty) * 3;\r\n\r\n    for (let i = 0; i < wave.escorts; i++) {\r\n      const power = getShipPower(specialChance, false);\r\n      const prefab = oneOf(wave.escortTypes);\r\n      entities.push(makeEnemy(g, prefab, power));\r\n    }\r\n\r\n    const pilotAtIndex = Math.floor(Math.random() * wave.flagships);\r\n    for (let i = 0; i < wave.flagships; i++) {\r\n      const hasStarPilot = i === pilotAtIndex && pilot !== undefined;\r\n      const power = getShipPower(specialChance, hasStarPilot);\r\n      const prefab = oneOf(wave.flagshipTypes);\r\n      entities.push(makeEnemy(g, prefab, power));\r\n    }\r\n\r\n    for (const e of entities) {\r\n      const position = findSpawnPosition(g, e);\r\n      e.move(position.x, position.y);\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { isSameCell } from \"@app/tools/position\";\r\n\r\nexport default function addTrails(g: Engine) {\r\n  g.on(\"move\", function LayTrails({ e, old, pos }) {\r\n    if (e.trail && !isSameCell(old, pos))\r\n      g.spawn(e.trail.effectPrefab).setPosition(old);\r\n  });\r\n}\r\n", "import { advanceTimer, canFire, fire } from \"@app/logic/turret\";\r\nimport { getEntityMidpoint, getEntityTreeIDs } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport distance from \"@app/tools/distance\";\r\n\r\nexport default function addTurrets(g: Engine) {\r\n  const query = new Query(g.entities, [\"position\", \"turret\"]);\r\n  g.on(\"tick\", function FireTurrets() {\r\n    query.forEach(({ position, turret }, e) => {\r\n      advanceTimer(turret);\r\n\r\n      const root = g.getRoot(e);\r\n      if (!root.ai) return;\r\n\r\n      const enemy = root.ai.attacking;\r\n      if (!enemy?.alive) return;\r\n\r\n      const target = getEntityMidpoint(g, enemy);\r\n      if (distance(position, target) > (root.ai.firingDistance ?? Infinity))\r\n        return;\r\n\r\n      if (canFire(turret, root)) {\r\n        for (const bullet of fire(\r\n          g,\r\n          turret,\r\n          position,\r\n          target,\r\n          root,\r\n          getEntityTreeIDs(g, root)\r\n        )) {\r\n          if (bullet.homing) bullet.homing.target = enemy;\r\n\r\n          if (bullet.ai) bullet.ai.attacking = enemy;\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport addAI from \"./AI\";\r\nimport addDisplay from \"./Display\";\r\nimport addExplosives from \"./Explosives\";\r\nimport addFields from \"./Fields\";\r\nimport addHUD from \"./HUD\";\r\nimport addHoming from \"./Homing\";\r\nimport addLifetime from \"./Lifetime\";\r\nimport addMotion from \"./Motion\";\r\nimport addPlayer from \"./Player\";\r\nimport addShields from \"./Shields\";\r\nimport addSpawns from \"./Spawns\";\r\nimport addTrails from \"./Trails\";\r\nimport addTurrets from \"./Turrets\";\r\n\r\nexport function addSystems(g: Engine) {\r\n  addLifetime(g);\r\n  addHoming(g);\r\n  addTurrets(g);\r\n  addFields(g);\r\n  addShields(g);\r\n  addMotion(g);\r\n  addAI(g);\r\n  addSpawns(g);\r\n\r\n  addDisplay(g);\r\n  addHUD(g);\r\n\r\n  addTrails(g);\r\n\r\n  addExplosives(g);\r\n\r\n  addPlayer(g);\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Drawable from \"@app/types/Drawable\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Glyphs from \"@app/logic/glyphs\";\r\nimport { angleWrap } from \"@app/tools/angle\";\r\n\r\ntype LineInstruction = { x: number; y: number; line: string; fg: number };\r\n\r\nconst circleEighth = Math.PI / 4;\r\nconst directions = [\r\n  Glyphs.RightArrow,\r\n  Glyphs.DownArrow + Glyphs.RightArrow,\r\n  Glyphs.DownArrow,\r\n  Glyphs.DownArrow + Glyphs.LeftArrow,\r\n  Glyphs.LeftArrow,\r\n  Glyphs.UpArrow + Glyphs.LeftArrow,\r\n  Glyphs.UpArrow,\r\n  Glyphs.UpArrow + Glyphs.RightArrow,\r\n];\r\nfunction getDirection(ang: number) {\r\n  const octant = Math.floor(angleWrap(ang) / circleEighth + circleEighth / 2);\r\n  return directions[octant];\r\n}\r\n\r\nexport default class BulletInfo implements Drawable {\r\n  width: number;\r\n  height: number;\r\n  instructions: LineInstruction[];\r\n\r\n  constructor(public g: Engine, public e: Entity) {\r\n    this.instructions = [];\r\n\r\n    if (e.name) this.add(e.name, Colors.WHITE);\r\n    if (e.projectile)\r\n      this.add(`${e.projectile.damage} damage`, Colors.LIGHT_RED);\r\n    if (e.motion)\r\n      this.add(\r\n        `${getDirection(e.motion.angle)}, vel ${e.motion.vel}`,\r\n        Colors.LIGHT_GRAY\r\n      );\r\n    if (e.homing)\r\n      this.add(\r\n        `chasing ${e.homing.target === this.g.player ? \"you \" : \"\"}${\r\n          e.homing.duration < Infinity ? `(${e.homing.duration})` : \"\"\r\n        }`,\r\n        Colors.DARK_RED\r\n      );\r\n    if (e.lifetime)\r\n      this.add(`(lasts ${e.lifetime.duration})`, Colors.DARK_GRAY);\r\n\r\n    this.width = this.instructions.reduce(\r\n      (a, b) => Math.max(b.line.length, a),\r\n      0\r\n    );\r\n    this.height = this.instructions.length;\r\n  }\r\n\r\n  private add(line: string, fg: number) {\r\n    this.instructions.push({ x: 0, y: this.instructions.length, line, fg });\r\n  }\r\n\r\n  draw(sx: number, sy: number) {\r\n    for (const { x, y, line, fg } of this.instructions)\r\n      this.g.term.drawString(sx + x, sy + y, line, fg);\r\n  }\r\n}\r\n", "import BulletInfo from \"@app/ui/BulletInfo\";\r\nimport { Colors } from \"wglt\";\r\nimport Drawable from \"@app/types/Drawable\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport PilotInfo from \"@app/ui/PilotInfo\";\r\nimport { Position } from \"@app/components\";\r\nimport ShipInfo from \"@app/ui/ShipInfo\";\r\nimport WeaponInfo from \"@app/ui/WeaponInfo\";\r\nimport { getEntityTree } from \"@app/logic/entity\";\r\n\r\ntype DrawInstruction = { x: number; y: number; object: Drawable };\r\n\r\nexport function drawExamineOverlay(\r\n  g: Engine,\r\n  pos: Position,\r\n  entities: Entity[]\r\n) {\r\n  if (!entities.length) return;\r\n\r\n  const instructions: DrawInstruction[] = [];\r\n\r\n  const x = 1;\r\n  let y = 1;\r\n\r\n  const add = (object: Drawable) => {\r\n    instructions.push({ x, y, object });\r\n    y += object.height + 1;\r\n  };\r\n\r\n  for (const e of entities) {\r\n    if (e.ship) add(new ShipInfo(g, e.ship));\r\n    if (e.pilot) add(new PilotInfo(g, e.pilot, true));\r\n\r\n    const tree = getEntityTree(g, e);\r\n\r\n    for (const weapon of tree.filter((x) => x.turret))\r\n      add(new WeaponInfo(g, weapon.turret!));\r\n\r\n    if (e.motion || e.projectile || e.homing || e.lifetime)\r\n      add(new BulletInfo(g, e));\r\n  }\r\n\r\n  if (!instructions.length) return;\r\n\r\n  const width = Math.max(...instructions.map((i) => i.object.width)) + 2;\r\n\r\n  const sx = Math.min(pos.x + 2, g.term.width - width);\r\n  const sy = Math.min(pos.y, g.term.height - y);\r\n\r\n  g.term.fillRect(sx, sy, width, y, \" \", Colors.WHITE, Colors.BLACK);\r\n  g.term.drawSingleBox(sx, sy, width, y);\r\n  for (const inst of instructions) inst.object.draw(sx + inst.x, sy + inst.y);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { Position } from \"@app/components\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\nimport distance from \"@app/tools/distance\";\r\nimport { getCirclePoints } from \"@app/logic/geometry\";\r\n\r\nexport function fireAirFist(g: Engine, centre: Position, power: number) {\r\n  for (const e of g.entities.get()) {\r\n    const { motion, projectile, position } = e;\r\n    if (\r\n      motion &&\r\n      projectile &&\r\n      position &&\r\n      distance(centre, position) <= power\r\n    ) {\r\n      const angle = angleBetween(centre, position);\r\n      motion.angle = angle;\r\n\r\n      e.setIgnoreSolid();\r\n    }\r\n  }\r\n\r\n  for (const point of getCirclePoints(centre.x, centre.y, power))\r\n    g.spawn(\"AirFistRange\").setPosition(point);\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\nexport default class Grid<T> {\r\n  grid: T[][];\r\n\r\n  constructor(\r\n    public width: number,\r\n    public height: number,\r\n    constructorFn: (x: number, y: number) => T\r\n  ) {\r\n    this.grid = [];\r\n\r\n    for (let y = 0; y < height; y++) {\r\n      const row: T[] = [];\r\n\r\n      for (let x = 0; x < width; x++) row.push(constructorFn(x, y));\r\n\r\n      this.grid.push(row);\r\n    }\r\n  }\r\n\r\n  contains({ x, y }: Position) {\r\n    return x >= 0 && x < this.width && y >= 0 && y < this.height;\r\n  }\r\n\r\n  get({ x, y }: Position) {\r\n    return this.grid[y][x];\r\n  }\r\n\r\n  getPositions(): Position[] {\r\n    const positions: Position[] = [];\r\n\r\n    for (let y = 0; y < this.height; y++)\r\n      for (let x = 0; x < this.width; x++) positions.push({ x, y });\r\n\r\n    return positions;\r\n  }\r\n}\r\n", "import { Pilot } from \"@app/components\";\r\n\r\nexport const Bodini: Pilot = {\r\n  name: \"Bodini\",\r\n  star: true,\r\n  difficulty: 4,\r\n  body: 3,\r\n  mind: 2,\r\n  spirit: 3,\r\n  talent: 2,\r\n  class: [\"Psychic\"],\r\n};\r\n\r\nexport const StarPilotB: Pilot = {\r\n  name: \"Star Pilot B\",\r\n  star: true,\r\n  difficulty: 2,\r\n  body: 2,\r\n  mind: 2,\r\n  spirit: 2,\r\n  talent: 2,\r\n  class: [],\r\n};\r\n\r\nexport const StarPilotC: Pilot = {\r\n  name: \"Star Pilot C\",\r\n  star: true,\r\n  difficulty: 2,\r\n  body: 2,\r\n  mind: 2,\r\n  spirit: 2,\r\n  talent: 2,\r\n  class: [],\r\n};\r\n\r\nexport const StarPilotD: Pilot = {\r\n  name: \"Star Pilot D\",\r\n  star: true,\r\n  difficulty: 2,\r\n  body: 2,\r\n  mind: 2,\r\n  spirit: 2,\r\n  talent: 2,\r\n  class: [],\r\n};\r\n\r\nexport const StarPilotE: Pilot = {\r\n  name: \"Star Pilot E\",\r\n  star: true,\r\n  difficulty: 2,\r\n  body: 2,\r\n  mind: 2,\r\n  spirit: 2,\r\n  talent: 2,\r\n  class: [],\r\n};\r\n\r\nexport const StarPilotF: Pilot = {\r\n  name: \"Star Pilot F\",\r\n  star: true,\r\n  difficulty: 2,\r\n  body: 2,\r\n  mind: 2,\r\n  spirit: 2,\r\n  talent: 2,\r\n  class: [],\r\n};\r\n\r\nconst StarPilots = [\r\n  Bodini,\r\n  StarPilotB,\r\n  StarPilotC,\r\n  StarPilotD,\r\n  StarPilotE,\r\n  StarPilotF,\r\n];\r\nexport default StarPilots;\r\n", "export default class HashMap<K, V> {\r\n  items: Map<string, V>;\r\n\r\n  constructor(private keyFn: (key: K) => string) {\r\n    this.items = new Map();\r\n  }\r\n\r\n  has(key: K) {\r\n    return this.items.has(this.keyFn(key));\r\n  }\r\n\r\n  get(key: K) {\r\n    return this.items.get(this.keyFn(key));\r\n  }\r\n\r\n  getOrDefault(key: K, fallback: V) {\r\n    const value = this.items.get(this.keyFn(key));\r\n    return typeof value !== \"undefined\" ? value : fallback;\r\n  }\r\n\r\n  getOrDie(key: K) {\r\n    const s = this.keyFn(key);\r\n    const item = this.items.get(s);\r\n    if (typeof item === \"undefined\") throw new Error(`Invalid key: ${s}`);\r\n    return item;\r\n  }\r\n\r\n  set(key: K, value: V) {\r\n    this.items.set(this.keyFn(key), value);\r\n  }\r\n}\r\n", "import HashMap from \"@app/HashMap\";\r\nimport { Position } from \"@app/components\";\r\nimport neighbours from \"@app/logic/neighbours\";\r\n\r\nexport default function bfs(\r\n  start: Position[],\r\n  isPassable: (pos: Position) => boolean,\r\n  maximum = Infinity\r\n) {\r\n  const frontier: Position[] = [];\r\n  const costs = new HashMap<Position, number>((p) => `${p.x},${p.y}`);\r\n\r\n  for (const location of start) {\r\n    frontier.push(location);\r\n    costs.set(location, 0);\r\n  }\r\n\r\n  while (frontier.length) {\r\n    const current = frontier.shift()!;\r\n\r\n    const neighbourCost = costs.getOrDie(current) + 1;\r\n    if (neighbourCost > maximum) continue;\r\n\r\n    for (const neighbour of neighbours(current)) {\r\n      if (!costs.has(neighbour) && isPassable(neighbour)) {\r\n        costs.set(neighbour, neighbourCost);\r\n        frontier.push(neighbour);\r\n      }\r\n    }\r\n  }\r\n\r\n  return costs;\r\n}\r\n", "export default function isDefined<T>(obj?: T): obj is T {\r\n  return typeof obj !== \"undefined\";\r\n}\r\n"],
  "mappings": "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",
  "names": ["require_wglt", "__commonJSMin", "exports", "module", "import_wglt", "import_wglt", "clone", "src", "seen", "copy", "i", "k", "v", "src_default", "clone", "src_default", "keys", "fromEntries", "pairs", "e", "k", "v", "Entity", "g", "name", "prefab", "clone", "x", "y", "overlay", "tags", "child", "key", "keys", "tag", "reason", "e", "callback", "_a", "c", "at", "compareEntities", "a", "b", "_b", "_c", "_d", "layerA", "layerB", "EventNames", "battleship_exports", "__export", "Battleship", "BattleshipHull", "import_wglt", "Layer", "Layer_default", "child", "name", "x", "y", "overlay", "tags", "ship", "maxHp", "maxShield", "turret", "salvoCount", "timeBetweenShots", "timeBetweenSalvos", "ammunition", "bullets", "Battleship", "ship", "BattleshipHull", "Layer_default", "bullet_exports", "__export", "Bullet", "DroneBullet", "HomingMissile", "PlayerBullet", "import_wglt", "Glyphs", "glyphs_default", "Bullet", "glyphs_default", "Layer_default", "DroneBullet", "HomingMissile", "PlayerBullet", "effect_exports", "__export", "AirFistRange", "SmokePuff", "import_wglt", "AirFistRange", "Layer_default", "SmokePuff", "fighter_exports", "__export", "Fighter", "FighterHull", "FighterLauncher", "quarter", "eighth", "Angles", "angles_default", "import_wglt", "FighterLauncher", "Layer_default", "turret", "angles_default", "Fighter", "ship", "FighterHull", "gun_exports", "__export", "DroneGun", "HomingMissileLauncher", "MachineGun", "OlmSpray", "PeaShooter", "PlayerGun", "MachineGun", "turret", "angles_default", "HomingMissileLauncher", "PeaShooter", "PlayerGun", "DroneGun", "OlmSpray", "player_exports", "__export", "PlayerHull", "PlayerShip", "import_wglt", "PlayerHull", "Layer_default", "PlayerShip", "ship", "child", "glyphs_default", "ships_exports", "__export", "CruiseyWing", "Demigod", "DroneA", "DroneB", "DroneC", "GoutOFlame", "Hull", "Olm", "ShipA", "ShipB", "ShipC", "ShipD", "ShipE", "ShipF", "ShipG", "ShipH", "import_wglt", "Hull", "Layer_default", "defaultAI", "tinyGun", "child", "ShipA", "ship", "glyphs_default", "ShipB", "ShipC", "ShipD", "ShipE", "ShipF", "ShipG", "ShipH", "droneAI", "droneGun", "DroneA", "DroneB", "DroneC", "CruiseyWing", "Olm", "GoutOFlame", "Demigod", "sword_exports", "__export", "Sword", "SwordBullet", "import_wglt", "SwordBullet", "glyphs_default", "Layer_default", "Sword", "turret", "AllPrefabs", "__spreadValues", "battleship_exports", "bullet_exports", "effect_exports", "fighter_exports", "gun_exports", "player_exports", "ships_exports", "sword_exports", "instantiate", "g", "name", "Entity", "int", "n", "intPosition", "pos", "int", "isSameCell", "a", "b", "ia", "ib", "addPositions", "EntityList", "compareFn", "entities", "e", "i", "import_wglt", "import_wglt", "import_wglt", "getLayoutMidpoint", "layout", "topLeft", "avg", "key", "total", "offset", "getLayoutBlockers", "g", "ignoreSolid", "blockers", "pos", "addPositions", "wall", "solid", "getEntityTree", "e", "root", "x", "getEntityTreeIDs", "getEntityLayout", "_a", "parts", "width", "height", "part", "attachment", "y", "getEntityBlockers", "origin", "getEntityMidpoint", "isSpaceFree", "sx", "sy", "w", "h", "oob", "other", "Query", "list", "filter", "e", "key", "cb", "tau", "angleBetween", "a", "b", "angleDiff", "x", "y", "angleMove", "mo", "dx", "dy", "angleWrap", "angle", "neighbourOffsets", "neighbours", "pos", "o", "addPositions", "oneOf", "items", "addAI", "g", "query", "Query", "ai", "rawPosition", "e", "ignoreSolid", "getEntityTreeIDs", "layout", "getEntityLayout", "position", "intPosition", "search", "isPassable", "pos", "oob", "solid", "wall", "getPosScore", "getScore", "a", "offset", "addPositions", "bestScore", "possibilities", "neighbourOffsets", "possibility", "score", "destination", "oneOf", "angleBetween", "source", "addDisplay", "g", "query", "Query", "appearance", "position", "int", "import_wglt", "import_wglt", "lerp", "start", "end", "t", "GradientRun", "points", "a", "b", "breakpoint", "c", "value", "low", "lowColour", "high", "highColour", "higherIndex", "p", "below", "ar", "ag", "ab", "aa", "above", "br", "bg", "bb", "ba", "r", "lerp", "distance", "a", "b", "dx", "dy", "fieldGradients", "GradientRun", "getFieldAppearance", "field", "Layer_default", "generateField", "centre", "size", "parts", "minX", "maxX", "minY", "maxY", "y", "x", "dist", "distance", "addExplosives", "g", "e", "reason", "explodes", "name", "position", "x", "y", "intensity", "generateField", "Entity", "damage", "g", "hit", "amount", "inflicter", "e", "damageToHp", "source", "addFields", "g", "ships", "Query", "query", "field", "position", "e", "getFieldAppearance", "_", "victim", "layout", "getEntityLayout", "absolute", "isSameCell", "damage", "import_wglt", "import_wglt", "import_wglt", "StatColours", "PilotInfo", "g", "pilot", "full", "x", "y", "cl", "stat", "value", "StatColours", "import_wglt", "drawBar", "term", "x", "y", "width", "val", "max", "filledBg", "emptyBg", "textFg", "label", "length", "ShipInfo", "g", "ship", "x", "y", "width", "term", "barLength", "drawBar", "import_wglt", "import_wglt", "PilotClasses", "enumerate", "max", "min", "items", "i", "putPilotInShip", "pilot", "ship", "shuffle", "array", "i", "j", "PowerAppearancePatch", "PowerToFlags", "typeA", "typeB", "typeC", "waves", "getWaves", "count", "shuffle", "a", "b", "getShipPower", "specialChance", "starPilot", "oneOf", "makePilot", "basePilot", "pilot", "clone", "PilotClasses", "cl", "makeEnemy", "g", "prefab", "power", "flags", "e", "ship", "putPilotInShip", "initialiseShip", "appearance", "part", "getEntityTree", "findSpawnPosition", "width", "height", "getEntityLayout", "y", "xList", "enumerate", "x", "isSpaceFree", "getState", "turret", "advanceTimer", "canFire", "owner", "b", "initBullet", "g", "prefab", "start", "angle", "vel", "ignoreIds", "bullet", "initialiseShip", "fireBullet", "position", "target", "angleCmd", "beam", "offset", "addPositions", "angleBetween", "dx", "dy", "angleMove", "step", "patch", "fire", "timeBetweenSalvos", "timeBetweenShots", "bullets", "StateColours", "WeaponInfo", "g", "turret", "timer", "salvo", "salvoCount", "state", "getState", "ammo", "x", "y", "HUD_HEIGHT", "addHUD", "g", "mapHeight", "term", "player", "pilot", "ship", "x", "y", "shipInfo", "ShipInfo", "statX", "PilotInfo", "glyphs_default", "wx", "tag", "sx", "weapons", "getEntityTree", "e", "weapon", "weaponInfo", "WeaponInfo", "addHoming", "g", "query", "Query", "homing", "motion", "position", "e", "_a", "centre", "getEntityMidpoint", "desired", "angleBetween", "diff", "angleDiff", "addLifetime", "g", "query", "Query", "lifetime", "e", "patch", "walkGrid", "a", "b", "dx", "dy", "nx", "ny", "signX", "signY", "p", "__spreadValues", "points", "ix", "iy", "getCirclePoints", "cx", "cy", "radius", "add", "rawX", "rawY", "x", "int", "y", "d", "addMotion", "g", "query", "Query", "motion", "position", "projectile", "ignoreSolid", "e", "dx", "dy", "angleMove", "dst", "line", "walkGrid", "intPosition", "hitWall", "hitEntity", "pos", "wall", "solid", "damage", "addPlayer", "g", "move", "player", "position", "destination", "addPositions", "getEntityBlockers", "angleBetween", "array", "tag", "tree", "getEntityTree", "weapons", "e", "fired", "weapon", "canFire", "fire", "addShields", "g", "query", "Query", "pilot", "ship", "recharge", "addSpawns", "g", "wave", "difficulty", "pilot", "entities", "specialChance", "i", "power", "getShipPower", "prefab", "oneOf", "makeEnemy", "pilotAtIndex", "e", "position", "findSpawnPosition", "addTrails", "g", "e", "old", "pos", "isSameCell", "addTurrets", "g", "query", "Query", "position", "turret", "e", "_a", "advanceTimer", "root", "enemy", "target", "getEntityMidpoint", "distance", "canFire", "bullet", "fire", "getEntityTreeIDs", "addSystems", "g", "addLifetime", "addHoming", "addTurrets", "addFields", "addShields", "addMotion", "addAI", "addSpawns", "addDisplay", "addHUD", "addTrails", "addExplosives", "addPlayer", "import_wglt", "circleEighth", "directions", "glyphs_default", "getDirection", "ang", "octant", "angleWrap", "BulletInfo", "g", "e", "a", "b", "line", "fg", "sx", "sy", "x", "y", "import_wglt", "drawExamineOverlay", "g", "pos", "entities", "instructions", "x", "y", "add", "object", "e", "ShipInfo", "PilotInfo", "tree", "getEntityTree", "weapon", "WeaponInfo", "BulletInfo", "width", "i", "sx", "sy", "inst", "fireAirFist", "g", "centre", "power", "e", "motion", "projectile", "position", "distance", "angle", "angleBetween", "point", "getCirclePoints", "CombatMode", "g", "campaign", "getWaves", "width", "height", "getEntityLayout", "int", "addSystems", "wave", "pilot", "map", "mapWidth", "mapHeight", "overlays", "term", "y", "x", "cell", "overlay", "value", "ch", "drawExamineOverlay", "e", "motion", "position", "dx", "dy", "angleMove", "dst", "line", "walkGrid", "intPosition", "pos", "solid", "other", "set", "player", "move", "fireAirFist", "getEntityMidpoint", "Grid", "width", "height", "constructorFn", "y", "row", "x", "positions", "Bodini", "StarPilotB", "StarPilotC", "StarPilotD", "StarPilotE", "StarPilotF", "StarPilots", "star_default", "CampaignMode", "g", "shipPrefab", "pilot", "Grid", "stars", "freePositions", "pos", "isSameCell", "star", "oneOf", "star_default", "position", "sector", "i", "CombatMode", "e", "putPilotInShip", "initialiseShip", "term", "current", "cx", "gridX", "gridY", "y", "sy", "x", "sx", "move", "destination", "addPositions", "MenuMode", "g", "starfieldSpeed", "starCount", "i", "term", "star", "x", "y", "intPosition", "cx", "pad", "qtr", "start", "stat", "label", "value", "StatColours", "fg", "oneOf", "vel", "c", "glyphs_default", "angle", "width", "height", "dx", "dy", "angleMove", "key", "shift", "shiftDown", "newValue", "CampaignMode", "HashMap", "keyFn", "key", "fallback", "value", "s", "item", "bfs", "start", "isPassable", "maximum", "frontier", "costs", "HashMap", "p", "location", "current", "neighbourCost", "neighbour", "neighbours", "isDefined", "obj", "Engine", "term", "mapWidth", "mapHeight", "EntityList", "compareEntities", "MenuMode", "mode", "fromEntries", "EventNames", "n", "name", "data", "cb", "handler", "instantiate", "e", "reason", "pos", "old", "map", "y", "x", "g", "fg", "bg", "bm", "ignoreSolid", "square", "intPosition", "wall", "entities", "isSameCell", "solid", "entity", "key", "bfs", "getEntityTree", "isDefined", "loadEngine", "parent", "font", "container", "onResize", "wantWidth", "wantHeight", "ratioWidth", "ratioHeight", "ratio", "canvas", "term", "g", "Engine", "HUD_HEIGHT"]
}
