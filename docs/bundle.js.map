{
  "version": 3,
  "sources": ["globalExternal:wglt", "../src/Engine.ts", "../node_modules/nanoclone/src/index.js", "../src/tools/object.ts", "../src/Entity.ts", "../src/tools/int.ts", "../src/tools/position.ts", "../src/logic/entity.ts", "../src/prefabs/battleship.ts", "../src/types/Layer.ts", "../src/prefabs/bullet.ts", "../src/prefabs/effect.ts", "../src/prefabs/fighter.ts", "../src/components/index.ts", "../src/prefabs/gun.ts", "../src/prefabs/player.ts", "../src/prefabs/index.ts", "../src/EntityList.ts", "../src/Query.ts", "../src/logic/neighbours.ts", "../src/tools/oneOf.ts", "../src/systems/AI.ts", "../src/systems/Display.ts", "../src/logic/field.ts", "../src/GradientRun.ts", "../src/tools/lerp.ts", "../src/tools/distance.ts", "../src/systems/Explosives.ts", "../src/systems/Fields.ts", "../src/tools/angle.ts", "../src/systems/Homing.ts", "../src/systems/Lifetime.ts", "../src/logic/geometry.ts", "../src/systems/Motion.ts", "../src/systems/Player.ts", "../src/systems/Trails.ts", "../src/logic/turret.ts", "../src/systems/Turrets.ts", "../src/systems/index.ts", "../src/HashMap.ts", "../src/logic/bfs.ts", "../src/logic/airFist.ts", "../src/tools/isDefined.ts", "../src/index.ts"],
  "sourcesContent": ["module.exports = globalThis.wglt", "import { BlendMode, Cell, Colors, Console, Key, Terminal } from \"wglt\";\r\nimport Entity, { compareEntities } from \"@app/Entity\";\r\nimport { EventCallback, EventHandler, EventMap, EventName } from \"@app/events\";\r\nimport { getEntityMidpoint, getEntityTree } from \"@app/logic/entity\";\r\nimport instantiate, { PrefabName } from \"@app/prefabs\";\r\nimport { intPosition, isSameCell } from \"@app/tools/position\";\r\n\r\nimport EntityList from \"@app/EntityList\";\r\nimport HashMap from \"@app/HashMap\";\r\nimport { Position } from \"@app/components\";\r\nimport { addSystems } from \"@app/systems\";\r\nimport bfs from \"@app/logic/bfs\";\r\nimport { fireAirFist } from \"@app/logic/airFist\";\r\nimport isDefined from \"@app/tools/isDefined\";\r\n\r\nconst MAP_WIDTH = 60;\r\nconst MAP_HEIGHT = 40;\r\n\r\ntype Overlay = HashMap<Position, number>;\r\n\r\nexport default class Engine implements EventHandler {\r\n  lastEntityId: number;\r\n\r\n  dirty: boolean;\r\n  fovRecompute: boolean;\r\n  map: Console;\r\n  entities: EntityList;\r\n  eventCallbacks: Record<EventName, EventCallback<any>[]>;\r\n  overlays: Map<string, Overlay>;\r\n  showOverlay?: string;\r\n\r\n  constructor(\r\n    public term: Terminal,\r\n    public mapWidth = MAP_WIDTH,\r\n    public mapHeight = MAP_HEIGHT\r\n  ) {\r\n    term.update = this.update.bind(this);\r\n\r\n    this.dirty = true;\r\n    this.fovRecompute = true;\r\n    this.map = new Console(mapWidth, mapHeight, () => true);\r\n    this.lastEntityId = 0;\r\n    this.entities = new EntityList(compareEntities);\r\n    this.overlays = new Map();\r\n\r\n    this.eventCallbacks = {\r\n      draw: [],\r\n      kill: [],\r\n      move: [],\r\n      playerMove: [],\r\n      spawn: [],\r\n      tick: [],\r\n    };\r\n    addSystems(this);\r\n  }\r\n\r\n  get player() {\r\n    const player = this.entities.get().find((e) => e.player);\r\n    if (!player) throw new Error(\"Could not find a player!\");\r\n    return player;\r\n  }\r\n\r\n  fire<T extends EventName>(name: T, data: EventMap[T]): void {\r\n    for (const cb of this.eventCallbacks[name]) cb(data);\r\n  }\r\n\r\n  on<T extends EventName>(name: T, handler: EventCallback<T>): void {\r\n    this.eventCallbacks[name].push(handler);\r\n  }\r\n\r\n  spawn(name: PrefabName) {\r\n    return instantiate(this, name);\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.dirty = true;\r\n    this.entities.add(e);\r\n    this.fire(\"spawn\", { e });\r\n    return e;\r\n  }\r\n\r\n  delete(e: Entity) {\r\n    if (e.alive) {\r\n      e.kill();\r\n      this.fire(\"kill\", { e });\r\n    }\r\n  }\r\n\r\n  move(e: Entity, pos: Position) {\r\n    const old = e.position;\r\n    e.move(pos.x, pos.y);\r\n    if (old) this.fire(\"move\", { e, old, pos });\r\n  }\r\n\r\n  gotoDemoRoom() {\r\n    this.entities.clear();\r\n\r\n    this.map.clear();\r\n    this.room(1, 1, 40, 30);\r\n    this.spawn(\"Player\").move(5, 25);\r\n    this.spawn(\"Battleship\").move(8, 5);\r\n  }\r\n\r\n  room(sx: number, sy: number, w: number, h: number) {\r\n    const { map } = this;\r\n\r\n    for (let yo = 0; yo < h; yo++) {\r\n      for (let xo = 0; xo < w; xo++) {\r\n        const wall = xo === 0 || yo === 0 || xo === w - 1 || yo === h - 1;\r\n        const x = sx + xo;\r\n        const y = sy + yo;\r\n\r\n        map.setBlocked(x, y, wall);\r\n        map.setBlockedSight(x, y, wall);\r\n      }\r\n    }\r\n  }\r\n\r\n  drawIfVisible(\r\n    x: number,\r\n    y: number,\r\n    g: string | number,\r\n    fg?: number,\r\n    bg?: number,\r\n    bm?: BlendMode\r\n  ) {\r\n    // TODO scrolling etc.\r\n    if (this.map.isVisible(x, y)) {\r\n      if (bm) this.term.drawCell(x, y, { bg } as Cell, bm);\r\n      else this.term.drawChar(x, y, g, fg, bg);\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    const { map, mapWidth, mapHeight, player, term } = this;\r\n\r\n    if (this.fovRecompute) {\r\n      map.computeFov(player.position!.x, player.position!.y, 20);\r\n      this.fovRecompute = false;\r\n    }\r\n\r\n    for (let y = 0; y < mapHeight; y++) {\r\n      for (let x = 0; x < mapWidth; x++) {\r\n        const cell = map.grid[y][x];\r\n        const visible = map.isVisible(x, y);\r\n        const wall = cell.blockedSight;\r\n        let bg = Colors.BLACK;\r\n\r\n        if (visible) {\r\n          // It's visible\r\n          bg = wall ? Colors.WHITE : Colors.DARK_GRAY;\r\n          cell.explored = true;\r\n        } else if (cell.explored) {\r\n          // It's remembered\r\n          bg = wall ? Colors.LIGHT_GRAY : Colors.BLACK;\r\n        }\r\n\r\n        // TODO scrolling etc.\r\n        term.drawChar(x, y, 0, 0, bg);\r\n      }\r\n    }\r\n\r\n    this.fire(\"draw\", undefined);\r\n    this.dirty = false;\r\n\r\n    if (this.showOverlay) {\r\n      const overlay = this.overlays.get(this.showOverlay);\r\n      if (overlay) {\r\n        for (let y = 0; y < mapHeight; y++) {\r\n          for (let x = 0; x < mapWidth; x++) {\r\n            const value = overlay.get({ x, y }) || Infinity;\r\n            const ch = value === Infinity ? \"-\" : value < 10 ? `${value}` : \"*\";\r\n            term.drawChar(x, y, ch, Colors.LIGHT_RED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getRoot(e: Entity): Entity {\r\n    return e.attachment ? this.getRoot(e.attachment.parent) : e;\r\n  }\r\n\r\n  getContents(pos: Position, ignoreSolid: number[] = []) {\r\n    const square = intPosition(pos);\r\n\r\n    const wall = this.map.isBlocked(square.x, square.y);\r\n    const entities = this.entities\r\n      .get()\r\n      .filter((e) => e.position && isSameCell(square, e.position));\r\n    const solid = entities\r\n      .filter((e) => !ignoreSolid.includes(e.id))\r\n      .find((e) => e.solid);\r\n\r\n    return { wall, solid, other: entities.filter((e) => !e.solid) };\r\n  }\r\n\r\n  tick() {\r\n    this.overlays.clear();\r\n    this.fire(\"tick\", undefined);\r\n    this.entities.clearDead();\r\n  }\r\n\r\n  handleKeys() {\r\n    const move = this.term.getMovementKey();\r\n    if (move) {\r\n      this.fire(\"playerMove\", { move });\r\n      return;\r\n    }\r\n\r\n    if (this.term.isKeyPressed(Key.VK_F)) {\r\n      fireAirFist(this, getEntityMidpoint(this, this.player), 4.5);\r\n      this.tick();\r\n      return;\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.handleKeys();\r\n    if (this.dirty) this.draw();\r\n  }\r\n\r\n  saveOverlay(e: Entity, name: string, overlay: Overlay) {\r\n    this.overlays.set(`${e.id}.${name}`, overlay);\r\n  }\r\n\r\n  inBounds(pos: Position) {\r\n    return (\r\n      pos.x >= 0 &&\r\n      pos.y >= 0 &&\r\n      pos.x < this.mapWidth &&\r\n      pos.y < this.mapHeight\r\n    );\r\n  }\r\n\r\n  getPlayerDistanceMap() {\r\n    const key = \"player.distance\";\r\n    let map = this.overlays.get(key);\r\n    if (!map) {\r\n      map = bfs(\r\n        getEntityTree(this, this.player)\r\n          .map((e) => e.position)\r\n          .filter(isDefined),\r\n        this.inBounds.bind(this)\r\n      );\r\n      this.overlays.set(key, map);\r\n    }\r\n\r\n    return map;\r\n  }\r\n}\r\n", "function clone (src, seen = new Map()) {\r\n  // Immutable things - null, undefined, functions, symbols, etc.\r\n  if (!src || typeof src !== 'object') return src\r\n\r\n  // Things we've seen already (circular refs)\r\n  if (seen.has(src)) return seen.get(src)\r\n\r\n  // Basic pattern for cloning something below here is:\r\n  // 1. Create copy\r\n  // 2. Add it to `seen` immediately, so we recognize it if we see it in\r\n  //    subordinate members\r\n  // 3. clone subordinate members\r\n\r\n  let copy\r\n  if (src.nodeType && 'cloneNode' in src) {\r\n    // DOM Node\r\n    copy = src.cloneNode(true)\r\n    seen.set(src, copy)\r\n  } else if (src instanceof Date) {\r\n    // Date\r\n    copy = new Date(src.getTime())\r\n    seen.set(src, copy)\r\n  } else if (src instanceof RegExp) {\r\n    // RegExp\r\n    copy = new RegExp(src)\r\n    seen.set(src, copy)\r\n  } else if (Array.isArray(src)) {\r\n    // Array\r\n    copy = new Array(src.length)\r\n    seen.set(src, copy)\r\n    for (let i = 0; i < src.length; i++) copy[i] = clone(src[i], seen)\r\n  } else if (src instanceof Map) {\r\n    // Map\r\n    copy = new Map()\r\n    seen.set(src, copy)\r\n    for (const [k, v] of src.entries()) copy.set(k, clone(v, seen))\r\n  } else if (src instanceof Set) {\r\n    // Set\r\n    copy = new Set()\r\n    seen.set(src, copy)\r\n    for (const v of src) copy.add(clone(v, seen))\r\n  } else if (src instanceof Object) {\r\n    // Object\r\n    copy = {}\r\n    seen.set(src, copy)\r\n    for (const [k, v] of Object.entries(src)) copy[k] = clone(v, seen)\r\n  } else {\r\n    // Unrecognized thing.  It's better to throw here than to return `src`, as\r\n    // we don't know whether src needs to be deep-copied here.\r\n    throw Error(`Unable to clone ${src}`)\r\n  }\r\n\r\n  return copy\r\n}\r\n\r\nexport default function (src) {\r\n  return clone(src, new Map())\r\n}\r\n", "import nanoclone from \"nanoclone\";\r\n\r\nexport const clone = nanoclone;\r\n\r\nexport const keys = Object.keys as <K extends string | number | symbol, V>(\r\n  obj: Partial<Record<K, V>>\r\n) => K[];\r\n", "import {\r\n  AI,\r\n  Appearance,\r\n  Attachment,\r\n  ComponentMap,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  Lifetime,\r\n  Motion,\r\n  Position,\r\n  Trail,\r\n  Turret,\r\n} from \"@app/components\";\r\nimport { clone, keys } from \"@app/tools/object\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { PrefabName } from \"@app/prefabs\";\r\n\r\nexport default class Entity implements Partial<ComponentMap> {\r\n  alive: boolean;\r\n  id: number;\r\n  prefab?: PrefabName;\r\n  ai?: AI;\r\n  appearance?: Appearance;\r\n  attachment?: Attachment;\r\n  explodes?: Explodes;\r\n  field?: Field;\r\n  homing?: Homing;\r\n  ignoreSolid?: IgnoreSolid;\r\n  lifetime?: Lifetime;\r\n  motion?: Motion;\r\n  player: boolean;\r\n  projectile: boolean;\r\n  position?: Position;\r\n  solid: boolean;\r\n  trail?: Trail;\r\n  turret?: Turret;\r\n\r\n  constructor(public g: Engine, public name?: string) {\r\n    this.alive = true;\r\n    this.id = ++g.lastEntityId;\r\n    this.player = false;\r\n    this.projectile = false;\r\n    this.solid = false;\r\n  }\r\n\r\n  applyPrefab(name: PrefabName, prefab: Prefab): this {\r\n    this.prefab = name;\r\n\r\n    if (prefab.components) Object.assign(this, clone(prefab.components));\r\n\r\n    if (prefab.children)\r\n      for (const { name, x, y, overlay } of prefab.children) {\r\n        const child = this.g.spawn(name).setAttachment({ parent: this, x, y });\r\n        if (overlay)\r\n          for (const key of keys(overlay))\r\n            Object.assign((child as any)[key], clone(overlay[key]));\r\n      }\r\n\r\n    return this;\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return this.name;\r\n  }\r\n\r\n  kill(): this {\r\n    this.alive = false;\r\n    this.eachChild((e) => this.g.delete(e));\r\n    return this;\r\n  }\r\n\r\n  eachChild(callback: (e: Entity, at: Attachment) => void) {\r\n    for (const e of this.g.entities.get()) {\r\n      if (e.attachment?.parent === this) callback(e, e.attachment);\r\n    }\r\n  }\r\n\r\n  setAI(c?: AI): this {\r\n    this.ai = c;\r\n    return this;\r\n  }\r\n\r\n  setAppearance(c?: Appearance): this {\r\n    this.g.dirty = true;\r\n    this.appearance = c;\r\n    return this;\r\n  }\r\n\r\n  setAttachment(c?: Attachment): this {\r\n    this.attachment = c;\r\n    return this;\r\n  }\r\n\r\n  setExplodes(c?: Explodes): this {\r\n    this.explodes = c;\r\n    return this;\r\n  }\r\n\r\n  setField(c?: Field): this {\r\n    this.field = c;\r\n    return this;\r\n  }\r\n\r\n  setHoming(c?: Homing): this {\r\n    this.homing = c;\r\n    return this;\r\n  }\r\n\r\n  setIgnoreSolid(c?: IgnoreSolid): this {\r\n    this.ignoreSolid = c;\r\n    return this;\r\n  }\r\n\r\n  setLifetime(c?: Lifetime): this {\r\n    this.lifetime = c;\r\n    return this;\r\n  }\r\n\r\n  setMotion(c?: Motion): this {\r\n    this.motion = c;\r\n    return this;\r\n  }\r\n\r\n  setPosition(c?: Position): this {\r\n    this.g.dirty = true;\r\n    this.position = c;\r\n    return this;\r\n  }\r\n\r\n  setTrail(c?: Trail): this {\r\n    this.trail = c;\r\n    return this;\r\n  }\r\n\r\n  setTurret(c?: Turret): this {\r\n    this.turret = c;\r\n    return this;\r\n  }\r\n\r\n  setPlayer(tag: boolean): this {\r\n    this.player = tag;\r\n    return this;\r\n  }\r\n\r\n  setProjectile(tag: boolean): this {\r\n    this.projectile = tag;\r\n    return this;\r\n  }\r\n\r\n  setSolid(tag: boolean): this {\r\n    this.solid = tag;\r\n    return this;\r\n  }\r\n\r\n  move(x: number, y: number) {\r\n    this.g.dirty = true;\r\n    this.position = { x, y };\r\n    this.eachChild((e, at) => e.move(x + at.x, y + at.y));\r\n    return this.position;\r\n  }\r\n}\r\n\r\nexport function compareEntities(a: Entity, b: Entity) {\r\n  const layerA = a.appearance?.layer ?? 0;\r\n  const layerB = b.appearance?.layer ?? 0;\r\n  if (layerA !== layerB) return layerA - layerB;\r\n\r\n  return a.id - b.id;\r\n}\r\n", "export default function int(n?: number) {\r\n  return typeof n === \"undefined\" ? NaN : Math.floor(n);\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport function intPosition(pos: Position): Position {\r\n  return { x: int(pos.x), y: int(pos.y) };\r\n}\r\n\r\nexport function isSameCell(a: Position, b: Position): boolean {\r\n  const ia = intPosition(a);\r\n  const ib = intPosition(b);\r\n  return ia.x === ib.x && ia.y === ib.y;\r\n}\r\n\r\nexport function addPositions(a: Position, b: Position): Position {\r\n  return { x: a.x + b.x, y: a.y + b.y };\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { Position } from \"@app/components\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\ntype LayoutEntry<T = Entity> = [offset: Position, entity: T];\r\n\r\nexport function getLayoutMidpoint(\r\n  layout: LayoutEntry[],\r\n  topLeft: Position\r\n): Position {\r\n  if (!topLeft || !layout.length) throw new Error(\"Could not get midpoint\");\r\n\r\n  const avg = (key: keyof Position) =>\r\n    layout.reduce((total, [pos]) => total + pos[key], 0) / layout.length;\r\n\r\n  return { x: topLeft.x + avg(\"x\"), y: topLeft.y + avg(\"y\") };\r\n}\r\n\r\nexport function getLayoutBlockers(\r\n  g: Engine,\r\n  layout: LayoutEntry[],\r\n  topLeft: Position,\r\n  ignoreSolid: number[] = []\r\n): LayoutEntry<Entity | \"wall\">[] {\r\n  const blockers: LayoutEntry<Entity | \"wall\">[] = [];\r\n\r\n  for (const [offset] of layout) {\r\n    const pos = addPositions(topLeft, offset);\r\n    const { wall, solid } = g.getContents(pos, ignoreSolid);\r\n    if (wall) blockers.push([pos, \"wall\"]);\r\n    else if (solid) blockers.push([pos, solid]);\r\n  }\r\n\r\n  return blockers;\r\n}\r\n\r\nexport function getEntityTree(g: Engine, e: Entity) {\r\n  const root = g.getRoot(e);\r\n  return g.entities.get().filter((x) => g.getRoot(x) === root);\r\n}\r\n\r\nexport function getEntityTreeIDs(g: Engine, e: Entity) {\r\n  return getEntityTree(g, e).map((x) => x.id);\r\n}\r\n\r\nexport function getEntityLayout(g: Engine, e: Entity) {\r\n  const parts = getEntityTree(g, e);\r\n  const layout: LayoutEntry[] = [];\r\n\r\n  for (const x of parts) {\r\n    const { attachment, solid } = x;\r\n\r\n    if (attachment && solid)\r\n      layout.push([{ x: attachment.x, y: attachment.y }, x]);\r\n  }\r\n\r\n  return { layout, topLeft: g.getRoot(e).position };\r\n}\r\n\r\nexport function getEntityBlockers(g: Engine, e: Entity, origin?: Position) {\r\n  const ignoreSolid = getEntityTreeIDs(g, e);\r\n  const { layout, topLeft } = getEntityLayout(g, e);\r\n  if (!origin || !topLeft) return [];\r\n\r\n  return getLayoutBlockers(g, layout, origin || topLeft, ignoreSolid);\r\n}\r\n\r\nexport function getEntityMidpoint(g: Engine, e: Entity): Position {\r\n  const { layout, topLeft } = getEntityLayout(g, e);\r\n\r\n  if (!topLeft || !layout.length)\r\n    throw new Error(`Could not get midpoint of entity#${e.id}`);\r\n\r\n  return getLayoutMidpoint(layout, topLeft);\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const Battleship: Prefab = {\r\n  components: { ai: { idealDistance: 8, speed: 1 } },\r\n  children: [\r\n    { name: \"BattleshipHull\", x: 1, y: 0 },\r\n    { name: \"BattleshipHull\", x: 2, y: 0 },\r\n    { name: \"BattleshipHull\", x: 0, y: 1 },\r\n    { name: \"BattleshipHull\", x: 1, y: 1 },\r\n    { name: \"BattleshipHull\", x: 2, y: 1 },\r\n    { name: \"MachineGun\", x: 0, y: 1 },\r\n    { name: \"HomingMissileLauncher\", x: 2, y: 1 },\r\n    { name: \"FighterLauncher\", x: 2, y: 0 },\r\n  ],\r\n};\r\n\r\nexport const BattleshipHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"/\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.WHITE,\r\n      bg: Colors.BROWN,\r\n    },\r\n  },\r\n};\r\n", "enum Layer {\r\n  Effect,\r\n  Ship,\r\n  Gun,\r\n  Bullet,\r\n  Player,\r\n}\r\nexport default Layer;\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const Bullet: Prefab = {\r\n  components: {\r\n    projectile: true,\r\n    appearance: { glyph: \".\", layer: Layer.Bullet, fg: Colors.YELLOW },\r\n  },\r\n};\r\n\r\nexport const HomingMissile: Prefab = {\r\n  components: {\r\n    projectile: true,\r\n    homing: { strength: 0.15, duration: 10 },\r\n    trail: { effectPrefab: \"SmokePuff\" },\r\n    explodes: { size: 5, falloff: 1 },\r\n    appearance: { glyph: \"*\", layer: Layer.Bullet, fg: Colors.DARK_RED },\r\n  },\r\n};\r\n", "import { BlendMode, fromRgb } from \"wglt\";\r\n\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const AirFistRange: Prefab = {\r\n  components: {\r\n    lifetime: { duration: 2 },\r\n    appearance: {\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(0, 255, 255, 100),\r\n      blendMode: BlendMode.Add,\r\n    },\r\n  },\r\n};\r\n\r\nexport const SmokePuff: Prefab = {\r\n  components: {\r\n    lifetime: { duration: 2 },\r\n    appearance: {\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(100, 100, 100, 50),\r\n      blendMode: BlendMode.Add,\r\n    },\r\n  },\r\n};\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { makeTurret } from \"@app/components\";\r\n\r\nexport const FighterLauncher: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"_\", layer: Layer.Gun, fg: Colors.DARK_CYAN },\r\n    turret: makeTurret({\r\n      bulletPrefab: \"Fighter\",\r\n      bulletVelocity: 0,\r\n      salvoCount: 1,\r\n      timeBetweenSalvos: 20,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const Fighter: Prefab = {\r\n  components: { ai: { idealDistance: 6, speed: 2 } },\r\n  children: [\r\n    {\r\n      name: \"FighterHull\",\r\n      x: 0,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \"<\" } },\r\n    },\r\n    { name: \"FighterHull\", x: 1, y: 0 },\r\n    {\r\n      name: \"FighterHull\",\r\n      x: 2,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \">\" } },\r\n    },\r\n    { name: \"PeaShooter\", x: 1, y: 0 },\r\n  ],\r\n};\r\n\r\nexport const FighterHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"-\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.YELLOW,\r\n      bg: Colors.DARK_BLUE,\r\n    },\r\n  },\r\n};\r\n", "import AI from \"./AI\";\r\nimport Appearance from \"./Appearance\";\r\nimport Attachment from \"./Attachment\";\r\nimport Explodes from \"./Explodes\";\r\nimport Field from \"./Field\";\r\nimport Homing from \"./Homing\";\r\nimport IgnoreSolid from \"./IgnoreSolid\";\r\nimport Lifetime from \"./Lifetime\";\r\nimport Motion from \"./Motion\";\r\nimport Position from \"./Position\";\r\nimport Trail from \"./Trail\";\r\nimport Turret from \"./Turret\";\r\n\r\nexport type ComponentMap = {\r\n  ai: AI;\r\n  appearance: Appearance;\r\n  attachment: Attachment;\r\n  explodes: Explodes;\r\n  field: Field;\r\n  homing: Homing;\r\n  ignoreSolid: IgnoreSolid;\r\n  lifetime: Lifetime;\r\n  motion: Motion;\r\n  position: Position;\r\n  trail: Trail;\r\n  turret: Turret;\r\n\r\n  player: boolean;\r\n  projectile: boolean;\r\n  solid: boolean;\r\n};\r\nexport type EntityAttribute = keyof ComponentMap;\r\n\r\nexport {\r\n  AI,\r\n  Appearance,\r\n  Attachment,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  Lifetime,\r\n  Motion,\r\n  Position,\r\n  Trail,\r\n  Turret,\r\n};\r\n\r\nexport const makeTurret = ({\r\n  bulletPrefab = \"Bullet\",\r\n  bulletVelocity = 1,\r\n  salvoCount = 1,\r\n  timeBetweenShots = 1,\r\n  timeBetweenSalvos = 1,\r\n}: Partial<Turret>): Turret => ({\r\n  bulletPrefab,\r\n  bulletVelocity,\r\n  salvoCount,\r\n  timeBetweenShots,\r\n  timeBetweenSalvos,\r\n  timer: 0,\r\n  salvo: salvoCount,\r\n});\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\nimport { makeTurret } from \"@app/components\";\r\n\r\nexport const MachineGun: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.WHITE },\r\n    turret: makeTurret({\r\n      bulletPrefab: \"Bullet\",\r\n      bulletVelocity: 2,\r\n      salvoCount: 5,\r\n      timeBetweenShots: 0,\r\n      timeBetweenSalvos: 12,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const HomingMissileLauncher: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.YELLOW },\r\n    turret: makeTurret({\r\n      bulletPrefab: \"HomingMissile\",\r\n      bulletVelocity: 1,\r\n      salvoCount: 1,\r\n      timeBetweenSalvos: 8,\r\n    }),\r\n  },\r\n};\r\n\r\nexport const PeaShooter: Prefab = {\r\n  components: {\r\n    appearance: { glyph: \"o\", layer: Layer.Gun, fg: Colors.LIGHT_GRAY },\r\n    turret: makeTurret({\r\n      bulletPrefab: \"Bullet\",\r\n      bulletVelocity: 2,\r\n      salvoCount: 1,\r\n      timeBetweenSalvos: 3,\r\n    }),\r\n  },\r\n};\r\n", "import { Colors } from \"wglt\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport Prefab from \"@app/types/Prefab\";\r\n\r\nexport const PlayerHull: Prefab = {\r\n  components: {\r\n    solid: true,\r\n    appearance: {\r\n      glyph: \"#\",\r\n      layer: Layer.Player,\r\n      fg: Colors.WHITE,\r\n      bg: Colors.DARK_RED,\r\n    },\r\n  },\r\n};\r\n\r\nexport const Player: Prefab = {\r\n  components: { player: true },\r\n  children: [\r\n    { name: \"PlayerHull\", x: 0, y: 0 },\r\n    {\r\n      name: \"PlayerHull\",\r\n      x: 1,\r\n      y: 0,\r\n      overlay: { appearance: { glyph: \">\" } },\r\n    },\r\n  ],\r\n};\r\n", "import * as battleship from \"./battleship\";\r\nimport * as bullet from \"./bullet\";\r\nimport * as effect from \"./effect\";\r\nimport * as fighter from \"./fighter\";\r\nimport * as gun from \"./gun\";\r\nimport * as player from \"./player\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\n\r\nconst AllPrefabs = {\r\n  ...battleship,\r\n  ...bullet,\r\n  ...effect,\r\n  ...fighter,\r\n  ...gun,\r\n  ...player,\r\n};\r\n\r\nexport type PrefabName = keyof typeof AllPrefabs;\r\n\r\nexport default function instantiate(g: Engine, name: PrefabName) {\r\n  return g.add(new Entity(g, name).applyPrefab(name, AllPrefabs[name]));\r\n}\r\n", "import Entity from \"@app/Entity\";\r\n\r\nexport default class EntityList {\r\n  dirty: boolean;\r\n\r\n  constructor(\r\n    private compareFn: (a: Entity, b: Entity) => number,\r\n    private entities: Entity[] = []\r\n  ) {\r\n    this.dirty = true;\r\n  }\r\n\r\n  clear() {\r\n    this.entities = [];\r\n    this.dirty = false;\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.entities.push(e);\r\n    this.dirty = true;\r\n  }\r\n\r\n  clearDead() {\r\n    this.entities = this.entities.filter((i) => i.alive);\r\n  }\r\n\r\n  sort() {\r\n    this.entities.sort(this.compareFn);\r\n    this.dirty = false;\r\n  }\r\n\r\n  get() {\r\n    if (this.dirty) this.sort();\r\n    return this.entities.slice();\r\n  }\r\n}\r\n", "import { ComponentMap, EntityAttribute } from \"@app/components\";\r\n\r\nimport Entity from \"@app/Entity\";\r\nimport EntityList from \"@app/EntityList\";\r\n\r\nexport type HasComponents<T extends EntityAttribute[]> = Pick<\r\n  ComponentMap,\r\n  T[number]\r\n> &\r\n  Partial<ComponentMap>;\r\n\r\nexport type QueryCallback<T extends EntityAttribute[]> = (\r\n  components: HasComponents<T>,\r\n  e: Entity\r\n) => void;\r\n\r\nexport default class Query<T extends EntityAttribute[]> {\r\n  constructor(private list: EntityList, private filter: T) {}\r\n\r\n  matches(e: Entity) {\r\n    if (!e.alive) return false;\r\n\r\n    for (const key of this.filter) {\r\n      if (!e[key]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  forEach(cb: QueryCallback<T>) {\r\n    for (const e of this.list.get()) {\r\n      if (this.matches(e)) cb(e as HasComponents<T>, e);\r\n    }\r\n  }\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport { addPositions } from \"@app/tools/position\";\r\n\r\nexport const neighbourOffsets: Position[] = [\r\n  { x: -1, y: -1 },\r\n  { x: -1, y: 0 },\r\n  { x: -1, y: 1 },\r\n  { x: 0, y: 1 },\r\n  { x: 1, y: 1 },\r\n  { x: 1, y: 0 },\r\n  { x: 1, y: -1 },\r\n  { x: 0, y: -1 },\r\n];\r\n\r\nexport default function neighbours(pos: Position): Position[] {\r\n  return neighbourOffsets.map((o) => addPositions(pos, o));\r\n}\r\n", "export default function oneOf<T>(items: T[]): T {\r\n  if (!items.length) throw new Error(\"oneOf passed empty array\");\r\n\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n", "import { addPositions, intPosition } from \"@app/tools/position\";\r\nimport { getEntityLayout, getEntityTreeIDs } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport { Position } from \"@app/components\";\r\nimport Query from \"@app/Query\";\r\nimport { neighbourOffsets } from \"@app/logic/neighbours\";\r\nimport oneOf from \"@app/tools/oneOf\";\r\n\r\nexport default function addAI(g: Engine) {\r\n  const query = new Query(g.entities, [\"ai\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ ai, position: rawPosition }, e) => {\r\n      const ignoreSolid = getEntityTreeIDs(g, e);\r\n      const { layout } = getEntityLayout(g, e);\r\n      const position = intPosition(rawPosition);\r\n\r\n      const search = g.getPlayerDistanceMap();\r\n\r\n      const isPassable = (pos: Position) => {\r\n        const { solid, wall } = g.getContents(pos, ignoreSolid);\r\n        return !solid && !wall;\r\n      };\r\n\r\n      const getPosScore = (pos: Position) =>\r\n        isPassable(pos)\r\n          ? Math.abs(search.getOrDefault(pos, Infinity) - ai.idealDistance)\r\n          : Infinity;\r\n\r\n      const getScore = (pos: Position) =>\r\n        layout.reduce((a, [b]) => a + getPosScore(addPositions(pos, b)), 0) /\r\n        layout.length;\r\n\r\n      let bestScore = getScore(position);\r\n\r\n      let possibilities: Position[] = [];\r\n      for (const offset of neighbourOffsets) {\r\n        const possibility = addPositions(position, offset);\r\n        if (!search.has(possibility)) continue;\r\n\r\n        const score = getScore(possibility);\r\n        if (score < bestScore) {\r\n          bestScore = score;\r\n          possibilities = [possibility];\r\n        } else if (score === bestScore) possibilities.push(possibility);\r\n      }\r\n\r\n      if (possibilities.length) {\r\n        const destination = oneOf(possibilities);\r\n        e.move(destination.x, destination.y);\r\n        return;\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport default function addDisplay(g: Engine) {\r\n  const query = new Query(g.entities, [\"appearance\", \"position\"]);\r\n  g.on(\"draw\", () =>\r\n    query.forEach(({ appearance, position }) =>\r\n      g.drawIfVisible(\r\n        int(position.x),\r\n        int(position.y),\r\n        appearance.glyph,\r\n        appearance.fg,\r\n        appearance.bg,\r\n        appearance.blendMode\r\n      )\r\n    )\r\n  );\r\n}\r\n", "import { Appearance, Field, Position } from \"@app/components\";\r\n\r\nimport { BlendMode } from \"wglt\";\r\nimport FieldType from \"@app/types/FieldType\";\r\nimport GradientRun from \"@app/GradientRun\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport distance from \"@app/tools/distance\";\r\n\r\nexport type FieldCell = { x: number; y: number; intensity: number };\r\n\r\nconst fieldGradients: Record<FieldType, GradientRun> = {\r\n  fire: new GradientRun([\r\n    [0, [0, 0, 0, 0]],\r\n    [2, [255, 0, 0, 150]],\r\n    [4, [255, 255, 0, 150]],\r\n    [6, [255, 255, 255, 150]],\r\n    [10, [255, 255, 255, 255]],\r\n  ]),\r\n};\r\n\r\nexport function getFieldAppearance(field: Field): Appearance | undefined {\r\n  if (field.intensity <= 0) return undefined;\r\n\r\n  return {\r\n    glyph: \" \",\r\n    layer: Layer.Effect,\r\n    bg: fieldGradients[field.type].get(field.intensity),\r\n    blendMode: BlendMode.Add,\r\n  };\r\n}\r\n\r\n// TODO shape around walls lol\r\nexport function generateField(centre: Position, size: number) {\r\n  const parts: FieldCell[] = [];\r\n\r\n  const minX = Math.floor(centre.x - size);\r\n  const maxX = Math.ceil(centre.x + size);\r\n  const minY = Math.floor(centre.y - size);\r\n  const maxY = Math.ceil(centre.y + size);\r\n\r\n  for (let y = minY; y <= maxY; y++) {\r\n    for (let x = minX; x <= maxX; x++) {\r\n      const dist = distance(centre, { x, y });\r\n      if (dist >= size) continue;\r\n\r\n      parts.push({ x, y, intensity: size - dist });\r\n    }\r\n  }\r\n\r\n  return parts;\r\n}\r\n", "import RGBA from \"@app/types/RGBA\";\r\nimport { fromRgb } from \"wglt\";\r\nimport lerp from \"@app/tools/lerp\";\r\n\r\ntype GradientPoint = [breakpoint: number, colour: RGBA];\r\n\r\nexport default class GradientRun {\r\n  constructor(public points: GradientPoint[]) {\r\n    this.sort();\r\n  }\r\n\r\n  private sort() {\r\n    this.points.sort(([a], [b]) => a - b);\r\n  }\r\n\r\n  add(breakpoint: number, c: RGBA): this {\r\n    this.points.push([breakpoint, c]);\r\n    this.sort();\r\n    return this;\r\n  }\r\n\r\n  get(value: number) {\r\n    const [low, lowColour] = this.points[0];\r\n    if (value <= low) return fromRgb(...lowColour);\r\n\r\n    const [high, highColour] = this.points[this.points.length - 1];\r\n    if (value >= high) return fromRgb(...highColour);\r\n\r\n    const higherIndex = this.points.findIndex(([p]) => p > value);\r\n    const [below, [ar, ag, ab, aa]] = this.points[higherIndex - 1];\r\n    const [above, [br, bg, bb, ba]] = this.points[higherIndex];\r\n\r\n    const r = (value - below) / (above - below);\r\n    return fromRgb(\r\n      lerp(ar, br, r),\r\n      lerp(ag, bg, r),\r\n      lerp(ab, bb, r),\r\n      lerp(aa, ba, r)\r\n    );\r\n  }\r\n}\r\n", "export default function lerp(start: number, end: number, t: number) {\r\n  return start * (1.0 - t) + end * t;\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\nexport default function distance(a: Position, b: Position) {\r\n  const dx = Math.abs(a.x - b.x);\r\n  const dy = Math.abs(a.y - b.y);\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { generateField } from \"@app/logic/field\";\r\n\r\nexport default function addExplosives(g: Engine) {\r\n  g.on(\"kill\", ({ e }) => {\r\n    const { explodes, name, position } = e;\r\n\r\n    if (explodes && position) {\r\n      for (const { x, y, intensity } of generateField(position, explodes.size))\r\n        g.add(\r\n          new Entity(g, name + \"Explosion\").setPosition({ x, y }).setField({\r\n            type: \"fire\",\r\n            intensity,\r\n            falloff: explodes.falloff,\r\n          })\r\n        );\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { getFieldAppearance } from \"@app/logic/field\";\r\n\r\nexport default function addFields(g: Engine) {\r\n  const query = new Query(g.entities, [\"field\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ field }, e) => {\r\n      field.intensity -= field.falloff;\r\n      e.setAppearance(getFieldAppearance(field));\r\n\r\n      if (field.intensity <= 0) g.delete(e);\r\n      else {\r\n        // TODO damage etc.\r\n      }\r\n    })\r\n  );\r\n  g.on(\"spawn\", ({ e }) => {\r\n    if (e.field) e.setAppearance(getFieldAppearance(e.field));\r\n  });\r\n}\r\n", "import { Motion, Position } from \"@app/components\";\r\n\r\nconst tau = Math.PI * 2;\r\n\r\nexport function angleBetween(a: Position, b: Position) {\r\n  return Math.atan2(b.y - a.y, b.x - a.x);\r\n}\r\n\r\nexport function angleDiff(x: number, y: number) {\r\n  const a = (x - y) % tau;\r\n  const b = (y - x) % tau;\r\n\r\n  return a < b ? -a : b;\r\n}\r\n\r\nexport function angleMove(mo: Motion): [dx: number, dy: number] {\r\n  const dx = Math.cos(mo.angle) * mo.vel;\r\n  const dy = Math.sin(mo.angle) * mo.vel;\r\n  return [dx, dy];\r\n}\r\n", "import { angleBetween, angleDiff } from \"@app/tools/angle\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { getEntityMidpoint } from \"@app/logic/entity\";\r\n\r\nexport default function addHoming(g: Engine) {\r\n  const query = new Query(g.entities, [\"homing\", \"motion\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ homing, motion, position }, e) => {\r\n      const centre = getEntityMidpoint(g, g.player);\r\n      const desired = angleBetween(position, centre);\r\n      const diff = angleDiff(motion.angle, desired);\r\n\r\n      if (Math.abs(diff) <= homing.strength) motion.angle = desired;\r\n      else if (diff < 0) motion.angle -= homing.strength;\r\n      else motion.angle += homing.strength;\r\n\r\n      if (--homing.duration <= 0) {\r\n        e.setHoming();\r\n        e.setTrail();\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\n\r\nexport default function addLifetime(g: Engine) {\r\n  const query = new Query(g.entities, [\"lifetime\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ lifetime }, e) => {\r\n      if (--lifetime.duration <= 0) g.delete(e);\r\n    })\r\n  );\r\n}\r\n", "import { Position } from \"@app/components\";\r\nimport int from \"@app/tools/int\";\r\n\r\n/// thanks https://www.redblobgames.com/grids/line-drawing.html#stepping\r\nexport function walkGrid(a: Position, b: Position) {\r\n  const dx = b.x - a.x,\r\n    dy = b.y - a.y,\r\n    nx = Math.abs(dx),\r\n    ny = Math.abs(dy),\r\n    signX = dx > 0 ? 1 : -1,\r\n    signY = dy > 0 ? 1 : -1;\r\n\r\n  const p = { ...a };\r\n  const points = [{ ...p }];\r\n  for (let ix = 0, iy = 0; ix < nx || iy < ny; ) {\r\n    if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n      // next step is horizontal\r\n      p.x += signX;\r\n      ix++;\r\n    } else {\r\n      // next step is vertical\r\n      p.y += signY;\r\n      iy++;\r\n    }\r\n    points.push({ ...p });\r\n  }\r\n  return points;\r\n}\r\n\r\n/// thanks https://www.redblobgames.com/grids/circle-drawing/#outline\r\nexport function getCirclePoints(cx: number, cy: number, radius: number) {\r\n  const points: Position[] = [];\r\n\r\n  const add = (rawX: number, rawY: number) => {\r\n    const x = int(rawX);\r\n    const y = int(rawY);\r\n    if (!points.find((p) => p.x === x && p.y === y)) points.push({ x, y });\r\n  };\r\n\r\n  for (let r = 0; r <= Math.floor(radius * Math.sqrt(0.5)); r++) {\r\n    const d = Math.floor(Math.sqrt(radius * radius - r * r));\r\n    add(cx - d, cy + r);\r\n    add(cx + d, cy + r);\r\n    add(cx - d, cy - r);\r\n    add(cx + d, cy - r);\r\n    add(cx + r, cy - d);\r\n    add(cx + r, cy + d);\r\n    add(cx - r, cy - d);\r\n    add(cx - r, cy + d);\r\n  }\r\n\r\n  return points;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Query from \"@app/Query\";\r\nimport { angleMove } from \"@app/tools/angle\";\r\nimport { intPosition } from \"@app/tools/position\";\r\nimport { walkGrid } from \"@app/logic/geometry\";\r\n\r\nexport default function addMotion(g: Engine) {\r\n  const query = new Query(g.entities, [\"motion\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ motion, position, ignoreSolid }, e) => {\r\n      const [dx, dy] = angleMove(motion);\r\n      const dst = { x: position.x + dx, y: position.y + dy };\r\n\r\n      const line = walkGrid(intPosition(position), intPosition(dst));\r\n\r\n      let hitWall = false;\r\n      let hitEntity: Entity | undefined = undefined;\r\n      for (const pos of line) {\r\n        g.move(e, pos);\r\n\r\n        const { wall, solid } = g.getContents(pos, ignoreSolid?.ids);\r\n        if (wall) {\r\n          hitWall = true;\r\n          break;\r\n        } else if (solid) {\r\n          hitEntity = solid;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (hitWall) {\r\n        g.delete(e);\r\n      } else if (hitEntity) {\r\n        // TODO damage etc.\r\n        g.delete(e);\r\n      } else {\r\n        g.move(e, dst);\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { addPositions } from \"@app/tools/position\";\r\nimport { getEntityBlockers } from \"@app/logic/entity\";\r\n\r\nexport default function addPlayer(g: Engine) {\r\n  g.on(\"playerMove\", ({ move }) => {\r\n    const player = g.player;\r\n    const destination = addPositions(player.position!, move);\r\n    const blockers = getEntityBlockers(g, player, destination);\r\n    if (!blockers.length) {\r\n      player.move(destination.x, destination.y);\r\n      g.fovRecompute = true;\r\n      g.tick();\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { isSameCell } from \"@app/tools/position\";\r\n\r\nexport default function addTrails(g: Engine) {\r\n  g.on(\"move\", ({ e, old, pos }) => {\r\n    if (e.trail && !isSameCell(old, pos))\r\n      g.spawn(e.trail.effectPrefab).setPosition(old);\r\n  });\r\n}\r\n", "import { Turret } from \"@app/components\";\r\n\r\nexport default function isTurretFiring(state: Turret): boolean {\r\n  if (state.timer) {\r\n    state.timer--;\r\n    if (state.timer <= 0 && state.salvo <= 0) state.salvo = state.salvoCount;\r\n    return false;\r\n  }\r\n\r\n  if (--state.salvo <= 0) state.timer = state.timeBetweenSalvos;\r\n  else state.timer = state.timeBetweenShots;\r\n  return true;\r\n}\r\n", "import { getEntityMidpoint, getEntityTreeIDs } from \"@app/logic/entity\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\nimport isTurretFiring from \"@app/logic/turret\";\r\n\r\nexport default function addTurrets(g: Engine) {\r\n  const query = new Query(g.entities, [\"position\", \"turret\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ position, turret }, e) => {\r\n      if (isTurretFiring(turret)) {\r\n        const start = { x: position.x + 0.5, y: position.y + 0.5 };\r\n        const target = getEntityMidpoint(g, g.player);\r\n\r\n        const bullet = g\r\n          .spawn(turret.bulletPrefab)\r\n          .setIgnoreSolid({ ids: getEntityTreeIDs(g, e) });\r\n\r\n        bullet.move(start.x, start.y);\r\n        if (turret.bulletVelocity)\r\n          bullet.setMotion({\r\n            angle: angleBetween(start, target),\r\n            vel: turret.bulletVelocity,\r\n          });\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport addAI from \"./AI\";\r\nimport addDisplay from \"./Display\";\r\nimport addExplosives from \"./Explosives\";\r\nimport addFields from \"./Fields\";\r\nimport addHoming from \"./Homing\";\r\nimport addLifetime from \"./Lifetime\";\r\nimport addMotion from \"./Motion\";\r\nimport addPlayer from \"./Player\";\r\nimport addTrails from \"./Trails\";\r\nimport addTurrets from \"./Turrets\";\r\n\r\nexport function addSystems(g: Engine) {\r\n  addLifetime(g);\r\n  addHoming(g);\r\n  addTurrets(g);\r\n  addFields(g);\r\n  addMotion(g);\r\n  addAI(g);\r\n\r\n  addDisplay(g);\r\n\r\n  addTrails(g);\r\n\r\n  addExplosives(g);\r\n\r\n  addPlayer(g);\r\n}\r\n", "export default class HashMap<K, V> {\r\n  items: Map<string, V>;\r\n\r\n  constructor(private keyFn: (key: K) => string) {\r\n    this.items = new Map();\r\n  }\r\n\r\n  has(key: K) {\r\n    return this.items.has(this.keyFn(key));\r\n  }\r\n\r\n  get(key: K) {\r\n    return this.items.get(this.keyFn(key));\r\n  }\r\n\r\n  getOrDefault(key: K, fallback: V) {\r\n    const value = this.items.get(this.keyFn(key));\r\n    return typeof value !== \"undefined\" ? value : fallback;\r\n  }\r\n\r\n  getOrDie(key: K) {\r\n    const s = this.keyFn(key);\r\n    const item = this.items.get(s);\r\n    if (typeof item === \"undefined\") throw new Error(`Invalid key: ${s}`);\r\n    return item;\r\n  }\r\n\r\n  set(key: K, value: V) {\r\n    this.items.set(this.keyFn(key), value);\r\n  }\r\n}\r\n", "import HashMap from \"@app/HashMap\";\r\nimport { Position } from \"@app/components\";\r\nimport neighbours from \"@app/logic/neighbours\";\r\n\r\nexport default function bfs(\r\n  start: Position[],\r\n  isPassable: (pos: Position) => boolean,\r\n  maximum: number = Infinity\r\n) {\r\n  const frontier: Position[] = [];\r\n  const costs = new HashMap<Position, number>((p) => `${p.x},${p.y}`);\r\n\r\n  for (const location of start) {\r\n    frontier.push(location);\r\n    costs.set(location, 0);\r\n  }\r\n\r\n  while (true) {\r\n    const current = frontier.shift();\r\n    if (!current) break;\r\n\r\n    const neighbourCost = costs.getOrDie(current) + 1;\r\n    if (neighbourCost > maximum) continue;\r\n\r\n    for (const neighbour of neighbours(current)) {\r\n      if (!costs.has(neighbour) && isPassable(neighbour)) {\r\n        costs.set(neighbour, neighbourCost);\r\n        frontier.push(neighbour);\r\n      }\r\n    }\r\n  }\r\n\r\n  return costs;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { Position } from \"@app/components\";\r\nimport { angleBetween } from \"@app/tools/angle\";\r\nimport distance from \"@app/tools/distance\";\r\nimport { getCirclePoints } from \"@app/logic/geometry\";\r\n\r\nexport function fireAirFist(g: Engine, centre: Position, power: number) {\r\n  for (const e of g.entities.get()) {\r\n    const { motion, projectile, position } = e;\r\n    if (\r\n      motion &&\r\n      projectile &&\r\n      position &&\r\n      distance(centre, position) <= power\r\n    ) {\r\n      const angle = angleBetween(centre, position);\r\n      motion.angle = angle;\r\n\r\n      e.setIgnoreSolid();\r\n    }\r\n  }\r\n\r\n  for (const point of getCirclePoints(centre.x, centre.y, power))\r\n    g.spawn(\"AirFistRange\").setPosition(point);\r\n}\r\n", "export default function isDefined<T>(obj?: T): obj is T {\r\n  return typeof obj !== \"undefined\";\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { Terminal } from \"wglt\";\r\n\r\nfunction loadEngine(parent: HTMLElement) {\r\n  const cols = 60;\r\n  const rows = 40;\r\n\r\n  const container = document.createElement(\"div\");\r\n  parent.appendChild(container);\r\n  const onResize = () => {\r\n    const wantWidth = cols * 8;\r\n    const wantHeight = rows * 8;\r\n\r\n    const ratioWidth = Math.floor(window.innerWidth / wantWidth);\r\n    const ratioHeight = Math.floor(window.innerHeight / wantHeight);\r\n    const ratio = Math.min(ratioWidth, ratioHeight);\r\n\r\n    container.style.width = `${wantWidth * ratio}px`;\r\n    container.style.height = `${wantHeight * ratio}px`;\r\n  };\r\n  window.addEventListener(\"resize\", onResize);\r\n  onResize();\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  container.appendChild(canvas);\r\n  requestAnimationFrame(() => canvas.focus());\r\n\r\n  const term = new Terminal(canvas, cols, rows);\r\n  const g = new Engine(term);\r\n  g.gotoDemoRoom();\r\n  (window as any).g = g;\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => loadEngine(document.body));\r\n"],
  "mappings": "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",
  "names": ["require_wglt", "__commonJSMin", "exports", "module", "import_wglt", "clone", "src", "seen", "copy", "k", "v", "src_default", "clone", "src_default", "keys", "Entity", "g", "name", "prefab", "clone", "x", "y", "overlay", "child", "key", "keys", "e", "callback", "_a", "c", "tag", "at", "compareEntities", "a", "b", "_b", "_c", "_d", "layerA", "layerB", "int", "n", "intPosition", "pos", "int", "isSameCell", "a", "b", "ia", "ib", "addPositions", "getLayoutMidpoint", "layout", "topLeft", "avg", "key", "total", "pos", "getLayoutBlockers", "g", "ignoreSolid", "blockers", "offset", "addPositions", "wall", "solid", "getEntityTree", "e", "root", "x", "getEntityTreeIDs", "getEntityLayout", "parts", "attachment", "getEntityBlockers", "origin", "getEntityMidpoint", "battleship_exports", "__export", "Battleship", "BattleshipHull", "import_wglt", "Layer", "Layer_default", "Battleship", "BattleshipHull", "Layer_default", "bullet_exports", "__export", "Bullet", "HomingMissile", "import_wglt", "Bullet", "Layer_default", "HomingMissile", "effect_exports", "__export", "AirFistRange", "SmokePuff", "import_wglt", "AirFistRange", "Layer_default", "SmokePuff", "fighter_exports", "__export", "Fighter", "FighterHull", "FighterLauncher", "import_wglt", "makeTurret", "bulletPrefab", "bulletVelocity", "salvoCount", "timeBetweenShots", "timeBetweenSalvos", "FighterLauncher", "Layer_default", "makeTurret", "Fighter", "FighterHull", "gun_exports", "__export", "HomingMissileLauncher", "MachineGun", "PeaShooter", "import_wglt", "MachineGun", "Layer_default", "makeTurret", "HomingMissileLauncher", "PeaShooter", "player_exports", "__export", "Player", "PlayerHull", "import_wglt", "PlayerHull", "Layer_default", "Player", "AllPrefabs", "__spreadValues", "battleship_exports", "bullet_exports", "effect_exports", "fighter_exports", "gun_exports", "player_exports", "instantiate", "g", "name", "Entity", "EntityList", "compareFn", "entities", "e", "i", "Query", "list", "filter", "e", "key", "cb", "neighbourOffsets", "neighbours", "pos", "o", "addPositions", "oneOf", "items", "addAI", "g", "query", "Query", "ai", "rawPosition", "e", "ignoreSolid", "getEntityTreeIDs", "layout", "getEntityLayout", "position", "intPosition", "search", "isPassable", "pos", "solid", "wall", "getPosScore", "getScore", "a", "b", "addPositions", "bestScore", "possibilities", "offset", "neighbourOffsets", "possibility", "score", "destination", "oneOf", "addDisplay", "g", "query", "Query", "appearance", "position", "int", "import_wglt", "import_wglt", "lerp", "start", "end", "t", "GradientRun", "points", "a", "b", "breakpoint", "c", "value", "low", "lowColour", "high", "highColour", "higherIndex", "p", "below", "ar", "ag", "ab", "aa", "above", "br", "bg", "bb", "ba", "r", "lerp", "distance", "a", "b", "dx", "dy", "fieldGradients", "GradientRun", "getFieldAppearance", "field", "Layer_default", "generateField", "centre", "size", "parts", "minX", "maxX", "minY", "maxY", "y", "x", "dist", "distance", "addExplosives", "g", "e", "explodes", "name", "position", "x", "y", "intensity", "generateField", "Entity", "addFields", "g", "query", "Query", "field", "e", "getFieldAppearance", "tau", "angleBetween", "a", "b", "angleDiff", "x", "y", "angleMove", "mo", "dx", "dy", "addHoming", "g", "query", "Query", "homing", "motion", "position", "e", "centre", "getEntityMidpoint", "desired", "angleBetween", "diff", "angleDiff", "addLifetime", "g", "query", "Query", "lifetime", "e", "walkGrid", "a", "b", "dx", "dy", "nx", "ny", "signX", "signY", "p", "__spreadValues", "points", "ix", "iy", "getCirclePoints", "cx", "cy", "radius", "add", "rawX", "rawY", "x", "int", "y", "r", "d", "addMotion", "g", "query", "Query", "motion", "position", "ignoreSolid", "e", "dx", "dy", "angleMove", "dst", "line", "walkGrid", "intPosition", "hitWall", "hitEntity", "pos", "wall", "solid", "addPlayer", "g", "move", "player", "destination", "addPositions", "getEntityBlockers", "addTrails", "g", "e", "old", "pos", "isSameCell", "isTurretFiring", "state", "addTurrets", "g", "query", "Query", "position", "turret", "e", "isTurretFiring", "start", "target", "getEntityMidpoint", "bullet", "getEntityTreeIDs", "angleBetween", "addSystems", "g", "addLifetime", "addHoming", "addTurrets", "addFields", "addMotion", "addAI", "addDisplay", "addTrails", "addExplosives", "addPlayer", "HashMap", "keyFn", "key", "fallback", "value", "s", "item", "bfs", "start", "isPassable", "maximum", "frontier", "costs", "HashMap", "p", "location", "current", "neighbourCost", "neighbour", "neighbours", "fireAirFist", "g", "centre", "power", "e", "motion", "projectile", "position", "distance", "angle", "angleBetween", "point", "getCirclePoints", "isDefined", "obj", "MAP_WIDTH", "MAP_HEIGHT", "Engine", "term", "mapWidth", "mapHeight", "EntityList", "compareEntities", "addSystems", "player", "e", "name", "data", "cb", "handler", "instantiate", "pos", "old", "sx", "sy", "w", "h", "map", "yo", "xo", "wall", "x", "y", "g", "fg", "bg", "bm", "cell", "visible", "overlay", "value", "ch", "ignoreSolid", "square", "intPosition", "entities", "isSameCell", "solid", "move", "fireAirFist", "getEntityMidpoint", "key", "bfs", "getEntityTree", "isDefined", "import_wglt", "loadEngine", "parent", "container", "onResize", "ratioWidth", "ratioHeight", "ratio", "canvas", "term", "g", "Engine"]
}
