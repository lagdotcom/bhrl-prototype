{
  "version": 3,
  "sources": ["globalExternal:wglt", "../src/Engine.ts", "../src/Entity.ts", "../src/prefabs/battleship.ts", "../src/types/Layer.ts", "../src/prefabs/bullet.ts", "../src/prefabs/effect.ts", "../src/prefabs/gun.ts", "../src/components/index.ts", "../src/prefabs/player.ts", "../src/prefabs/index.ts", "../src/EntityList.ts", "../src/Query.ts", "../src/tools/int.ts", "../src/systems/DrawEntities.ts", "../src/logic/field.ts", "../src/GradientRun.ts", "../src/tools/lerp.ts", "../src/tools/distance.ts", "../src/systems/Explosives.ts", "../src/systems/Fields.ts", "../src/tools/angleDiff.ts", "../src/systems/Homing.ts", "../src/systems/Lifetime.ts", "../src/tools/angleMove.ts", "../src/logic/geometry.ts", "../src/systems/Motion.ts", "../src/systems/Trails.ts", "../src/logic/turret.ts", "../src/systems/Turrets.ts", "../src/systems/index.ts", "../src/index.ts"],
  "sourcesContent": ["module.exports = globalThis.wglt", "import { BlendMode, Cell, Colors, Console, Terminal } from \"wglt\";\r\nimport Entity, { compareEntities } from \"@app/Entity\";\r\nimport { EventCallback, EventHandler, EventMap, EventName } from \"@app/events\";\r\nimport instantiate, { PrefabName } from \"@app/prefabs\";\r\n\r\nimport EntityList from \"@app/EntityList\";\r\nimport { Position } from \"@app/components\";\r\nimport { addSystems } from \"./systems\";\r\nimport int from \"@app/tools/int\";\r\n\r\nconst MAP_WIDTH = 60;\r\nconst MAP_HEIGHT = 40;\r\n\r\nexport default class Engine implements EventHandler {\r\n  lastEntityId: number;\r\n\r\n  dirty: boolean;\r\n  fovRecompute: boolean;\r\n  map: Console;\r\n  entities: EntityList;\r\n  eventCallbacks: Record<EventName, EventCallback<any>[]>;\r\n\r\n  constructor(\r\n    public term: Terminal,\r\n    public mapWidth = MAP_WIDTH,\r\n    public mapHeight = MAP_HEIGHT\r\n  ) {\r\n    term.update = this.update.bind(this);\r\n\r\n    this.dirty = true;\r\n    this.fovRecompute = true;\r\n    this.map = new Console(mapWidth, mapHeight, () => true);\r\n    this.lastEntityId = 0;\r\n    this.entities = new EntityList(compareEntities);\r\n\r\n    this.eventCallbacks = { draw: [], kill: [], move: [], spawn: [], tick: [] };\r\n    addSystems(this);\r\n  }\r\n\r\n  get player() {\r\n    const player = this.entities.get().find((e) => e.player);\r\n    if (!player) throw new Error(\"Could not find a player!\");\r\n    return player;\r\n  }\r\n\r\n  fire<T extends EventName>(name: T, data: EventMap[T]): void {\r\n    for (const cb of this.eventCallbacks[name]) cb(data);\r\n  }\r\n\r\n  on<T extends EventName>(name: T, handler: EventCallback<T>): void {\r\n    this.eventCallbacks[name].push(handler);\r\n  }\r\n\r\n  spawn(name: PrefabName) {\r\n    return instantiate(this, name);\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.dirty = true;\r\n    this.entities.add(e);\r\n    this.fire(\"spawn\", { e });\r\n    return e;\r\n  }\r\n\r\n  delete(e: Entity) {\r\n    if (e.alive) {\r\n      e.kill();\r\n      this.fire(\"kill\", { e });\r\n    }\r\n  }\r\n\r\n  move(e: Entity, pos: Position) {\r\n    const old = e.position;\r\n    e.move(pos.x, pos.y);\r\n    if (old) this.fire(\"move\", { e, old, pos });\r\n  }\r\n\r\n  gotoDemoRoom() {\r\n    this.entities.clear();\r\n\r\n    this.map.clear();\r\n    this.room(1, 1, 40, 30);\r\n    this.spawn(\"Player\").move(5, 25);\r\n    this.spawn(\"Battleship\").move(8, 5);\r\n  }\r\n\r\n  room(sx: number, sy: number, w: number, h: number) {\r\n    const { map } = this;\r\n\r\n    for (let yo = 0; yo < h; yo++) {\r\n      for (let xo = 0; xo < w; xo++) {\r\n        const wall = xo === 0 || yo === 0 || xo === w - 1 || yo === h - 1;\r\n        const x = sx + xo;\r\n        const y = sy + yo;\r\n\r\n        map.setBlocked(x, y, wall);\r\n        map.setBlockedSight(x, y, wall);\r\n      }\r\n    }\r\n  }\r\n\r\n  drawAt(\r\n    x: number,\r\n    y: number,\r\n    g: string | number,\r\n    fg?: number,\r\n    bg?: number,\r\n    bm?: BlendMode\r\n  ) {\r\n    if (this.map.isVisible(x, y)) {\r\n      if (bm) this.term.drawCell(x, y, { bg } as Cell, bm);\r\n      else this.term.drawChar(x, y, g, fg, bg);\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    const { map, mapWidth, mapHeight, player } = this;\r\n\r\n    if (this.fovRecompute) {\r\n      map.computeFov(player.position!.x, player.position!.y, 20);\r\n      this.fovRecompute = false;\r\n    }\r\n\r\n    for (let y = 0; y < mapHeight; y++) {\r\n      for (let x = 0; x < mapWidth; x++) {\r\n        const cell = map.grid[y][x];\r\n        const visible = map.isVisible(x, y);\r\n        const wall = cell.blockedSight;\r\n        let bg = Colors.BLACK;\r\n\r\n        if (visible) {\r\n          // It's visible\r\n          bg = wall ? Colors.WHITE : Colors.DARK_GRAY;\r\n          cell.explored = true;\r\n        } else if (cell.explored) {\r\n          // It's remembered\r\n          bg = wall ? Colors.LIGHT_GRAY : Colors.BLACK;\r\n        }\r\n\r\n        this.drawAt(x, y, 0, 0, bg);\r\n      }\r\n    }\r\n\r\n    this.fire(\"draw\", undefined);\r\n    this.dirty = false;\r\n  }\r\n\r\n  getRootID(e: Entity): number {\r\n    return e.attachment ? this.getRootID(e.attachment.parent) : e.id;\r\n  }\r\n\r\n  getContents(pos: Position) {\r\n    const square = { x: int(pos.x), y: int(pos.y) };\r\n\r\n    const wall = this.map.isBlocked(square.x, square.y);\r\n    const entities = this.entities\r\n      .get()\r\n      .filter(\r\n        (e) => int(e.position?.x) === square.x && int(e.position?.y) == square.y\r\n      );\r\n    const solid = entities.find((e) => e.solid);\r\n\r\n    return { wall, solid, other: entities.filter((e) => !e.solid) };\r\n  }\r\n\r\n  tick() {\r\n    this.fire(\"tick\", undefined);\r\n    this.entities.clearDead();\r\n  }\r\n\r\n  handleKeys() {\r\n    const { map, player, term } = this;\r\n\r\n    const move = term.getMovementKey();\r\n    if (move) {\r\n      const dx = player.position!.x + move.x;\r\n      const dy = player.position!.y + move.y;\r\n\r\n      if (!map.isBlocked(dx, dy)) {\r\n        player.move(dx, dy);\r\n        this.fovRecompute = true;\r\n\r\n        this.tick();\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.handleKeys();\r\n    if (this.dirty) this.draw();\r\n  }\r\n}\r\n", "import {\r\n  Appearance,\r\n  Attachment,\r\n  EntityMap,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  Lifetime,\r\n  Motion,\r\n  Position,\r\n  Trail,\r\n  Turret,\r\n} from \"@app/components\";\r\n\r\nimport Engine from \"@app/Engine\";\r\n\r\nexport default class Entity implements Partial<EntityMap> {\r\n  alive: boolean;\r\n  id: number;\r\n  appearance?: Appearance;\r\n  attachment?: Attachment;\r\n  explodes?: Explodes;\r\n  field?: Field;\r\n  homing?: Homing;\r\n  ignoreSolid?: IgnoreSolid;\r\n  lifetime?: Lifetime;\r\n  motion?: Motion;\r\n  player: boolean;\r\n  projectile: boolean;\r\n  position?: Position;\r\n  solid: boolean;\r\n  trail?: Trail;\r\n  turret?: Turret;\r\n\r\n  constructor(public g: Engine, public name?: string) {\r\n    this.alive = true;\r\n    this.id = ++g.lastEntityId;\r\n    this.player = false;\r\n    this.projectile = false;\r\n    this.solid = false;\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return this.name;\r\n  }\r\n\r\n  kill(): this {\r\n    this.alive = false;\r\n    this.eachChild((e) => this.g.delete(e));\r\n    return this;\r\n  }\r\n\r\n  eachChild(callback: (e: Entity, at: Attachment) => void) {\r\n    for (const e of this.g.entities.get()) {\r\n      if (e.attachment?.parent === this) callback(e, e.attachment);\r\n    }\r\n  }\r\n\r\n  setAppearance(c?: Appearance): this {\r\n    this.g.dirty = true;\r\n    this.appearance = c;\r\n    return this;\r\n  }\r\n\r\n  setAttachment(c?: Attachment): this {\r\n    this.attachment = c;\r\n    return this;\r\n  }\r\n\r\n  setExplodes(c?: Explodes): this {\r\n    this.explodes = c;\r\n    return this;\r\n  }\r\n\r\n  setField(c?: Field): this {\r\n    this.field = c;\r\n    return this;\r\n  }\r\n\r\n  setHoming(c?: Homing): this {\r\n    this.homing = c;\r\n    return this;\r\n  }\r\n\r\n  setIgnoreSolid(c?: IgnoreSolid): this {\r\n    this.ignoreSolid = c;\r\n    return this;\r\n  }\r\n\r\n  setLifetime(c?: Lifetime): this {\r\n    this.lifetime = c;\r\n    return this;\r\n  }\r\n\r\n  setMotion(c?: Motion): this {\r\n    this.motion = c;\r\n    return this;\r\n  }\r\n\r\n  setPosition(c?: Position): this {\r\n    this.g.dirty = true;\r\n    this.position = c;\r\n    return this;\r\n  }\r\n\r\n  setTrail(c?: Trail): this {\r\n    this.trail = c;\r\n    return this;\r\n  }\r\n\r\n  setTurret(c?: Turret): this {\r\n    this.turret = c;\r\n    return this;\r\n  }\r\n\r\n  setPlayer(tag: boolean): this {\r\n    this.player = tag;\r\n    return this;\r\n  }\r\n\r\n  setProjectile(tag: boolean): this {\r\n    this.projectile = tag;\r\n    return this;\r\n  }\r\n\r\n  setSolid(tag: boolean): this {\r\n    this.solid = tag;\r\n    return this;\r\n  }\r\n\r\n  move(x: number, y: number) {\r\n    this.g.dirty = true;\r\n    this.position = { x, y };\r\n    this.eachChild((e, at) => e.move(x + at.x, y + at.y));\r\n    return this.position;\r\n  }\r\n}\r\n\r\nexport function compareEntities(a: Entity, b: Entity) {\r\n  const layerA = a.appearance?.layer ?? 0;\r\n  const layerB = b.appearance?.layer ?? 0;\r\n  if (layerA !== layerB) return layerA - layerB;\r\n\r\n  return a.id - b.id;\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Layer from \"@app/types/Layer\";\r\n\r\nexport function Battleship(g: Engine) {\r\n  const parent = new Entity(g, \"Battleship\");\r\n\r\n  g.spawn(\"BattleshipHull\").setAttachment({ parent, x: 1, y: 0 });\r\n  g.spawn(\"BattleshipHull\").setAttachment({ parent, x: 2, y: 0 });\r\n  g.spawn(\"BattleshipHull\").setAttachment({ parent, x: 0, y: 1 });\r\n  g.spawn(\"BattleshipHull\").setAttachment({ parent, x: 1, y: 1 });\r\n  g.spawn(\"BattleshipHull\").setAttachment({ parent, x: 2, y: 1 });\r\n\r\n  g.spawn(\"MachineGun\").setAttachment({ parent, x: 0, y: 1 });\r\n  g.spawn(\"HomingMissileLauncher\").setAttachment({ parent, x: 2, y: 1 });\r\n\r\n  return parent;\r\n}\r\n\r\nexport function BattleshipHull(g: Engine) {\r\n  return new Entity(g, \"BattleshipHull\")\r\n    .setAppearance({\r\n      glyph: \"/\",\r\n      layer: Layer.Ship,\r\n      fg: Colors.WHITE,\r\n      bg: Colors.BROWN,\r\n    })\r\n    .setSolid(true);\r\n}\r\n", "enum Layer {\r\n  Effect,\r\n  Ship,\r\n  Gun,\r\n  Bullet,\r\n  Player,\r\n}\r\nexport default Layer;\r\n", "import { Colors } from \"wglt\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Layer from \"@app/types/Layer\";\r\n\r\nexport function Bullet(g: Engine) {\r\n  return new Entity(g, \"Bullet\")\r\n    .setProjectile(true)\r\n    .setAppearance({ glyph: \".\", layer: Layer.Bullet, fg: Colors.YELLOW });\r\n}\r\n\r\nexport function HomingMissile(g: Engine) {\r\n  return new Entity(g, \"HomingMissile\")\r\n    .setProjectile(true)\r\n    .setHoming({ strength: 0.15, duration: 10 })\r\n    .setTrail({ effectPrefab: \"SmokePuff\" })\r\n    .setExplodes({ size: 5, falloff: 1 })\r\n    .setAppearance({ glyph: \"*\", layer: Layer.Bullet, fg: Colors.DARK_RED });\r\n}\r\n", "import { BlendMode, fromRgb } from \"wglt\";\r\n\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Layer from \"@app/types/Layer\";\r\n\r\nexport function SmokePuff(g: Engine) {\r\n  return new Entity(g, \"SmokePuff\")\r\n    .setAppearance({\r\n      glyph: \" \",\r\n      layer: Layer.Effect,\r\n      bg: fromRgb(100, 100, 100, 50),\r\n      blendMode: BlendMode.Add,\r\n    })\r\n    .setLifetime({ duration: 2 });\r\n}\r\n", "import { Colors } from \"wglt\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport { makeTurret } from \"@app/components\";\r\n\r\nexport function MachineGun(g: Engine) {\r\n  return new Entity(g, \"MachineGun\")\r\n    .setAppearance({ glyph: \"o\", layer: Layer.Gun, fg: Colors.WHITE })\r\n    .setTurret(\r\n      makeTurret({\r\n        bulletPrefab: \"Bullet\",\r\n        bulletVelocity: 2,\r\n        salvoCount: 5,\r\n        timeBetweenShots: 0,\r\n        timeBetweenSalvos: 12,\r\n      })\r\n    );\r\n}\r\n\r\nexport function HomingMissileLauncher(g: Engine) {\r\n  return new Entity(g, \"HomingMissileLauncher\")\r\n    .setAppearance({ glyph: \"o\", layer: Layer.Gun, fg: Colors.YELLOW })\r\n    .setTurret(\r\n      makeTurret({\r\n        bulletPrefab: \"HomingMissile\",\r\n        bulletVelocity: 1,\r\n        salvoCount: 1,\r\n        timeBetweenSalvos: 8,\r\n      })\r\n    );\r\n}\r\n", "import Appearance from \"./Appearance\";\r\nimport Attachment from \"./Attachment\";\r\nimport Explodes from \"./Explodes\";\r\nimport Field from \"./Field\";\r\nimport Homing from \"./Homing\";\r\nimport IgnoreSolid from \"./IgnoreSolid\";\r\nimport Lifetime from \"./Lifetime\";\r\nimport Motion from \"./Motion\";\r\nimport Position from \"./Position\";\r\nimport Trail from \"./Trail\";\r\nimport Turret from \"./Turret\";\r\n\r\nexport type ComponentMap = {\r\n  appearance: Appearance;\r\n  attachment: Attachment;\r\n  explodes: Explodes;\r\n  field: Field;\r\n  homing: Homing;\r\n  ignoreSolid: IgnoreSolid;\r\n  lifetime: Lifetime;\r\n  motion: Motion;\r\n  position: Position;\r\n  trail: Trail;\r\n  turret: Turret;\r\n};\r\n\r\nexport type TagComponent = \"player\" | \"projectile\" | \"solid\";\r\n\r\nexport type ComponentAttribute = keyof ComponentMap;\r\nexport type ComponentType = ComponentMap[ComponentAttribute];\r\n\r\nexport type EntityMap = ComponentMap & { [K in TagComponent]: boolean };\r\nexport type EntityAttribute = keyof EntityMap;\r\n\r\nexport {\r\n  Appearance,\r\n  Attachment,\r\n  Explodes,\r\n  Field,\r\n  Homing,\r\n  IgnoreSolid,\r\n  Lifetime,\r\n  Motion,\r\n  Position,\r\n  Trail,\r\n  Turret,\r\n};\r\n\r\nexport const makeTurret = ({\r\n  bulletPrefab = \"Bullet\",\r\n  bulletVelocity = 1,\r\n  salvoCount = 1,\r\n  timeBetweenShots = 1,\r\n  timeBetweenSalvos = 1,\r\n}: Partial<Turret>): Turret => ({\r\n  bulletPrefab,\r\n  bulletVelocity,\r\n  salvoCount,\r\n  timeBetweenShots,\r\n  timeBetweenSalvos,\r\n  timer: 0,\r\n  salvo: salvoCount,\r\n});\r\n", "import { Colors } from \"wglt\";\r\nimport Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Layer from \"@app/types/Layer\";\r\n\r\nexport function Player(g: Engine) {\r\n  return new Entity(g, \"Player\").setPlayer(true).setSolid(true).setAppearance({\r\n    glyph: \">\",\r\n    layer: Layer.Player,\r\n    fg: Colors.WHITE,\r\n    bg: Colors.DARK_RED,\r\n  });\r\n}\r\n", "import * as battleship from \"./battleship\";\r\nimport * as bullet from \"./bullet\";\r\nimport * as effect from \"./effect\";\r\nimport * as gun from \"./gun\";\r\nimport * as player from \"./player\";\r\n\r\nimport Engine from \"@app/Engine\";\r\n\r\nconst AllPrefabs = {\r\n  ...battleship,\r\n  ...bullet,\r\n  ...effect,\r\n  ...gun,\r\n  ...player,\r\n};\r\n\r\nexport type PrefabName = keyof typeof AllPrefabs;\r\n\r\nexport default function instantiate(g: Engine, name: PrefabName) {\r\n  return g.add(AllPrefabs[name](g));\r\n}\r\n", "import Entity from \"@app/Entity\";\r\n\r\nexport default class EntityList {\r\n  dirty: boolean;\r\n\r\n  constructor(\r\n    private compareFn: (a: Entity, b: Entity) => number,\r\n    private entities: Entity[] = []\r\n  ) {\r\n    this.dirty = true;\r\n  }\r\n\r\n  clear() {\r\n    this.entities = [];\r\n    this.dirty = false;\r\n  }\r\n\r\n  add(e: Entity) {\r\n    this.entities.push(e);\r\n    this.dirty = true;\r\n  }\r\n\r\n  clearDead() {\r\n    this.entities = this.entities.filter((i) => i.alive);\r\n  }\r\n\r\n  sort() {\r\n    this.entities.sort(this.compareFn);\r\n    this.dirty = false;\r\n  }\r\n\r\n  get() {\r\n    if (this.dirty) this.sort();\r\n    return this.entities.slice();\r\n  }\r\n}\r\n", "import { EntityAttribute, EntityMap } from \"@app/components\";\r\n\r\nimport Entity from \"@app/Entity\";\r\nimport EntityList from \"@app/EntityList\";\r\n\r\nexport type HasComponents<T extends EntityAttribute[]> = Pick<\r\n  EntityMap,\r\n  T[number]\r\n> &\r\n  Partial<EntityMap>;\r\n\r\nexport type QueryCallback<T extends EntityAttribute[]> = (\r\n  components: HasComponents<T>,\r\n  e: Entity\r\n) => void;\r\n\r\nexport default class Query<T extends EntityAttribute[]> {\r\n  constructor(private list: EntityList, private filter: T) {}\r\n\r\n  matches(e: Entity) {\r\n    if (!e.alive) return false;\r\n\r\n    for (const key of this.filter) {\r\n      if (!e[key]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  forEach(cb: QueryCallback<T>) {\r\n    for (const e of this.list.get()) {\r\n      if (this.matches(e)) cb(e as HasComponents<T>, e);\r\n    }\r\n  }\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\nexport default function int(n?: number) {\r\n  return typeof n === \"undefined\" ? NaN : Math.floor(n);\r\n}\r\n\r\nexport function intPosition(pos: Position): Position {\r\n  return { x: int(pos.x), y: int(pos.y) };\r\n}\r\n\r\nexport function isSameCell(a: Position, b: Position): boolean {\r\n  const ia = intPosition(a);\r\n  const ib = intPosition(b);\r\n  return ia.x === ib.x && ia.y === ib.y;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport int from \"@app/tools/int\";\r\n\r\nexport default function addDrawEntities(g: Engine) {\r\n  const query = new Query(g.entities, [\"appearance\", \"position\"]);\r\n  g.on(\"draw\", () =>\r\n    query.forEach(({ appearance, position }) =>\r\n      g.drawAt(\r\n        int(position.x),\r\n        int(position.y),\r\n        appearance.glyph,\r\n        appearance.fg,\r\n        appearance.bg,\r\n        appearance.blendMode\r\n      )\r\n    )\r\n  );\r\n}\r\n", "import { Appearance, Field, Position } from \"@app/components\";\r\n\r\nimport { BlendMode } from \"wglt\";\r\nimport FieldType from \"@app/types/FieldType\";\r\nimport GradientRun from \"@app/GradientRun\";\r\nimport Layer from \"@app/types/Layer\";\r\nimport distance from \"@app/tools/distance\";\r\n\r\nexport type FieldCell = { x: number; y: number; intensity: number };\r\n\r\nconst fieldGradients: Record<FieldType, GradientRun> = {\r\n  fire: new GradientRun([\r\n    [0, [0, 0, 0, 0]],\r\n    [2, [255, 0, 0, 150]],\r\n    [4, [255, 255, 0, 150]],\r\n    [6, [255, 255, 255, 150]],\r\n    [10, [255, 255, 255, 255]],\r\n  ]),\r\n};\r\n\r\nexport function getFieldAppearance(field: Field): Appearance | undefined {\r\n  if (field.intensity <= 0) return undefined;\r\n\r\n  return {\r\n    glyph: \" \",\r\n    layer: Layer.Effect,\r\n    bg: fieldGradients[field.type].get(field.intensity),\r\n    blendMode: BlendMode.Add,\r\n  };\r\n}\r\n\r\n// TODO shape around walls lol\r\nexport function generateField(centre: Position, size: number) {\r\n  const parts: FieldCell[] = [];\r\n\r\n  const minX = Math.floor(centre.x - size);\r\n  const maxX = Math.ceil(centre.x + size);\r\n  const minY = Math.floor(centre.y - size);\r\n  const maxY = Math.ceil(centre.y + size);\r\n\r\n  for (let y = minY; y <= maxY; y++) {\r\n    for (let x = minX; x <= maxX; x++) {\r\n      const dist = distance(centre, { x, y });\r\n      if (dist >= size) continue;\r\n\r\n      parts.push({ x, y, intensity: size - dist });\r\n    }\r\n  }\r\n\r\n  return parts;\r\n}\r\n", "import RGBA from \"@app/types/RGBA\";\r\nimport { fromRgb } from \"wglt\";\r\nimport lerp from \"@app/tools/lerp\";\r\n\r\ntype GradientPoint = [breakpoint: number, colour: RGBA];\r\n\r\nexport default class GradientRun {\r\n  constructor(public points: GradientPoint[]) {\r\n    this.sort();\r\n  }\r\n\r\n  private sort() {\r\n    this.points.sort(([a], [b]) => a - b);\r\n  }\r\n\r\n  add(breakpoint: number, c: RGBA): this {\r\n    this.points.push([breakpoint, c]);\r\n    this.sort();\r\n    return this;\r\n  }\r\n\r\n  get(value: number) {\r\n    const [low, lowColour] = this.points[0];\r\n    if (value <= low) return fromRgb(...lowColour);\r\n\r\n    const [high, highColour] = this.points[this.points.length - 1];\r\n    if (value >= high) return fromRgb(...highColour);\r\n\r\n    const higherIndex = this.points.findIndex(([p]) => p > value);\r\n    const [below, [ar, ag, ab, aa]] = this.points[higherIndex - 1];\r\n    const [above, [br, bg, bb, ba]] = this.points[higherIndex];\r\n\r\n    const r = (value - below) / (above - below);\r\n    return fromRgb(\r\n      lerp(ar, br, r),\r\n      lerp(ag, bg, r),\r\n      lerp(ab, bb, r),\r\n      lerp(aa, ba, r)\r\n    );\r\n  }\r\n}\r\n", "export default function lerp(start: number, end: number, t: number) {\r\n  return start * (1.0 - t) + end * t;\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\nexport default function distance(a: Position, b: Position) {\r\n  const dx = Math.abs(a.x - b.x);\r\n  const dy = Math.abs(a.y - b.y);\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport { generateField } from \"@app/logic/field\";\r\n\r\nexport default function addExplosives(g: Engine) {\r\n  g.on(\"kill\", ({ e }) => {\r\n    const { explodes, name, position } = e;\r\n\r\n    if (explodes && position) {\r\n      for (const { x, y, intensity } of generateField(\r\n        position,\r\n        explodes.size\r\n      )) {\r\n        g.add(\r\n          new Entity(g, name + \"Explosion\").setPosition({ x, y }).setField({\r\n            type: \"fire\",\r\n            intensity,\r\n            falloff: explodes.falloff,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  });\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport { getFieldAppearance } from \"@app/logic/field\";\r\n\r\nexport default function addFields(g: Engine) {\r\n  const query = new Query(g.entities, [\"field\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ field }, e) => {\r\n      field.intensity -= field.falloff;\r\n      e.setAppearance(getFieldAppearance(field));\r\n\r\n      if (field.intensity <= 0) g.delete(e);\r\n      else {\r\n        // TODO damage etc.\r\n      }\r\n    })\r\n  );\r\n  g.on(\"spawn\", ({ e }) => {\r\n    if (e.field) e.setAppearance(getFieldAppearance(e.field));\r\n  });\r\n}\r\n", "const tau = Math.PI * 2;\r\n\r\nexport default function angleDiff(x: number, y: number) {\r\n  const a = (x - y) % tau;\r\n  const b = (y - x) % tau;\r\n\r\n  return a < b ? -a : b;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport angleDiff from \"@app/tools/angleDiff\";\r\n\r\nexport default function addHoming(g: Engine) {\r\n  const query = new Query(g.entities, [\"homing\", \"motion\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ homing, motion, position }, e) => {\r\n      const desired = Math.atan2(\r\n        g.player.position!.y - position.y,\r\n        g.player.position!.x - position.x\r\n      );\r\n      const diff = angleDiff(motion.angle, desired);\r\n\r\n      if (Math.abs(diff) <= homing.strength) motion.angle = desired;\r\n      else if (diff < 0) motion.angle -= homing.strength;\r\n      else motion.angle += homing.strength;\r\n\r\n      if (--homing.duration <= 0) {\r\n        e.setHoming();\r\n        e.setTrail();\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\n\r\nexport default function addLifetime(g: Engine) {\r\n  const query = new Query(g.entities, [\"lifetime\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ lifetime }, e) => {\r\n      if (--lifetime.duration <= 0) g.delete(e);\r\n    })\r\n  );\r\n}\r\n", "import Motion from \"@app/components/Motion\";\r\n\r\nexport default function angleMove(mo: Motion): [dx: number, dy: number] {\r\n  const dx = Math.cos(mo.angle) * mo.vel;\r\n  const dy = Math.sin(mo.angle) * mo.vel;\r\n  return [dx, dy];\r\n}\r\n", "import { Position } from \"@app/components\";\r\n\r\n/// thanks https://www.redblobgames.com/grids/line-drawing.html#stepping\r\nexport function walkGrid(p0: Position, p1: Position) {\r\n  const dx = p1.x - p0.x,\r\n    dy = p1.y - p0.y,\r\n    nx = Math.abs(dx),\r\n    ny = Math.abs(dy),\r\n    signX = dx > 0 ? 1 : -1,\r\n    signY = dy > 0 ? 1 : -1;\r\n\r\n  const p = { ...p0 };\r\n  const points = [{ ...p }];\r\n  for (let ix = 0, iy = 0; ix < nx || iy < ny; ) {\r\n    if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n      // next step is horizontal\r\n      p.x += signX;\r\n      ix++;\r\n    } else {\r\n      // next step is vertical\r\n      p.y += signY;\r\n      iy++;\r\n    }\r\n    points.push({ ...p });\r\n  }\r\n  return points;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Entity from \"@app/Entity\";\r\nimport Query from \"@app/Query\";\r\nimport angleMove from \"@app/tools/angleMove\";\r\nimport { intPosition } from \"@app/tools/int\";\r\nimport { walkGrid } from \"@app/logic/geometry\";\r\n\r\nexport default function addMotion(g: Engine) {\r\n  const query = new Query(g.entities, [\"motion\", \"position\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ motion, position, explodes, ignoreSolid }, e) => {\r\n      const [dx, dy] = angleMove(motion);\r\n      const dst = { x: position.x + dx, y: position.y + dy };\r\n\r\n      const line = walkGrid(intPosition(position), intPosition(dst));\r\n\r\n      let hitWall = false;\r\n      let hitEntity: Entity | undefined = undefined;\r\n      for (const pos of line) {\r\n        g.move(e, pos);\r\n\r\n        const { wall, solid } = g.getContents(pos);\r\n        if (wall) {\r\n          hitWall = true;\r\n          break;\r\n        } else if (solid && !ignoreSolid?.ids.includes(g.getRootID(solid))) {\r\n          hitEntity = solid;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (hitWall) {\r\n        g.delete(e);\r\n      } else if (hitEntity) {\r\n        // TODO damage etc.\r\n        g.delete(e);\r\n      } else {\r\n        g.move(e, dst);\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { isSameCell } from \"@app/tools/int\";\r\n\r\nexport default function addTrails(g: Engine) {\r\n  g.on(\"move\", ({ e, old, pos }) => {\r\n    if (e.trail && !isSameCell(old, pos))\r\n      g.spawn(e.trail.effectPrefab).setPosition(old);\r\n  });\r\n}\r\n", "import { Turret } from \"@app/components\";\r\n\r\nexport default function isTurretFiring(state: Turret): boolean {\r\n  if (state.timer) {\r\n    state.timer--;\r\n    if (state.timer <= 0 && state.salvo <= 0) state.salvo = state.salvoCount;\r\n    return false;\r\n  }\r\n\r\n  if (--state.salvo <= 0) state.timer = state.timeBetweenSalvos;\r\n  else state.timer = state.timeBetweenShots;\r\n  return true;\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport Query from \"@app/Query\";\r\nimport isTurretFiring from \"@app/logic/turret\";\r\n\r\nexport default function addTurrets(g: Engine) {\r\n  const query = new Query(g.entities, [\"position\", \"turret\"]);\r\n  g.on(\"tick\", () =>\r\n    query.forEach(({ position, turret }, e) => {\r\n      if (isTurretFiring(turret)) {\r\n        g.spawn(turret.bulletPrefab)\r\n          .setIgnoreSolid({ ids: [g.getRootID(e)] })\r\n          .setPosition({ x: position.x + 0.5, y: position.y + 0.5 })\r\n          .setMotion({\r\n            angle: Math.atan2(\r\n              g.player.position!.y - position.y,\r\n              g.player.position!.x - position.x\r\n            ),\r\n            vel: turret.bulletVelocity,\r\n          });\r\n      }\r\n    })\r\n  );\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport addDrawEntities from \"./DrawEntities\";\r\nimport addExplosives from \"./Explosives\";\r\nimport addFields from \"./Fields\";\r\nimport addHoming from \"./Homing\";\r\nimport addLifetime from \"./Lifetime\";\r\nimport addMotion from \"./Motion\";\r\nimport addTrails from \"./Trails\";\r\nimport addTurrets from \"./Turrets\";\r\n\r\nexport function addSystems(g: Engine) {\r\n  addLifetime(g);\r\n  addHoming(g);\r\n  addTurrets(g);\r\n  addFields(g);\r\n  addMotion(g);\r\n\r\n  addDrawEntities(g);\r\n\r\n  addTrails(g);\r\n\r\n  addExplosives(g);\r\n}\r\n", "import Engine from \"@app/Engine\";\r\nimport { Terminal } from \"wglt\";\r\n\r\nfunction loadEngine(parent: HTMLElement) {\r\n  const cols = 60;\r\n  const rows = 40;\r\n\r\n  const container = document.createElement(\"div\");\r\n  parent.appendChild(container);\r\n  const onResize = () => {\r\n    const wantWidth = cols * 8;\r\n    const wantHeight = rows * 8;\r\n\r\n    const ratioWidth = Math.floor(window.innerWidth / wantWidth);\r\n    const ratioHeight = Math.floor(window.innerHeight / wantHeight);\r\n    const ratio = Math.min(ratioWidth, ratioHeight);\r\n\r\n    container.style.width = `${wantWidth * ratio}px`;\r\n    container.style.height = `${wantHeight * ratio}px`;\r\n  };\r\n  window.addEventListener(\"resize\", onResize);\r\n  onResize();\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  container.appendChild(canvas);\r\n\r\n  const term = new Terminal(canvas, cols, rows);\r\n  const g = new Engine(term);\r\n  g.gotoDemoRoom();\r\n  (window as any).g = g;\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => loadEngine(document.body));\r\n"],
  "mappings": "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",
  "names": ["require_wglt", "__commonJSMin", "exports", "module", "import_wglt", "Entity", "g", "name", "e", "callback", "_a", "c", "tag", "x", "y", "at", "compareEntities", "a", "b", "_b", "_c", "_d", "layerA", "layerB", "battleship_exports", "__export", "Battleship", "BattleshipHull", "import_wglt", "Layer", "Layer_default", "Battleship", "g", "parent", "Entity", "BattleshipHull", "Layer_default", "bullet_exports", "__export", "Bullet", "HomingMissile", "import_wglt", "Bullet", "g", "Entity", "Layer_default", "HomingMissile", "effect_exports", "__export", "SmokePuff", "import_wglt", "SmokePuff", "g", "Entity", "Layer_default", "gun_exports", "__export", "HomingMissileLauncher", "MachineGun", "import_wglt", "makeTurret", "bulletPrefab", "bulletVelocity", "salvoCount", "timeBetweenShots", "timeBetweenSalvos", "MachineGun", "g", "Entity", "Layer_default", "makeTurret", "HomingMissileLauncher", "player_exports", "__export", "Player", "import_wglt", "Player", "g", "Entity", "Layer_default", "AllPrefabs", "__spreadValues", "battleship_exports", "bullet_exports", "effect_exports", "gun_exports", "player_exports", "instantiate", "g", "name", "EntityList", "compareFn", "entities", "e", "i", "Query", "list", "filter", "e", "key", "cb", "int", "n", "intPosition", "pos", "isSameCell", "a", "b", "ia", "ib", "addDrawEntities", "g", "query", "Query", "appearance", "position", "int", "import_wglt", "import_wglt", "lerp", "start", "end", "t", "GradientRun", "points", "a", "b", "breakpoint", "c", "value", "low", "lowColour", "high", "highColour", "higherIndex", "p", "below", "ar", "ag", "ab", "aa", "above", "br", "bg", "bb", "ba", "r", "lerp", "distance", "a", "b", "dx", "dy", "fieldGradients", "GradientRun", "getFieldAppearance", "field", "Layer_default", "generateField", "centre", "size", "parts", "minX", "maxX", "minY", "maxY", "y", "x", "dist", "distance", "addExplosives", "g", "e", "explodes", "name", "position", "x", "y", "intensity", "generateField", "Entity", "addFields", "g", "query", "Query", "field", "e", "getFieldAppearance", "tau", "angleDiff", "x", "y", "a", "b", "addHoming", "g", "query", "Query", "homing", "motion", "position", "e", "desired", "diff", "angleDiff", "addLifetime", "g", "query", "Query", "lifetime", "e", "angleMove", "mo", "dx", "dy", "walkGrid", "p0", "p1", "dx", "dy", "nx", "ny", "signX", "signY", "p", "__spreadValues", "points", "ix", "iy", "addMotion", "g", "query", "Query", "motion", "position", "explodes", "ignoreSolid", "e", "dx", "dy", "angleMove", "dst", "line", "walkGrid", "intPosition", "hitWall", "hitEntity", "pos", "wall", "solid", "addTrails", "g", "e", "old", "pos", "isSameCell", "isTurretFiring", "state", "addTurrets", "g", "query", "Query", "position", "turret", "e", "isTurretFiring", "addSystems", "g", "addLifetime", "addHoming", "addTurrets", "addFields", "addMotion", "addDrawEntities", "addTrails", "addExplosives", "MAP_WIDTH", "MAP_HEIGHT", "Engine", "term", "mapWidth", "mapHeight", "EntityList", "compareEntities", "addSystems", "player", "e", "name", "data", "cb", "handler", "instantiate", "pos", "old", "sx", "sy", "w", "h", "map", "yo", "xo", "wall", "x", "y", "g", "fg", "bg", "bm", "cell", "visible", "square", "int", "entities", "_a", "_b", "solid", "move", "dx", "dy", "import_wglt", "loadEngine", "parent", "container", "onResize", "ratioWidth", "ratioHeight", "ratio", "canvas", "term", "g", "Engine"]
}
